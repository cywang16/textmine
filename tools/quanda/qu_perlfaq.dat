1:9###0.12,7###0.10,21###0.09,42###0.08,284###0.08,60###0.08,20###0.08,53###0.08,11###0.08,31###0.07:What is Perl?  EOL EOL:Perl is a high-level programming language with an eclectic heritage written by Larry Wall and a cast of thousands. It derives from the ubiquitous C programming language and to a lesser extent from sed, awk, the Unix shell, and at least a dozen other tools and languages. Perl's process, file, and text manipulation facilities make it particularly well-suited for tasks involving quick prototyping, system utilities, software tools, system management tasks, database access, graphical programming, networking, and world wide web programming. These strengths make it especially popular with system administrators and CGI script authors, but mathematicians, geneticists, journalists, and even managers also use Perl. Maybe you should, too. EOL EOL::what###1.00000:what is###1.00000:tools###0.033___tasks###0.030___programming_language###0.028___make_it###0.028___programming###0.024___system###0.024___administrators###0.020___ubiquitous###0.020___facilities###0.020___derives###0.020___cast###0.020___eclectic###0.020___dozen###0.020___geneticists###0.020___to_a_lesser_extent###0.020___heritage###0.020___popular_with###0.020___strengths###0.020___sed###0.020___mathematicians###0.020___journalists###0.020___involving###0.018___well-suited###0.018___world_wide_web###0.018___high-level###0.018___graphical###0.018___management###0.018___managers###0.018___manipulation###0.018___prototyping###0.018___thousands###0.018___utilities###0.016___authors###0.015___quick###0.015___networking###0.015___maybe###0.015___database###0.015___wall###0.015___awk###0.014___particularly###0.013___at_least###0.013___software###0.013___especially###0.013___perl###0.012___larry###0.012___languages###0.012___access###0.011___cgi###0.011___process###0.011___script###0.011___shell###0.010___unix###0.010___perl's###0.010___written###0.010___text###0.009___even###0.009___eol###0.008___file###0.007___
2:31###0.26,15###0.15,24###0.15,16###0.14,11###0.13,23###0.12,50###0.11,42###0.11,58###0.10,5###0.10:Who supports Perl? Who develops it? Why is it free?  EOL EOL:The original culture of the pre-populist Internet and the deeply-held beliefs of Perl's author, Larry Wall, gave rise to the free and open distribution policy of perl. Perl is supported by its users. The core, the standard Perl library, the optional modules, and the documentation you're reading now were all written by volunteers. See the personal note at the end of the README file in the perl source distribution for more details. See perlhist (new as of 5.005) for Perl's milestone releases. EOL EOL In particular, the core development team (known as the Perl Porters) are a rag-tag band of highly altruistic individuals committed to producing better software for free than you could hope to purchase for money. You may snoop on pending developments via nntp!://news.perl.com/perl.porters-gw/ and the Deja archive at http!://www.deja.com/ using the perl.porters-gw newsgroup, or you can subscribe to the mailing list by sending perl5-porters-request@perl.org a subscription request. EOL EOLWhile the GNU project includes Perl in its distributions, there's no such thing as "GNU Perl". Perl is not produced nor maintained by the Free Software Foundation. Perl's licensing terms are also more open than GNU software's tend to be. EOL EOLYou can get commercial support of Perl if you wish, although for most users the informal support will more than suffice. See the answer to "Where can I buy a commercial version of perl?" for more information. EOL EOL:resource###0.00556___voice###0.00556___influence###0.00556___natural_event###0.00556___help###0.00556___financial_backing###0.04444___supports###0.08889___blessing###0.00556___musical_accompaniment###0.04444___reinforcement###0.00556___happening###0.00556___occurrence###0.00556___beingness###0.00556___supporting###0.04444___operation###0.00556___activity###0.00556___financial_support###0.04444___substantiation###0.00556___nutrient###0.00556___funding###0.04444___layer###0.00556___software_system###0.00556___validation###0.00556___assist###0.00556___proof###0.00556___assistance###0.00556___sustenance###0.04444___reenforcement###0.04444___living###0.04444___jail_cell###0.00556___livelihood###0.04444___device###0.00556___aid###0.00556___accompaniment###0.04444___keep###0.04444___backing###0.04444___confirmation###0.00556___supporting_structure###0.00556___approving###0.00556___strengthener###0.00556___prison_cell###0.00556___fastness###0.00556___part###0.00556___existence###0.00556___being###0.00556___cell###0.00556___protection###0.00556___software###0.00556___stronghold###0.00556___support###0.04444___experience###0.00556___food###0.00556___finance###0.00556___people###0.00556___bread_and_butter###0.04444___documentation###0.04444___approval###0.00556___software_package###0.00556___package###0.00556___military_operation###0.00556:who###0.66667___why###0.33333:why is###0.33333___who supports###0.33333___who develops###0.33333:gnu###0.029___perl###0.026___free###0.022___porters-gw###0.019___perl's###0.017___core###0.016___commercial###0.016___users###0.015___software###0.014___support###0.012___http!://www.deja.com/###0.010___volunteers###0.010___beliefs###0.010___individuals###0.010___developments###0.010___band###0.010___perl5-porters-request@perl.org###0.010___develops###0.010___altruistic###0.010___licensing###0.010___milestone###0.010___nntp!://news.perl.com###0.010___policy###0.010___pending###0.010___porters###0.010___pre-populist###0.010___producing###0.010___rag-tag###0.010___rise###0.010___snoop###0.010___deeply-held###0.010___software's###0.010___subscribe_to###0.010___foundation###0.010___culture###0.010___perlhist###0.009___subscription###0.009___buy###0.009___tend###0.009___in_particular###0.009___produced###0.009___mailing_list###0.009___informal###0.009___terms###0.009___eol###0.009___distribution###0.009___open###0.009___archive###0.009___money###0.009___committed###0.009___personal###0.009___deja###0.009___for_free###0.009___author###0.009___known_as###0.009___optional###0.009___maintained###0.009___project###0.009___purchase###0.009___readme###0.009___distributions###0.008___highly###0.008___internet###0.008___eolwhile###0.008___gave###0.008___sending###0.008___newsgroup###0.008___includes###0.008___wall###0.008___request###0.008___suffice###0.008___team###0.008___hope###0.007___supported###0.007___file_in###0.007___original###0.007___wish###0.007___releases###0.007___library###0.007___note###0.006___although###0.006___larry###0.006___more_than###0.006___reading###0.006___development###0.006___documentation###0.006___thing###0.006___answer###0.006___supports###0.006___better###0.006___there's###0.006___source###0.005___eolyou###0.005___written###0.005___is_not###0.005___information###0.005___version###0.005___details###0.005___modules###0.004___why###0.004___standard###0.004___new###0.004___may###0.004___you're###0.003___using###0.003___
3:6###0.30,4###0.17,15###0.17,16###0.15,39###0.08,266###0.08,224###0.07,205###0.07,2###0.07,55###0.07:Which version of Perl should I use?  EOL EOL:You should definitely use version 5. Version 4 is old, limited, and no longer maintained; its last patch (4.036) was in 1992, long ago and far away. Sure, it's stable, but so is anything that's dead; in fact, perl4 had been called a dead, flea- bitten camel carcass. The most recent production release is 5.6 (although 5.005_03 is still supported). The most cutting- edge development release is 5.7. Further references to the Perl language in this document refer to the production release unless otherwise specified. There may be one or more official bug fixes by the time you read this, and also perhaps some experimental versions on the way to the next release. All releases prior to 5.004 were subject to buffer overruns, a grave security issue. EOL EOL:change_of_location###0.00662___rendering###0.05298___language###0.00662___alteration###0.00662___motion###0.00662___reading###0.05298___written_language###0.00662___dancing###0.00662___data_point###0.00662___urban_center###0.00662___transformation###0.00662___mental_representation###0.00662___activity###0.00662___thing###0.00662___interpretation###0.05298___saltation###0.00662___datum###0.00662___adaptation###0.05298___musical_theme###0.00662___drawing###0.00662___public_speaking###0.00662___metropolis###0.00662___written_account###0.00662___measuring###0.00662___organism###0.00662___written_record###0.00662___taxon###0.00662___speaking###0.00662___variable###0.00662___explanation###0.00662___perturbation###0.00662___mensuration###0.00662___linguistic_process###0.00662___variation###0.05298___movement###0.00662___travel###0.00662___paraphrasis###0.00662___performance###0.00662___speechmaking###0.00662___internal_representation###0.00662___account###0.00662___measurement###0.00662___departure###0.00662___difference###0.00662___terpsichore###0.00662___city###0.00662___melodic_theme###0.00662___deviation###0.00662___defrayal###0.00662___adjustment###0.00662___dance###0.00662___version###0.10596___modification###0.00662___paraphrase###0.00662___writing###0.00662___theme###0.00662___oral_presentation###0.00662___divergence###0.00662___piece_of_writing###0.00662___taxonomic_group###0.00662___idea###0.00662___variant###0.05298___measure###0.00662___being###0.00662___representation###0.00662___type###0.00662___change###0.00662___written_material###0.00662___public_presentation###0.00662___variable_quantity###0.00662___written_communication###0.00662___interlingual_rendition###0.05298___translation###0.05298___organic_process###0.00662___change_of_integrity###0.00662___defrayment###0.00662___payment###0.00662___angle###0.00662___biological_process###0.00662___move###0.00662:which###1.00000:which version###1.00000:release###0.043___dead###0.041___production###0.034___version###0.030___flea###0.020___carcass###0.020___bitten###0.020___definitely###0.020___subject_to###0.020___overruns###0.020___cutting###0.020___long_ago###0.020___grave###0.020___official###0.018___specified###0.018___stable###0.018___edge###0.018___patch###0.018___on_the_way###0.018___further###0.017___prior_to###0.017___maintained###0.017___document###0.017___fixes###0.017___experimental###0.017___limited###0.017___refer###0.016___buffer###0.016___away###0.015___otherwise###0.015___perl4###0.014___no_longer###0.014___supported###0.014___recent###0.014___camel###0.014___in_fact###0.013___next###0.013___perhaps###0.013___security###0.013___issue###0.013___releases###0.013___sure###0.013___although###0.012___anything###0.012___bug###0.012___development###0.012___unless###0.012___versions###0.012___references###0.012___in_this###0.012___language###0.011___last###0.011___that's###0.011___called###0.011___eol###0.008___time###0.008___read###0.008___perl###0.008___it's###0.007___may###0.007___one###0.006___
4:6###0.21,3###0.17,15###0.13,130###0.10,5###0.10,32###0.09,16###0.09,124###0.08,55###0.08,54###0.08:What are perl4 and perl5?  EOL EOL:Perl4 and perl5 are informal names for different versions of the Perl programming language. It's easier to say "perl5" than it is to say "the 5(.004) release of Perl", but some people have interpreted this to mean there's a language called "perl5", which isn't the case. Perl5 is merely the popular name for the fifth major release (October 1994), while perl4 was the fourth major release (March 1991). There was also a perl1 (in January 1988), a perl2 (June 1988), and a perl3 (October 1989). EOL EOLThe 5.0 release is, essentially, a ground-up rewrite of the original perl source code from releases 1 through 4. It has been modularized, object-oriented, tweaked, trimmed, and optimized until it almost doesn't look like the old code. However, the interface is mostly the same, and compatibility with previous releases is very high. See perltrap/"Perl4 to Perl5 Traps". EOL EOLTo avoid the "what language is perl5?" confusion, some people prefer to simply use "perl" to refer to the latest version of perl and avoid using "perl5" altogether. It's not really that big a deal, though. EOL EOLSee perlhist for a history of Perl revisions. EOL EOL::what###1.00000:what are###1.00000:perl5###0.072___perl4###0.041___release###0.030___october###0.025___major###0.025___releases###0.018___perl###0.017___avoid###0.016___people###0.016___language###0.016___say###0.016___tweaked###0.014___history###0.014___june###0.014___ground-up###0.014___perl2###0.014___perl3###0.014___fourth###0.014___optimized###0.014___look_like###0.014___modularized###0.014___revisions###0.014___traps###0.014___trimmed###0.014___confusion###0.012___march###0.012___perlhist###0.012___essentially###0.012___informal###0.012___latest###0.012___high###0.012___fifth###0.012___perl1###0.011___january###0.011___perltrap###0.011___altogether###0.011___compatibility###0.011___rewrite###0.011___popular###0.011___refer###0.011___object-oriented###0.011___it's###0.011___eol###0.011___mostly###0.010___interpreted###0.010___previous###0.010___source_code###0.010___names###0.010___deal###0.010___programming_language###0.010___original###0.009___interface###0.009___until###0.009___easier###0.009___merely###0.009___simply###0.009___almost###0.009___prefer###0.009___versions###0.008___however###0.008___though###0.008___mean###0.008___eolsee###0.008___case###0.008___there's###0.008___eolto###0.007___called###0.007___name###0.007___different###0.007___version###0.007___isn't###0.006___really###0.006___eolthe###0.005___doesn't###0.005___code###0.005___using###0.004___
5:2###0.10,4###0.10,14###0.10,31###0.09,165###0.08,15###0.08,226###0.08,26###0.08,107###0.07,177###0.07:What is perl6?  EOL EOL:At The Second O'Reilly Open Source Software Convention, Larry Wall announced Perl6 development would begin in earnest. Perl6 was an oft used term for Chip Salzenberg's project to rewrite Perl in C++ named Topaz. However, Topaz should not be confused with the nisus to rewrite Perl while keeping the lessons learned from other software, as well as Perl5, in mind. EOL EOLIf you have a desire to help in the crusade to make Perl a better place then peruse the Perl6 developers page at http!:// www.perl.org/perl6/ and get involved. EOL EOLThe first alpha release is expected by Summer 2001. EOL EOL"We're really serious about reinventing everything that needs reinventing." --Larry Wall EOL EOL::what###1.00000:what is###1.00000:perl6###0.076___reinventing###0.038___topaz###0.038___rewrite###0.029___wall###0.028___software###0.025___larry###0.023___crusade###0.019___chip###0.019___desire###0.019___salzenberg's###0.019___lessons###0.019___oft###0.019___in_earnest###0.019___peruse###0.019___nisus###0.019___www.perl.org###0.019___involved###0.019___announced###0.017___confused###0.017___developers###0.017___convention###0.017___summer###0.017___expected###0.017___learned###0.017___eol###0.016___we're###0.015___keeping###0.015___alpha###0.015___needs###0.015___project###0.015___should_not###0.015___mind###0.014___named###0.014___o'reilly###0.013___as_well_as###0.013___everything###0.013___page###0.013___serious###0.013___second###0.011___begin###0.011___perl5###0.011___perl###0.011___term###0.011___development###0.011___however###0.011___place###0.011___http!://###0.011___better###0.010___help###0.010___source###0.010___release###0.010___used###0.008___really###0.008___first###0.008___you_have###0.008___open###0.008___eolthe###0.007___eolif###0.006___
6:3###0.30,4###0.21,15###0.14,16###0.12,32###0.12,2###0.10,221###0.10,24###0.09,39###0.08,209###0.08:How stable is Perl?  EOL EOL:Production releases, which incorporate bug fixes and new functionality, are widely tested before release. Since the 5.000 release, we have averaged only about one production release per year. EOL EOLLarry and the Perl development team occasionally make changes to the internal core of the language, but all possible efforts are made toward backward compatibility. While not quite all perl4 scripts run flawlessly under perl5, an update to perl should nearly never invalidate a program written for an earlier version of perl (barring accidental bug fixes and the rare new keyword). EOL EOL::how###1.00000:how stable###1.00000:fixes###0.041___production###0.041___release###0.039___bug###0.030___flawlessly###0.024___barring###0.024___averaged###0.024___invalidate###0.024___keyword###0.024___incorporate###0.024___eollarry###0.024___efforts###0.024___per_year###0.024___occasionally###0.024___widely###0.024___tested###0.022___stable###0.022___backward###0.022___accidental###0.022___toward###0.022___made###0.020___rare###0.020___we_have###0.020___compatibility###0.020___perl###0.020___new###0.019___functionality###0.018___core###0.018___changes###0.018___nearly###0.018___team###0.018___update###0.017___perl4###0.017___earlier###0.017___internal###0.017___quite###0.016___scripts###0.016___releases###0.015___perl5###0.015___possible###0.014___development###0.014___language###0.014___run###0.013___eol###0.013___written###0.012___version###0.012___program###0.008___one###0.008___
7:41###0.14,253###0.13,10###0.12,50###0.12,11###0.11,62###0.11,12###0.11,31###0.11,243###0.10,1###0.10:Is Perl difficult to learn?  EOL EOL:No, Perl is easy to start learning--and easy to keep learning. It looks like most programming languages you're likely to have experience with, so if you've ever written a C program, an awk script, a shell script, or even a BASIC program, you're already partway there. EOL EOLMost tasks only require a small subset of the Perl language. One of the guiding mottos for Perl development is "there's more than one way to do it" (TMTOWTDI, sometimes pronounced "tim toady"). Perl's learning curve is therefore shallow (easy to learn) and long (there's a whole lot you can do if you really want). EOL EOLFinally, because Perl is frequently (but not always, and certainly not by definition) an interpreted language, you can write your programs and test them without an intermediate compilation step, allowing you to experiment and test/debug quickly and easily. This ease of experimentation flattens the learning curve even more. EOL EOLThings that make Perl easier to learn!: Unix experience, almost any kind of programming experience, an understanding of regular expressions, and the ability to understand other people's code. If there's something you need to do, then it's probably already been done, and a working example is usually available for free. Don't forget the new perl modules, either. They're discussed in Part 3 of this FAQ, along with CPAN, which is discussed in Part 2. EOL EOL::::learning###0.037___experience###0.030___easy###0.023___curve###0.022___learn###0.020___there's###0.019___discussed###0.018___perl###0.016___programming###0.014___language###0.013___already###0.012___script###0.012___intermediate###0.011___eolfinally###0.011___people's###0.011___test/debug###0.011___partway###0.011___pronounced###0.011___difficult###0.011___toady###0.011___mottos###0.011___whole_lot###0.011___experiment###0.011___guiding###0.011___experimentation###0.011___allowing###0.011___subset###0.011___ability###0.011___eolthings###0.011___flattens###0.011___even###0.011___part###0.010___tim###0.010___ease###0.010___eolmost###0.010___shallow###0.010___tmtowtdi###0.010___along_with###0.010___for_free###0.009___compilation###0.009___frequently###0.008___definition###0.008___c_program###0.008___step###0.008___quickly###0.008___understand###0.008___understanding###0.008___basic###0.008___eol###0.008___easily###0.008___forget###0.008___therefore###0.008___tasks###0.008___looks###0.008___you're###0.008___interpreted###0.008___ever###0.008___working###0.008___certainly###0.007___awk###0.007___kind_of###0.007___long###0.007___likely###0.007___test###0.007___they're###0.007___keep###0.007___easier###0.007___almost###0.007___one###0.007___you've###0.007___small###0.007___more_than###0.007___development###0.006___do_it###0.006___languages###0.006___start###0.006___expressions###0.006___faq###0.006___require###0.006___sometimes###0.006___done###0.006___usually###0.006___shell###0.006___unix###0.006___always###0.006___perl's###0.005___without###0.005___either###0.005___written###0.005___programs###0.005___regular###0.005___example###0.005___really###0.005___modules###0.005___something###0.005___available###0.004___write###0.004___probably###0.004___need###0.004___new###0.004___it's###0.004___don't###0.004___code###0.004___program###0.004___cpan###0.003___
8:9###0.11,56###0.10,225###0.09,294###0.08,217###0.08,210###0.07,205###0.07,11###0.07,233###0.07,24###0.07:How does Perl compare with other languages like Java, Python, REXX, Scheme, or Tcl?  EOL EOL:Favorably in some areas, unfavorably in others. Precisely which areas are good and bad is often a personal choice, so asking this question on Usenet runs a strong risk of starting an unproductive Holy War. EOL EOLProbably the best thing to do is try to write equivalent code to do a set of tasks. These languages have their own newsgroups in which you can learn about (but hopefully not argue about) them. EOL EOLSome comparison documents can be found at http!://language.perl.com/versus/ if you really can't stop yourself. EOL EOL:language###0.05369___speech###0.05369___reprimand###0.00671___verse_form###0.00671___communication###0.00671___poem###0.00671___textual_matter###0.00671___linguistic_communication###0.05369___spoken_language###0.05369___oral_communication###0.05369___rebuke###0.00671___word###0.00671___terminology###0.05369___speech_production###0.00671___faculty###0.00671___speaking###0.00671___linguistic_process###0.05369___languages###0.10738___lyric###0.05369___reproof###0.00671___speech_communication###0.05369___speech_act###0.00671___mental_faculty###0.00671___reprehension###0.00671___text###0.00671___conflict###0.00671___spoken_communication###0.05369___difference###0.00671___reproval###0.00671___expressive_style###0.00671___utterance###0.00671___line###0.00671___voice_communication###0.05369___difference_of_opinion###0.00671___style###0.00671___auditory_communication###0.00671___nomenclature###0.05369___words###0.05369___vocalization###0.00671___dispute###0.00671___human_process###0.00671___module###0.00671___higher_cognitive_process###0.00671:how###1.00000:how does###1.00000:areas###0.045___languages###0.030___strong###0.025___rexx###0.025___argue###0.025___war###0.025___favorably###0.025___http!://language.perl.com/versus/###0.025___good_and###0.025___holy###0.025___unproductive###0.025___unfavorably###0.025___asking###0.022___hopefully###0.022___eolprobably###0.022___choice###0.020___personal###0.020___java###0.020___precisely###0.020___scheme###0.019___starting###0.019___compare###0.019___tcl###0.019___usenet###0.019___newsgroups###0.019___others###0.019___python###0.019___risk###0.019___comparison###0.018___documents###0.018___tasks###0.018___stop###0.018___eolsome###0.018___equivalent###0.016___eol###0.016___runs###0.016___learn###0.015___bad###0.014___yourself###0.014___thing###0.014___own###0.014___best###0.014___often###0.013___question###0.013___found###0.013___set###0.012___try###0.012___really###0.011___write###0.010___can't###0.010___code###0.009___perl###0.005___
9:10###0.15,1###0.12,11###0.12,8###0.11,58###0.10,57###0.10,253###0.10,7###0.09,42###0.09,55###0.09:Can I do [task] in Perl?  EOL EOL:Perl is flexible and extensible enough for you to use on virtually any task, from one-line file-processing tasks to large, elaborate systems. For many people, Perl serves as a great replacement for shell scripting. For others, it serves as a convenient, high-level replacement for most of what they'd program in low-level languages like C or C++. It's ultimately up to you (and possibly your management) which tasks you'll use Perl for and which you won't. EOL EOLIf you have a library that provides an API, you can make any component of it available as just another Perl function or variable using a Perl extension written in C or C++ and dynamically linked into your main perl interpreter. You can also go the other direction, and write your main program in C or C++, and then link in some Perl code on the fly, to create a powerful application. See perlembed. EOL EOLThat said, there will always be small, focused, special-purpose languages dedicated to a specific problem domain that are simply more convenient for certain kinds of problems. Perl tries to be all things to all people, but nothing special to anyone. Examples of specialized languages that come to mind include prolog and matlab. EOL EOL::::serves###0.029___replacement###0.029___perl###0.026___languages###0.026___task###0.022___tasks###0.021___convenient###0.021___main###0.019___people###0.016___file-processing###0.014___component###0.014___ultimately###0.014___matlab###0.014___direction###0.014___on_the_fly###0.014___one-line###0.014___come_to_mind###0.014___special-purpose###0.014___specialized###0.014___there_will###0.014___they'd###0.014___focused###0.014___management###0.012___great###0.012___extensible###0.012___high-level###0.012___prolog###0.012___elaborate###0.012___scripting###0.012___low-level###0.012___domain###0.012___anyone###0.012___virtually###0.012___flexible###0.012___dedicated###0.012___api###0.012___kinds###0.012___for_certain###0.012___up_to###0.011___linked###0.011___enough###0.011___tries###0.011___dynamically###0.011___others###0.011___powerful###0.011___perlembed###0.011___link###0.010___application###0.010___specific###0.010___program###0.010___possibly###0.010___eolthat###0.010___large###0.009___special###0.009___nothing###0.009___simply###0.009___interpreter###0.009___eol###0.009___extension###0.009___library###0.009___small###0.009___problems###0.008___and_then###0.008___examples###0.008___provides###0.008___shell###0.007___won't###0.007___include###0.007___always###0.007___create###0.007___problem###0.007___written###0.007___things###0.007___you'll###0.006___variable###0.006___systems###0.006___available###0.006___write###0.006___you_have###0.006___it's###0.005___function###0.005___code###0.005___using###0.004___eolif###0.004___
10:9###0.15,7###0.12,49###0.11,11###0.11,55###0.11,42###0.11,240###0.10,15###0.10,31###0.10,68###0.10:When shouldn't I program in Perl?  EOL EOL:When your manager forbids it--but do consider replacing them !:-). EOL EOLActually, one good reason is when you already have an existing application written in another language that's all done (and done well), or you have an application language specifically designed for a certain task (e.g. prolog, make). EOL EOLFor various reasons, Perl is probably not well-suited for real-time embedded systems, low-level operating systems development work like device drivers or context-switching code, complex multi-threaded shared-memory applications, or extremely large applications. You'll notice that perl is not itself written in Perl. EOL EOLThe new, native-code compiler for Perl may eventually reduce the limitations given in the previous statement to some degree, but understand that Perl remains fundamentally a dynamically typed language, not a statically typed one. You certainly won't be chastised if you don't trust nuclear-plant or brain-surgery monitoring code to it. And Larry will sleep easier, too--Wall Street programs not withstanding. !:-) EOL EOL:instruction###0.00990___arrangement###0.00990___show###0.00990___structure###0.00990___organisation###0.00990___platform###0.07921___message###0.00990___drawing###0.00990___information###0.00990___broadcast###0.07921___teaching###0.00990___document###0.00990___adp_system###0.00990___written_document###0.00990___papers###0.00990___curriculum###0.07921___course_of_study###0.07921___program###0.15842___system###0.00990___automatic_data_processing_system###0.00990___education###0.00990___thought###0.00990___computer_system###0.00990___adps###0.00990___educational_activity###0.00990___organization###0.00990___plan###0.07921___political_platform###0.07921___idea###0.00990___pedagogy###0.00990___construction###0.00990___syllabus###0.07921___shoe###0.00990___info###0.00990___horizontal_surface###0.00990___level###0.00990___computing_system###0.00990:when###1.00000:when shouldn't###1.00000:typed###0.029___language###0.025___application###0.021___applications###0.021___perl###0.018___done###0.016___written###0.014___nuclear-plant###0.014___brain-surgery###0.014___monitoring###0.014___remains###0.014___forbids###0.014___multi-threaded###0.014___context-switching###0.014___withstanding###0.014___limitations###0.014___wall_street###0.014___statically###0.014___chastised###0.014___degree###0.014___specifically###0.014___shared-memory###0.014___systems###0.013___drivers###0.013___fundamentally###0.013___eolactually###0.013___trust###0.013___well-suited###0.013___replacing###0.013___real-time###0.013___prolog###0.013___low-level###0.012___native-code###0.012___eventually###0.012___manager###0.011___reduce###0.011___task###0.011___to_it###0.011___understand###0.011___extremely###0.011___designed###0.011___dynamically###0.011___eol###0.011___sleep###0.011___device###0.011___notice###0.011___itself###0.011___reason###0.011___code###0.010___complex###0.010___operating###0.010___previous###0.010___certain###0.010___existing###0.010___various###0.010___e.g.###0.010___embedded###0.010___certainly###0.010___compiler###0.010___statement###0.009___large###0.009___easier###0.009___one###0.009___shouldn't###0.009___reasons###0.009___consider###0.009___larry###0.008___development###0.008___already###0.008___good###0.008___given###0.008___won't###0.007___that's###0.007___eolfor###0.007___is_not###0.007___programs###0.007___you'll###0.006___work###0.006___you_have###0.006___probably###0.006___eolthe###0.005___new###0.005___don't###0.005___may###0.005___program###0.005___
11:58###0.15,31###0.14,36###0.13,266###0.13,24###0.13,23###0.13,2###0.13,9###0.12,10###0.11,57###0.11:What's the difference between "perl" and "Perl"?  EOL EOL:One bit. Oh, you weren't talking ASCII? !:-) Larry now uses "Perl" to signify the language proper and "perl" the implementation of it, i.e. the current interpreter. Hence Tom's quip that "Nothing but perl can parse Perl." You may or may not choose to follow this usage. For example, parallelism means "awk and perl" and "Python and Perl" look OK, while "awk and Perl" and "Python and perl" do not. But never write "PERL", because perl isn't really an acronym, apocryphal folklore and post-facto expansions notwithstanding. EOL EOL:ambivalency###0.01000___feat###0.01000___component###0.01000___military_action###0.01000___remainder###0.08000___group_action###0.01000___piece_of_cloth###0.01000___disagreement###0.01000___number###0.01000___piece_of_material###0.01000___death###0.01000___turn###0.01000___state###0.01000___portion###0.01000___abnormality###0.01000___irregularity###0.01000___fluctuation###0.01000___oppositeness###0.01000___variation###0.01000___decease###0.01000___erroneousness###0.01000___interval###0.01000___statistic###0.01000___departure###0.08000___conflict###0.08000___difference###0.16000___deviation###0.08000___error###0.01000___series###0.01000___divergence###0.08000___opposition###0.01000___part###0.01000___resistance###0.01000___effort###0.01000___ambivalence###0.01000___turning###0.01000___component_part###0.01000___dispute###0.08000___incompatibility###0.01000___deed###0.01000___separation###0.01000___exploit###0.01000___action###0.01000:what###1.00000:what's the###1.00000:perl###0.069___python###0.044___awk###0.039___quip###0.028___post-facto###0.028___acronym###0.028___notwithstanding###0.028___folklore###0.028___hence###0.028___apocryphal###0.028___expansions###0.028___parallelism###0.028___signify###0.028___tom's###0.028___weren't###0.028___usage###0.025___look###0.025___talking###0.023___choose###0.023___implementation###0.023___parse###0.021___i.e.###0.020___follow###0.019___nothing###0.018___ascii###0.018___interpreter###0.018___do_not###0.018___proper###0.017___may_not###0.017___bit###0.017___larry###0.017___language###0.016___difference###0.016___uses###0.016___what's###0.016___means###0.015___current###0.014___isn't###0.013___really###0.013___for_example###0.012___eol###0.012___write###0.012___may###0.010___one###0.009___
12:256###0.15,53###0.14,55###0.13,64###0.11,48###0.11,7###0.11,284###0.10,57###0.10,54###0.09,49###0.09:Is it a Perl program or a Perl script?  EOL EOL:Larry doesn't really care. He says (half in jest) that "a script is what you give the actors. A program is what you give the audience." EOL EOLOriginally, a script was a canned sequence of normally interactive commands--that is, a chat script. Something like a UUCP or PPP chat script or an expect script fits the bill nicely, as do configuration scripts run by a program at its start up, such .cshrc or .ircrc, for example. Chat scripts were just drivers for existing programs, not stand-alone programs in their own right. EOL EOLA computer scientist will correctly explain that all programs are interpreted and that the only question is at what level. But if you ask this question of someone who isn't a computer scientist, they might tell you that a program has been compiled to physical machine code once and can then be run multiple times, whereas a script must be translated by a program each time it's used. EOL EOLPerl programs are (usually) neither strictly compiled nor strictly interpreted. They can be compiled to a byte-code form (something of a Perl virtual machine) or to completely different languages, like C or assembly language. You can't tell just by looking at it whether the source is destined for a pure interpreter, a parse-tree interpreter, a byte-code interpreter, or a native-code compiler, so it's hard to give a definitive answer here. EOL EOLNow that "script" and "scripting" are terms that have been seized by unscrupulous or unknowing marketeers for their own nefarious purposes, they have begun to take on strange and often pejorative meanings, like "non serious" or "not real programming". Consequently, some Perl programmers prefer to avoid them altogether. EOL EOL::::script###0.041___chat###0.028___byte-code###0.018___programs###0.018___interpreter###0.018___compiled###0.018___give###0.017___strictly###0.016___computer_scientist###0.016___program###0.016___interpreted###0.013___scripts###0.012___tell###0.012___question###0.010___unscrupulous###0.009___unknowing###0.009___jest###0.009___bill###0.009___cshrc###0.009___take_on###0.009___audience###0.009___start_up###0.009___destined###0.009___meanings###0.009___assembly_language###0.009___ircrc###0.009___canned###0.009___own_right###0.009___interactive###0.009___seized###0.009___eoloriginally###0.009___nefarious###0.009___run_by###0.009___machine_code###0.009___pure###0.009___marketeers###0.009___ppp###0.009___actors###0.009___pejorative###0.009___parse-tree###0.009___uucp###0.009___begun###0.008___fits###0.008___virtual###0.008___definitive###0.008___half###0.008___drivers###0.008___translated###0.008___stand-alone###0.008___sequence###0.008___terms###0.008___something###0.008___eol###0.008___explain###0.007___altogether###0.007___consequently###0.007___level###0.007___native-code###0.007___physical###0.007___purposes###0.007___scripting###0.007___configuration###0.007___completely###0.007___whereas###0.007___perl###0.007___they_have###0.007___ask###0.007___looking_at###0.007___non###0.007___strange###0.007___nicely###0.007___it's###0.007___machine###0.007___commands###0.007___multiple###0.006___existing###0.006___expect###0.006___someone###0.006___serious###0.006___compiler###0.006___programmers###0.006___normally###0.006___eolperl###0.006___says###0.006___neither###0.006___care###0.006___eolnow###0.006___correctly###0.006___prefer###0.006___hard###0.006___real###0.005___eola###0.005___programming###0.005___once###0.005___larry###0.005___languages###0.005___form###0.005___answer###0.005___avoid###0.005___usually###0.005___times###0.005___own###0.005___run###0.005___that_is###0.005___often###0.005___source###0.005___different###0.004___isn't###0.004___used###0.004___really###0.004___whether###0.004___for_example###0.004___time###0.003___can't###0.003___doesn't###0.003___
13:14###0.14,147###0.10,26###0.08,6###0.08,118###0.08,183###0.07,205###0.07,188###0.07,58###0.07,54###0.06:What is a JAPH?  EOL EOL:These are the "just another perl hacker" signatures that some people sign their postings with. Randal Schwartz made these famous. About 100 of the earlier ones are available from http!://www.perl.com/CPAN/misc/japh . EOL EOL::what###1.00000:what is###1.00000:japh###0.080___http!://www.perl.com/cpan/misc/japh###0.080___famous###0.080___sign###0.080___signatures###0.080___postings###0.071___schwartz###0.071___randal###0.071___hacker###0.071___made###0.066___earlier###0.058___ones###0.050___people###0.046___eol###0.035___available###0.035___perl###0.016___
14:13###0.14,183###0.10,5###0.10,26###0.09,101###0.09,22###0.09,205###0.09,28###0.08,165###0.08,131###0.08:Where can I get a list of Larry Wall witticisms?  EOL EOL:Over a hundred quips by Larry, from postings of his or source code, can be found at http!://www.perl.com/CPAN/misc/ lwall-quotes.txt.gz . EOL EOLNewer examples can be found by perusing Larry's postings!: EOL EOL    http!://x1.dejanews.com/dnquery.xp?QRY=*&DBS=2&ST=PS&defaultOp=AND&LNG=ALL&format=terse&showsort=date&maxhits=100&subjects=&groups=&authors=larry@*wall.org&fromdate=&todate=  EOL EOL:motion###0.01351___spatial_relation###0.01351___human_action###0.01351___pitch###0.01351___attitude###0.01351___list###0.21622___lean###0.10811___motility###0.01351___act###0.01351___battle###0.01351___mental_attitude###0.01351___position###0.01351___movement###0.01351___pitching###0.01351___struggle###0.01351___leaning###0.10811___tilt###0.10811___partiality###0.01351___human_activity###0.01351___conflict###0.01351___difference###0.01351___disposition###0.01351___difference_of_opinion###0.01351___tendency###0.01351___lurch###0.01351___liking###0.01351___dispute###0.01351___partisanship###0.01351___inclination###0.10811___move###0.01351___angle###0.01351:where###1.00000:where can###1.00000:postings###0.103___larry###0.071___found###0.060___a_hundred###0.058___txt###0.058___http!://x1.dejanews.com/dnquery.xp?qry=*&dbs=2&st=ps&defaultop=and&lng=all&format=terse&showsort=date&maxhits=100&subjects=&groups=&authors=larry@*wall.org&fromdate=&todate=###0.058___witticisms###0.058___http!://www.perl.com/cpan/misc/###0.058___larry's###0.058___lwall-quotes###0.058___perusing###0.058___quips###0.058___eolnewer###0.051___eol###0.044___wall###0.043___source_code###0.041___examples###0.033___list###0.026___
15:3###0.17,2###0.15,31###0.15,6###0.14,4###0.13,266###0.12,11###0.11,18###0.11,23###0.10,16###0.10:How can I convince my sysadmin/supervisor/employees to use version 5/5.005/Perl instead of some other language?  EOL EOL:If your manager or employees are wary of unsupported software, or software which doesn't officially ship with your operating system, you might try to appeal to their self-interest. If programmers can be more productive using and utilizing Perl constructs, functionality, simplicity, and power, then the typical manager/supervisor/employee may be persuaded. Regarding using Perl in general, it's also sometimes helpful to point out that delivery times may be reduced using Perl compared to other languages. EOL EOLIf you have a project which has a bottleneck, especially in terms of translation or testing, Perl almost certainly will provide a viable, quick solution. In conjunction with any persuasion effort, you should not fail to point out that Perl is used, quite extensively, and with extremely reliable and valuable results, at many large computer software and hardware companies throughout the world. In fact, many Unix vendors now ship Perl by default. Support is usually just a news-posting away, if you can't find the answer in the comprehensive documentation, including this FAQ. EOL EOLSee http!://www.perl.org/advocacy/ for more information. EOL EOLIf you face reluctance to upgrading from an older version of perl, then point out that version 4 is utterly unmaintained and unsupported by the Perl Development Team. Another big sell for Perl5 is the large number of modules and extensions which greatly reduce development time for any given task. Also mention that the difference between version 4 and version 5 of Perl is like the difference between awk and C++. (Well, OK, maybe it's not quite that distinct, but you get the idea.) If you want support and a reasonable guarantee that what you're developing will continue to work in the future, then you have to run the supported version. As of April 2001 that probably means running either of the releases 5.6.1 (released in April 2001) or 5.005_03 (released in March 1999), although 5.004_05 isn't that bad if you absolutely need such an old version (released in April 1999) for stability reasons. Anything older than 5.004_05 shouldn't be used. EOL EOLOf particular note is the massive bug hunt for buffer overflow problems that went into the 5.004 release. All releases prior to that, including perl4, are considered insecure and should be upgraded as soon as possible. EOL EOLIn August 2000 in all Linux distributions a new security problem was found in the optional 'suidperl' (not built or installed by default) in all the Perl branches 5.6, 5.005, and 5.004, see http!://www.cpan.org/src/5.0/sperl-2000-08-05/ EOL EOL:change_of_location###0.00662___rendering###0.05298___language###0.00662___alteration###0.00662___motion###0.00662___reading###0.05298___written_language###0.00662___dancing###0.00662___data_point###0.00662___urban_center###0.00662___transformation###0.00662___mental_representation###0.00662___activity###0.00662___thing###0.00662___interpretation###0.05298___saltation###0.00662___datum###0.00662___adaptation###0.05298___musical_theme###0.00662___drawing###0.00662___public_speaking###0.00662___metropolis###0.00662___written_account###0.00662___measuring###0.00662___organism###0.00662___written_record###0.00662___taxon###0.00662___speaking###0.00662___variable###0.00662___explanation###0.00662___perturbation###0.00662___mensuration###0.00662___linguistic_process###0.00662___variation###0.05298___movement###0.00662___travel###0.00662___paraphrasis###0.00662___performance###0.00662___speechmaking###0.00662___internal_representation###0.00662___account###0.00662___measurement###0.00662___departure###0.00662___difference###0.00662___city###0.00662___terpsichore###0.00662___deviation###0.00662___melodic_theme###0.00662___defrayal###0.00662___adjustment###0.00662___dance###0.00662___version###0.10596___modification###0.00662___paraphrase###0.00662___writing###0.00662___theme###0.00662___oral_presentation###0.00662___divergence###0.00662___piece_of_writing###0.00662___taxonomic_group###0.00662___idea###0.00662___variant###0.05298___measure###0.00662___being###0.00662___representation###0.00662___change###0.00662___type###0.00662___variable_quantity###0.00662___public_presentation###0.00662___written_material###0.00662___written_communication###0.00662___translation###0.05298___interlingual_rendition###0.05298___change_of_integrity###0.00662___organic_process###0.00662___defrayment###0.00662___payment###0.00662___angle###0.00662___move###0.00662___biological_process###0.00662:how###1.00000:how can###1.00000:version###0.022___april###0.019___point_out###0.019___released###0.017___perl###0.013___unsupported###0.012___ship###0.012___software###0.012___older###0.010___in_all###0.010___default###0.008___quite###0.008___releases###0.008___development###0.007___including###0.007___difference###0.007___support###0.007___using###0.006___officially###0.006___upgraded###0.006___unmaintained###0.006___utilizing###0.006___large_number###0.006___utterly###0.006___translation###0.006___valuable###0.006___throughout###0.006___vendors###0.006___hunt###0.006___sysadmin/supervisor/employees###0.006___http!://www.cpan.org/src/5.###0.006___wary###0.006___suidperl###0.006___stability###0.006___went###0.006___sell###0.006___companies###0.006___self-interest###0.006___reluctance###0.006___extensively###0.006___appeal###0.006___http!://www.perl.org/advocacy/###0.006___greatly###0.006___regarding###0.006___future###0.006___news-posting###0.006___convince###0.006___developing###0.006___face###0.006___employees###0.006___manager/supervisor/employee###0.006___branches###0.006___persuasion###0.006___massive###0.006___persuaded###0.006___overflow###0.006___eol###0.006___used###0.006___upgrading###0.005___typical###0.005___august###0.005___as_soon_as###0.005___testing###0.005___effort###0.005___constructs###0.005___simplicity###0.005___march###0.005___viable###0.005___in_terms_of###0.005___helpful###0.005___delivery###0.005___reduced###0.005___productive###0.005___absolutely###0.005___distinct###0.005___reasonable###0.005___you_have###0.005___continue###0.005___some_other###0.005___project###0.005___power###0.005___compared###0.005___comprehensive###0.005___computer###0.005___prior_to###0.005___fail###0.005___bottleneck###0.005___mention###0.005___optional###0.005___considered###0.005___should_not###0.005___insecure###0.005___buffer###0.005___extremely###0.005___hardware###0.005___eolof###0.005___distributions###0.005___in_conjunction_with###0.005___linux###0.005___manager###0.005___maybe###0.005___quick###0.005___reduce###0.005___reliable###0.005___work_in###0.005___world###0.005___task###0.005___it's###0.004___may###0.004___away###0.004___functionality###0.004___team###0.004___results###0.004___supported###0.004___perl4###0.004___guarantee###0.004___idea###0.004___extensions###0.004___certainly###0.004___programmers###0.004___built###0.004___awk###0.004___eolif###0.004___large###0.004___in_fact###0.004___especially###0.004___security###0.004___particular###0.004___almost###0.004___shouldn't###0.004___operating_system###0.004___reasons###0.004___although###0.004___perl5###0.004___installed###0.004___note###0.004___anything###0.004___problems###0.003___bug###0.003___running###0.003___provide###0.003___documentation###0.003___in_general###0.003___languages###0.003___possible###0.003___bad###0.003___language###0.003___answer###0.003___faq###0.003___eolsee###0.003___usually###0.003___sometimes###0.003___times###0.003___given###0.003___means###0.003___run###0.003___solution###0.003___instead_of###0.003___release###0.003___eolin###0.003___unix###0.003___found###0.003___problem###0.003___either###0.003___information###0.003___find###0.003___try###0.003___isn't###0.003___modules###0.002___probably###0.002___time###0.002___need###0.002___can't###0.002___new###0.002___doesn't###0.002___you're###0.002___
16:3###0.15,2###0.14,31###0.12,57###0.12,6###0.12,42###0.11,15###0.10,17###0.10,36###0.10,21###0.09:What machines support Perl? Where do I get it?  EOL EOL:The standard release of Perl (the one maintained by the perl development team) is distributed only in source code form. You can find this at http!://www.cpan.org/src/latest.tar.gz , which is in a standard Internet format (a gzipped archive in POSIX tar format). EOL EOLPerl builds and runs on a bewildering number of platforms. Virtually all known and current Unix derivatives are supported (Perl's native platform), as are other systems like VMS, DOS, OS/2, Windows, QNX, BeOS, OS X, MPE/iX and the Amiga. EOL EOLBinary distributions for some proprietary platforms, including Apple systems, can be found http!://www.cpan.org/ports/ directory. Because these are not part of the standard distribution, they may and in fact do differ from the base Perl port in a variety of ways. You'll have to check their respective release notes to see just what the differences are. These differences can be either positive (e.g. extensions for the features of the particular platform that are not supported in the source release of perl) or negative (e.g. might be based upon a less current source release of perl). EOL EOL:machines###0.18391___organisation###0.01149___compartment###0.01149___device###0.01149___human###0.01149___car###0.09195___automotive_vehicle###0.01149___motor_vehicle###0.01149___simple_machine###0.09195___machine###0.09195___individual###0.01149___political_machine###0.09195___organization###0.01149___person###0.01149___mortal###0.01149___mechanical_device###0.01149___auto###0.09195___automobile###0.09195___wheeled_vehicle###0.01149___motorcar###0.09195___somebody###0.01149___someone###0.01149___soul###0.01149:what###0.50000___where###0.50000:where do###0.50000___what machines###0.50000:release###0.031___differences###0.029___platform###0.026___supported###0.021___e.g.###0.021___platforms###0.021___are_not###0.019___standard###0.018___perl###0.018___format###0.017___source###0.015___current###0.015___gzipped###0.014___qnx###0.014___respective###0.014___http!://www.cpan.org/src/latest.tar.gz###0.014___mpe/ix###0.014___eolbinary###0.014___builds###0.014___bewildering###0.014___notes###0.014___amiga###0.014___derivatives###0.014___apple###0.014___systems###0.013___http!://www.cpan.org/ports/###0.013___known###0.013___beos###0.013___tar###0.013___variety###0.013___differ###0.012___archive###0.012___native###0.012___os/2###0.012___base###0.012___maintained###0.012___upon###0.012___get_it###0.012___virtually###0.012___vms###0.012___machines###0.011___positive###0.011___internet###0.011___features###0.011___distributions###0.011___negative###0.011___based###0.011___dos###0.011___team###0.011___extensions###0.010___source_code###0.010___proprietary###0.010___eolperl###0.010___port###0.009___in_fact###0.009___windows###0.009___particular###0.009___distributed###0.009___eol###0.009___runs###0.009___less###0.008___development###0.008___ways###0.008___form###0.008___including###0.008___directory###0.008___posix###0.008___support###0.008___unix###0.007___check###0.007___perl's###0.007___found###0.007___either###0.007___find###0.007___you'll###0.006___number###0.006___part###0.006___distribution###0.006___may###0.005___one###0.004___
17:18###0.27,57###0.16,266###0.12,278###0.12,42###0.12,275###0.11,31###0.11,32###0.10,133###0.10,16###0.10:How can I get a binary version of Perl?  EOL EOL:If you don't have a C compiler because your vendor for whatever reasons did not include one with your system, the best thing to do is grab a binary version of gcc from the net and use that to compile perl with. CPAN only has binaries for systems that are terribly hard to get free compilers for, not for Unix systems. EOL EOLSome URLs that might help you are!: EOL EOL    http!://www.cpan.org/ports/ EOL    http!://language.perl.com/info/software.html  EOL EOLSomeone looking for a Perl for Win16 might look to Laszlo Molnar's djgpp port in http!://www.cpan.org/ports/#msdos , which comes with clear installation instructions. A simple installation guide for MS-DOS using Ilya Zakharevich's OS/2 port is available at http!://www.cs.ruu.nl/%7Epiet/perl5dos.html and similarly for Windows 3.1 at http!:// www.cs.ruu.nl/%7Epiet/perlwin3.html . EOL EOL:change_of_location###0.00568___rendering###0.04545___language###0.00568___alteration###0.00568___motion###0.00568___reading###0.04545___written_language###0.00568___dancing###0.00568___data_point###0.00568___urban_center###0.00568___transformation###0.00568___mental_representation###0.00568___activity###0.00568___thing###0.00568___interpretation###0.04545___saltation###0.00568___datum###0.00568___adaptation###0.04545___musical_theme###0.00568___drawing###0.00568___public_speaking###0.00568___metropolis###0.00568___written_account###0.00568___measuring###0.00568___organism###0.00568___written_record###0.00568___taxon###0.00568___speaking###0.00568___variable###0.00568___explanation###0.00568___perturbation###0.00568___mensuration###0.00568___linguistic_process###0.00568___variation###0.04545___movement###0.00568___travel###0.00568___paraphrasis###0.00568___binary###0.09091___performance###0.00568___speechmaking###0.00568___star###0.00568___internal_representation###0.00568___account###0.00568___measurement###0.00568___departure###0.00568___difference###0.00568___city###0.00568___terpsichore###0.00568___deviation###0.00568___melodic_theme###0.00568___defrayal###0.00568___adjustment###0.00568___double_star###0.04545___dance###0.00568___version###0.09091___modification###0.00568___paraphrase###0.00568___writing###0.00568___theme###0.00568___oral_presentation###0.00568___divergence###0.00568___piece_of_writing###0.00568___taxonomic_group###0.00568___idea###0.00568___variant###0.04545___measure###0.00568___being###0.00568___representation###0.00568___change###0.00568___type###0.00568___variable_quantity###0.00568___public_presentation###0.00568___written_material###0.00568___written_communication###0.00568___translation###0.04545___interlingual_rendition###0.04545___change_of_integrity###0.00568___organic_process###0.00568___defrayment###0.00568___payment###0.00568___angle###0.00568___move###0.00568___biological_process###0.00568:how###1.00000:how can###1.00000:installation###0.037___port###0.028___binary###0.025___look_to###0.021___compilers###0.021___laszlo###0.021___djgpp###0.021___zakharevich's###0.021___www.cs.ruu.nl###0.021___win16###0.021___binaries###0.021___eolsomeone###0.021___terribly###0.021___http!://language.perl.com/info/software.html###0.021___http!://www.cs.ruu.nl/%7epiet/perl5dos.html###0.021___ilya###0.021___instructions###0.021___http!://www.cpan.org/ports/#msdos###0.021___molnar's###0.021___version###0.020___eol###0.020___systems###0.018___guide###0.018___http!://www.cpan.org/ports/###0.018___did_not###0.018___similarly###0.018___vendor###0.018___os/2###0.017___gcc###0.017___c_compiler###0.017___urls###0.015___grab###0.015___ms-dos###0.015___clear###0.015___eolsome###0.015___looking_for###0.014___windows###0.014___free###0.014___net###0.013___reasons###0.013___hard###0.013___whatever###0.013___perl###0.012___comes###0.012___compile###0.012___http!://###0.012___thing###0.012___html###0.012___help###0.011___best###0.011___you_are###0.011___unix###0.011___include###0.011___simple###0.010___available###0.009___system###0.008___don't###0.008___using###0.007___cpan###0.007___one###0.006___
18:17###0.27,224###0.16,266###0.12,19###0.12,133###0.11,15###0.11,205###0.10,247###0.10,282###0.10,180###0.09:I don't have a C compiler on my system. How can I compile perl?  EOL EOL:Since you don't have a C compiler, you're doomed and your vendor should be sacrificed to the Sun gods. But that doesn't help you. EOL EOLWhat you need to do is get a binary version of gcc for your system first. Consult the Usenet FAQs for your operating system for information on where to get such a binary version. EOL EOL::how###1.00000:how can###1.00000:c_compiler###0.087___binary###0.063___sun###0.053___sacrificed###0.053___version###0.052___gods###0.047___vendor###0.047___doomed###0.047___eolwhat###0.047___faqs###0.043___gcc###0.043___system###0.042___consult###0.041___usenet###0.041___don't###0.040___operating_system###0.033___compile###0.032___help###0.029___eol###0.028___information###0.026___first###0.023___need###0.021___doesn't###0.020___you're###0.019___perl###0.010___
19:268###0.15,58###0.12,18###0.12,266###0.11,276###0.11,183###0.11,101###0.10,100###0.10,140###0.10,35###0.10:I copied the Perl binary from one machine to another, but scripts don't work.  EOL EOL:That's probably because you forgot libraries, or library paths differ. You really should build the whole distribution on the machine it will eventually live on, and then type make install. Most other approaches are doomed to failure. EOL EOLOne simple way to check that things are in the right place is to print out the hard-coded @INC that perl looks through for libraries!: EOL EOL    % perl -e 'print join("\n",@INC)'  EOL EOLIf this command lists any paths that don't exist on your system, then you may need to move the appropriate libraries to these locations, or create symbolic links, aliases, or shortcuts appropriately. @INC is also printed as part of the output of EOL EOL    % perl -V  EOL EOLYou might also want to check out perlfaq8/"How do I keep my own module/library directory?". EOL EOL::::libraries###0.052___inc###0.046___paths###0.030___machine###0.029___eol###0.023___links###0.019___live_on###0.019___hard-coded###0.019___locations###0.019___perlfaq8###0.019___shortcuts###0.019___doomed###0.017___move###0.017___aliases###0.017___forgot###0.017___differ###0.016___approaches###0.016___exist###0.016___eolone###0.016___eventually###0.016___module/library###0.016___perl###0.016___failure###0.015___join###0.015___copied###0.015___don't###0.015___appropriate###0.014___appropriately###0.014___printed###0.014___looks###0.014___print###0.014___build###0.014___symbolic###0.014___keep###0.013___lists###0.013___scripts###0.013___it_will###0.012___whole###0.012___library###0.012___check_out###0.012___type###0.012___install###0.012___place###0.011___binary###0.011___and_then###0.011___directory###0.011___command###0.011___right###0.011___own###0.010___output###0.010___that's###0.010___create###0.010___check###0.010___eolyou###0.010___simple###0.009___things###0.009___really###0.009___part###0.009___work###0.008___distribution###0.008___probably###0.008___need###0.008___system###0.007___may###0.007___eolif###0.006___one###0.006___
20:252###0.13,266###0.12,244###0.10,141###0.10,163###0.09,37###0.08,57###0.08,1###0.08,157###0.08,177###0.08:I grabbed the sources and tried to compile but gdbm/dynamic loading/ malloc/linking/... failed. How do I make it work?  EOL EOL:Read the INSTALL file, which is part of the source distribution. It describes in detail how to cope with most idiosyncrasies that the Configure script can't work around for any given system or architecture. EOL EOL:reflection###0.01299___activity###0.01299___learning###0.01299___knowledge_base###0.01299___memorizer###0.01299___occupation###0.01299___knowledge_domain###0.01299___business###0.01299___immersion###0.01299___thoughtfulness###0.01299___drawing###0.01299___work###0.20779___job###0.01299___information###0.01299___composition###0.01299___state###0.01299___contemplation###0.01299___absorption###0.01299___end_product###0.01299___musing###0.01299___reflexion###0.01299___scrutiny###0.01299___piece###0.01299___acquisition###0.01299___oeuvre###0.10390___piece_of_music###0.01299___opus###0.01299___line###0.01299___musical_composition###0.01299___study###0.10390___memoriser###0.01299___engrossment###0.01299___employment###0.10390___rumination###0.01299___examination###0.01299___line_of_work###0.01299___room###0.01299___concentration###0.01299___info###0.01299___output###0.01299___action###0.01299:how###1.00000:how do###1.00000:in_detail###0.050___configure###0.050___grabbed###0.050___cope_with###0.050___architecture###0.050___gdbm/dynamic###0.050___malloc/linking###0.050___work###0.045___idiosyncrasies###0.045___describes###0.041___tried###0.039___failed###0.037___sources###0.037___loading###0.037___around###0.035___make_it###0.035___install###0.030___compile###0.030___given###0.028___script###0.027___source###0.027___part###0.023___eol###0.021___distribution###0.021___read###0.020___can't###0.020___system###0.020___file###0.018___
21:263###0.19,28###0.14,71###0.13,172###0.12,60###0.12,266###0.12,295###0.10,255###0.10,151###0.10,16###0.09:What modules and extensions are available for Perl? What is CPAN? What does CPAN/src/... mean?  EOL EOL:CPAN stands for Comprehensive Perl Archive Network, a ~700mb archive replicated on nearly 200 machines all over the world. CPAN contains source code, non-native ports, documentation, scripts, and many third-party modules and extensions, designed for everything from commercial database interfaces to keyboard/screen control to web walking and CGI scripts. The master web site for CPAN is http!://www.cpan.org/ and there is the CPAN Multiplexer at http!:// www.perl.com/CPAN/CPAN.html which will choose a mirror near you via DNS. See http!://www.perl.com/CPAN (without a slash at the end) for how this process works. Also, http!://mirror.cpan.org/ has a nice interface to the http!:// www.cpan.org/MIRRORED.BY mirror directory. EOL EOLSee the CPAN FAQ at http!://www.cpan.org/misc/cpan-faq.html for answers to the most frequently asked questions about CPAN including how to become a mirror. EOL EOLCPAN/path/... is a naming convention for files available on CPAN sites. CPAN indicates the base directory of a CPAN mirror, and the rest of the path is the path from that directory to the file. For instance, if you're using ftp!://ftp.funet.fi/pub/ languages/perl/CPAN as your CPAN site, the file CPAN/misc/japh is downloadable as ftp!://ftp.funet.fi/pub/languages/ perl/CPAN/misc/japh . EOL EOLConsidering that there are close to two thousand existing modules in the archive, one probably exists to do nearly anything you can think of. Current categories under CPAN/modules/by-category/ include Perl core modules; development support; operating system interfaces; networking, devices, and interprocess communication; data type utilities; database interfaces; user interfaces; interfaces to other languages; filenames, file systems, and file locking; internationalization and locale; world wide web support; server and daemon utilities; archiving and compression; image manipulation; mail and news; control flow utilities; filehandle and I/O; Microsoft Windows modules; and miscellaneous modules. EOL EOLSee http!://www.cpan.org/modules/00modlist.long.html or http!://search.cpan.org/ for a more complete list of modules by category. EOL EOL:procreation###0.00424___instruction###0.00424___extension_phone###0.03390___recommendation###0.00424___serving###0.00424___component###0.00424___prolongation###0.03390___wait###0.00424___modules###0.06780___spreading###0.00424___addition###0.00424___expansion###0.00424___surface###0.00424___compartment###0.00424___change_of_shape###0.00424___propagation###0.03390___naming###0.00424___power###0.00424___extensions###0.06780___good_word###0.00424___barrier###0.00424___publication###0.00424___computer_circuit###0.00424___helping###0.00424___time_lag###0.00424___stretching###0.00424___book###0.00424___constituent###0.00424___air_unit###0.00424___breeding###0.00424___substance###0.00424___faculty###0.03390___teaching###0.00424___reproduction###0.00424___reference###0.03390___length###0.00424___portion###0.00424___formation###0.00424___annotation###0.00424___duration###0.00424___control_surface###0.00424___aerofoil###0.00424___remark###0.00424___body###0.00424___extension_service###0.03390___wing###0.03390___postponement###0.00424___telephone###0.00424___education###0.00424___element###0.00424___extension###0.03390___phone###0.00424___mental_faculty###0.03390___indicator###0.00424___airfoil###0.00424___improver###0.00424___educational_activity###0.00424___hold###0.00424___testimonial###0.00424___annex###0.03390___public_exposure###0.00424___lengthiness###0.03390___comment###0.00424___telephone_extension###0.03390___dissemination###0.00424___denotation###0.03390___ability###0.00424___organ###0.00424___notation###0.00424___pedagogy###0.00424___meaning###0.00424___airing###0.00424___continuance###0.00424___enlargement###0.00424___university_extension###0.03390___physical_phenomenon###0.00424___facts_of_life###0.00424___stage###0.00424___continuation###0.00424___delay###0.00424___module###0.03390___telephone_set###0.00424___longness###0.00424___annexe###0.03390___action###0.00424___note###0.00424___elongation###0.03390:what###1.00000:what does###0.33333___what is###0.33333___what modules###0.33333:interfaces###0.034___cpan###0.028___mirror###0.027___modules###0.024___archive###0.019___utilities###0.019___directory###0.013___nearly###0.011___database###0.011___extensions###0.011___file###0.011___path###0.010___scripts###0.010___control###0.009___http!://###0.009___eolsee###0.008___support###0.008___downloadable###0.007___internationalization###0.007___categories###0.007___category###0.007___eolcpan/path###0.007___stands###0.007___compression###0.007___http!://search.cpan.org/###0.007___third-party###0.007___http!://mirror.cpan.org/###0.007___image###0.007___walking###0.007___www.cpan.org/mirrored.by###0.007___indicates###0.007___interprocess###0.007___http!://www.perl.com/cpan###0.007___keyboard/screen###0.007___flow###0.007___http!://www.cpan.org/misc/cpan-faq.html###0.007___http!://www.cpan.org/modules/00modlist.long.html###0.007___archiving###0.007___ftp!://ftp.funet.fi/pub/###0.007___cpan/modules/by-category###0.007___all_over###0.007___cpan/misc/japh###0.007___eolconsidering###0.007___cpan/src###0.007___ftp!://ftp.funet.fi/pub/languages/###0.007___close_to###0.007___languages/perl/cpan###0.007___miscellaneous###0.007___multiplexer###0.007___naming###0.007___non-native###0.007___perl/cpan/misc/japh###0.007___replicated###0.007___slash###0.007___convention###0.006___master###0.006___manipulation###0.006___asked###0.006___world_wide_web###0.006___near###0.006___http!://www.cpan.org/###0.006___communication###0.006___eol###0.006___available###0.006___choose###0.006___thousand###0.006___base###0.006___comprehensive###0.006___web_site###0.006___network###0.006___become###0.006___dns###0.006___sites###0.006___news###0.006___site###0.006___for_instance###0.006___filenames###0.006___networking###0.006___machines###0.006___i/o###0.006___world###0.006___frequently###0.006___answers###0.006___microsoft###0.006___designed###0.006___locking###0.005___daemon###0.005___devices###0.005___think_of###0.005___ports###0.005___core###0.005___nice###0.005___commercial###0.005___locale###0.005___rest###0.005___exists###0.005___source_code###0.005___existing###0.005___everything###0.005___questions###0.005___interface###0.005___server###0.005___windows###0.005___www.perl.com###0.005___operating_system###0.004___anything###0.004___mail###0.004___perl###0.004___type###0.004___user###0.004___complete###0.004___web###0.004___documentation###0.004___languages###0.004___development###0.004___including###0.004___mean###0.004___faq###0.004___html###0.004___cgi###0.004___process###0.004___filehandle###0.004___works###0.004___contains###0.004___include###0.004___current###0.004___without###0.003___data###0.003___files###0.003___two###0.003___list###0.003___systems###0.003___probably###0.003___you're###0.002___using###0.002___one###0.002___
22:266###0.09,205###0.09,15###0.09,11###0.09,58###0.09,14###0.09,101###0.08,183###0.08,31###0.08,10###0.07:Is there an ISO or ANSI certified version of Perl?  EOL EOL:Certainly not. Larry expects that he'll be certified before Perl is. EOL EOL::::certified###0.242___he'll###0.121___iso###0.108___expects###0.108___ansi###0.100___certainly###0.084___larry###0.074___version###0.059___eol###0.052___perl###0.049___
23:58###0.16,282###0.15,32###0.15,29###0.15,274###0.14,278###0.13,11###0.13,35###0.13,2###0.12,171###0.11:Where can I get information on Perl?  EOL EOL:The complete Perl documentation is available with the Perl distribution. If you have Perl installed locally, you probably have the documentation installed as well!: type man perl if you're on a system resembling Unix. This will lead you to other important man pages, including how to set your $MANPATH. If you're not on a Unix system, access to the documentation will be different; for example, documentation might only be in HTML format. All proper Perl installations have fully-accessible documentation. EOL EOLYou might also try perldoc perl in case your system doesn't have a proper man command, or it's been misinstalled. If that doesn't work, try looking in /usr/local/lib/perl5/pod for documentation. EOL EOLIf all else fails, consult http!://perldoc.cpan.org/ or http!://www.perldoc.com/ both offer the complete documentation in html format. EOL EOLMany good books have been written about Perl--see the section below for more details. EOL EOLTutorial documents are included in current or upcoming Perl releases include perltoot for objects or perlboot for a beginner's approach to objects, perlopentut for file opening semantics, perlreftut for managing references, perlretut for regular expressions, perlthrtut for threads, perldebtut for debugging, and perlxstut for linking C and Perl together. There may be more by the time you read this. The following URLs might also be of assistance!: EOL EOL    http!://perldoc.cpan.org/ EOL    http!://www.perldoc.com/ EOL    http!://reference.perl.com/query.cgi?tutorials EOL    http!://bookmarks.cpan.org/search.cgi?cat=Training%2FTutorials  EOL EOL:message###0.02000___collection###0.02000___entropy###0.16000___information###0.32000___assemblage###0.02000___substance###0.02000___accumulation###0.02000___information_measure###0.02000___data###0.16000___aggregation###0.02000___subject_matter###0.02000___physical_phenomenon###0.02000___info###0.16000___content###0.02000:where###1.00000:where can###1.00000:documentation###0.052___man###0.027___perl###0.025___http!://perldoc.cpan.org/###0.024___http!://www.perldoc.com/###0.024___objects###0.018___eol###0.017___installed###0.015___proper###0.015___complete###0.014___format###0.014___html###0.014___resembling###0.012___http!://bookmarks.cpan.org/search.cgi?cat=training%2ftutorials###0.012___perlthrtut###0.012___perlretut###0.012___perldoc###0.012___perldebtut###0.012___in_case###0.012___locally###0.012___misinstalled###0.012___beginner's###0.012___threads###0.012___fully-accessible###0.012___eoltutorial###0.012___looking###0.012___lead###0.012___http!://reference.perl.com/query.cgi?tutorials###0.012___installations###0.012___usr/local/lib/perl5/pod###0.012___try###0.012___perlreftut###0.011___perlboot###0.011___manpath###0.011___assistance###0.011___upcoming###0.011___managing###0.011___eolmany###0.010___debugging###0.010___unix_system###0.010___pages###0.010___offer###0.010___system###0.009___books###0.009___together###0.009___consult###0.009___doesn't###0.009___opening###0.009___perlopentut###0.009___included###0.009___important###0.009___documents###0.009___urls###0.009___linking###0.009___you're###0.009___semantics###0.008___perlxstut###0.008___fails###0.008___below###0.008___as_well###0.008___perltoot###0.008___releases###0.007___type###0.007___references###0.007___section###0.007___including###0.007___access###0.007___command###0.007___expressions###0.007___good###0.007___unix###0.006___include###0.006___current###0.006___eolyou###0.006___approach###0.006___different###0.006___set###0.006___written###0.006___information###0.006___following###0.006___details###0.006___regular###0.006___work###0.005___for_example###0.005___available###0.005___distribution###0.005___you_have###0.005___time###0.005___read###0.005___probably###0.005___it's###0.004___may###0.004___file###0.004___eolif###0.004___
24:272###0.27,60###0.19,31###0.18,25###0.15,2###0.15,58###0.13,294###0.13,11###0.13,30###0.12,259###0.12:What are the Perl newsgroups on Usenet? Where do I post questions?   EOL EOL:The now defunct comp.lang.perl newsgroup has been superseded by the following groups!: EOL EOL    comp.lang.perl.announce Moderated announcement group EOL    comp.lang.perl.misc     Very busy group about Perl in general EOL    comp.lang.perl.moderated            Moderated discussion group EOL    comp.lang.perl.modules  Use and development of Perl modules EOL    comp.lang.perl.tk           Using Tk (and X) from Perl EOL EOL    comp.infosystems.www.authoring.cgi Writing CGI scripts for the Web.  EOL EOLThere is also Usenet gateway to the mailing list used by the crack Perl development team (perl5-porters) at news!:// news.perl.com/perl.porters-gw/ . EOL EOL::what###0.50000___where###0.50000:where do###0.50000___what are###0.50000:comp.lang.###0.082___moderated###0.068___group###0.049___perl###0.047___usenet###0.035___eol###0.032___development###0.027___cgi###0.026___announcement###0.022___defunct###0.022___gateway###0.022___busy###0.022___discussion###0.022___perl5-porters###0.022___comp.lang.perl.tk###0.022___news.perl.com###0.022___superseded###0.022___announce###0.022___crack###0.020___authoring###0.020___mailing_list###0.020___porters-gw###0.020___infosystems###0.020___modules###0.020___news###0.019___comp.###0.017___newsgroup###0.017___newsgroups###0.017___groups###0.017___www###0.017___misc###0.017___team###0.017___post###0.016___scripts###0.015___questions###0.015___eolthere###0.015___writing###0.013___in_general###0.013___web###0.013___following###0.011___used###0.010___using###0.007___
25:24###0.15,279###0.12,32###0.12,165###0.10,285###0.10,272###0.10,274###0.10,286###0.09,60###0.09,31###0.09:Where should I post source code?  EOL EOL:You should post source code to whichever group is most appropriate, but feel free to cross-post to comp.lang.perl.misc. If you want to cross-post to alt.sources, please make sure it follows their posting standards, including setting the Followup-To header line to NOT include alt.sources; see their FAQ (http!://www.faqs.org/faqs/alt-sources-intro/) for details. EOL EOLIf you're just looking for software, first use Google (http!://www.google.com), Deja (http!://www.deja.com), and CPAN Search (http!://search.cpan.org). This is faster and more productive than just posting a request. EOL EOL:filiation###0.00274___geographic_region###0.00274___point_in_time###0.00274___verbaliser###0.00274___blemish###0.00274___systematisation###0.00274___humor###0.00274___noesis###0.00274___immobility###0.00274___written_language###0.00274___recommendation###0.00274___happening###0.00274___structure###0.00274___communication###0.00274___station###0.02192___participant###0.00274___ancestry###0.00274___occupation###0.00274___business###0.00274___collection###0.00274___section###0.00274___perceiver###0.00274___origin###0.02192___transport###0.00274___item###0.00274___job###0.00274___locality###0.00274___microorganism###0.00274___bodily_fluid###0.00274___lamp###0.00274___book###0.00274___word_form###0.00274___utterer###0.00274___business_establishment###0.00274___accumulation###0.00274___state###0.00274___area###0.00274___reference###0.02192___portion###0.00274___relative###0.00274___annotation###0.00274___setup###0.00274___beginning###0.02192___position###0.00274___playing_card###0.00274___vicinity###0.00274___remark###0.00274___natural_event###0.00274___anchorage###0.00274___inspiration###0.00274___occurrence###0.00274___genealogy###0.00274___systematization###0.00274___indicator###0.00274___place_of_business###0.00274___characteristic###0.00274___ovule###0.00274___relation###0.00274___observer###0.00274___signifier###0.00274___knowledge###0.00274___staff###0.00274___stationariness###0.00274___testimonial###0.00274___line###0.00274___comment###0.00274___talker###0.00274___set###0.00274___attack###0.00274___coat_of_mail###0.00274___mail###0.02192___plant_organ###0.00274___conveyance###0.00274___derivation###0.00274___codification###0.02192___complex_body_part###0.00274___communicator###0.00274___geographic_area###0.00274___humour###0.00274___line_of_work###0.00274___aggregation###0.00274___public_square###0.00274___generator###0.02192___lineage###0.00274___code###0.04384___expanse###0.00274___root###0.02192___mistake###0.00274___post###0.04384___fixedness###0.00274___speaker###0.00274___instrument_of_execution###0.00274___square###0.00274___fruit###0.00274___percentage###0.00274___action###0.00274___residence###0.00274___rootage###0.02192___installation###0.00274___source###0.04384___mail_service###0.02192___office###0.02192___germ###0.02192___anchorage_ground###0.00274___condition###0.00274___message###0.00274___mark###0.00274___apparatus###0.00274___surface_area###0.00274___spot###0.02192___marking###0.00274___subdivision###0.00274___beholder###0.00274___good_word###0.00274___form###0.00274___rationalisation###0.00274___publication###0.00274___small_indefinite_amount###0.00274___number###0.00274___marker###0.00274___visual_signal###0.00274___substance###0.00274___assemblage###0.00274___neighbourhood###0.00274___neighborhood###0.00274___berth###0.02192___verbalizer###0.00274___function###0.00274___player###0.00274___cataphract###0.00274___share###0.00274___bed###0.00274___rite###0.00274___duty###0.00274___electronic_device###0.00274___administrative_unit###0.00274___system###0.00274___liquid_body_substance###0.00274___informant###0.02192___social_status###0.00274___family_tree###0.00274___body_fluid###0.00274___status###0.00274___body_armor###0.00274___geographical_area###0.00274___body_armour###0.00274___change_of_state###0.00274___suit_of_armour###0.00274___abode###0.00274___error###0.00274___gamble###0.00274___space###0.00274___fault###0.00274___shaper###0.00274___division###0.00274___rank###0.00274___suit_of_armor###0.00274___geographical_region###0.00274___defect###0.00274___notation###0.00274___communicating###0.00274___point###0.00274___part###0.00274___social_station###0.00274___meaning###0.00274___social_rank###0.00274___bodily_structure###0.00274___passage###0.00274___rationalization###0.00274___engine###0.00274___maker###0.00274___written_communication###0.00274___administrative_body###0.00274___anatomical_structure###0.00274___body_structure###0.00274___seed###0.02192___situation###0.00274___cognition###0.00274___small_indefinite_quantity###0.00274___author###0.02192___intersection###0.00274___facility###0.00274___stake###0.02192___religious_rite###0.00274___place###0.02192___note###0.00274___role###0.00274:where###1.00000:where should###1.00000:cross-post###0.056___posting###0.050___alt###0.046___sources###0.041___post###0.040___source_code###0.040___http!://www.google.com),###0.028___http!://search.cpan.org).###0.028___followup-to###0.028___google###0.028___http!://www.faqs.org/faqs/alt-sources-intro/)###0.028___http!://www.deja.com),###0.028___standards###0.028___feel###0.025___productive###0.025___deja###0.023___follows###0.021___setting###0.021___whichever###0.021___appropriate###0.020___misc###0.020___request###0.020___header###0.020___group###0.020___comp.lang.###0.020___looking_for###0.019___search###0.019___free###0.018___please###0.018___software###0.018___make_sure###0.017___faster###0.016___including###0.016___faq###0.016___eol###0.015___include###0.014___details###0.013___line###0.012___first###0.012___you're###0.010___eolif###0.009___cpan###0.009___perl###0.005___
26:60###0.11,183###0.11,58###0.11,210###0.10,31###0.10,90###0.10,7###0.10,14###0.09,205###0.09,165###0.09:Perl Books  EOL EOL:A number of books on Perl and/or CGI programming are available. A few of these are good, some are OK, but many aren't worth your money. Tom Christiansen maintains a list of these books, some with extensive reviews, at http!:// www.perl.com/perl/critiques/index.html . EOL EOLThe incontestably definitive reference book on Perl, written by the creator of Perl, is now (July 2000) in its third edition!: EOL EOL    Programming Perl (the "Camel Book")!: EOLby Larry Wall, Tom Christiansen, and Jon Orwant EOL        0-596-00027-8  [3rd edition July 2000] EOLhttp!://www.oreilly.com/catalog/pperl3/ EOL    (English, translations to several languages are also available)  EOL EOLThe companion volume to the Camel containing thousands of real-world examples, mini-tutorials, and complete programs is!: EOL EOL    The Perl Cookbook (the "Ram Book")!: EOLby Tom Christiansen and Nathan Torkington, EOL    with Foreword by Larry Wall EOLISBN 1-56592-243-3 [1st Edition August 1998] EOLhttp!://perl.oreilly.com/cookbook/  EOL EOLIf you're already a hard-core systems programmer, then the Camel Book might suffice for you to learn Perl from. If you're not, check out EOL EOL    Learning Perl (the "Llama Book")!: EOLby Randal Schwartz and Tom Christiansen EOL    with Foreword by Larry Wall EOLISBN 1-56592-284-0 [2nd Edition July 1997] EOLhttp!://www.oreilly.com/catalog/lperl2/  EOL EOLDespite the picture at the URL above, the second edition of "Llama Book" really has a blue cover and was updated for the 5.004 release of Perl. Various foreign language editions are available, including Learning Perl on Win32 Systems (the "Gecko Book"). EOL EOLIf you're not an accidental programmer, but a more serious and possibly even degreed computer scientist who doesn't need as much hand-holding as we try to provide in the Llama or its defurred cousin the Gecko, please check out the delightful book, Perl!: The Programmer's Companion, written by Nigel Chapman. EOL EOLAddison-Wesley (http!://www.awlonline.com/) and Manning (http!://www.manning.com/) are also publishers of some fine Perl books such as Object Oriented Programming with Perl by Damian Conway and Network Programming with Perl by Lincoln Stein. EOL EOLAn excellent technical book discounter is Bookpool at http!://www.bookpool.com/ where a 30% discount or more is not unusual. EOL EOLWhat follows is a list of the books that the FAQ authors found personally useful. Your mileage may (but, we hope, probably won't) vary. EOL EOLRecommended books on (or mostly on) Perl follow. EOL EOLReferences EOL EOL    Programming Perl EOLby Larry Wall, Tom Christiansen, and Jon Orwant EOLISBN 0-596-00027-8 [3rd edition July 2000] EOLhttp!://www.oreilly.com/catalog/pperl3/ EOL EOL    Perl 5 Pocket Reference EOL        by Johan Vromans EOLISBN 0-596-00032-4 [3rd edition May 2000] EOLhttp!://www.oreilly.com/catalog/perlpr3/ EOL EOL    Perl in a Nutshell EOL        by Ellen Siever, Stephan Spainhour, and Nathan Patwardhan EOLISBN 1-56592-286-7 [1st edition December 1998] EOLhttp!://www.oreilly.com/catalog/perlnut/  EOL EOLTutorials EOL EOL    Elements of Programming with Perl EOLby Andrew L. Johnson EOLISBN 1884777805 [1st edition October 1999] EOLhttp!://www.manning.com/Johnson/ EOL EOL    Learning Perl EOLby Randal L. Schwartz and Tom Christiansen EOL    with foreword by Larry Wall EOLISBN 1-56592-284-0 [2nd edition July 1997] EOLhttp!://www.oreilly.com/catalog/lperl2/ EOL EOL    Learning Perl on Win32 Systems EOLby Randal L. Schwartz, Erik Olson, and Tom Christiansen, EOL    with foreword by Larry Wall EOLISBN 1-56592-324-3 [1st edition August 1997] EOLhttp!://www.oreilly.com/catalog/lperlwin/ EOL EOL    Perl!: The Programmer's Companion EOLby Nigel Chapman EOLISBN 0-471-97563-X  [1st edition October 1997] EOLhttp!://catalog.wiley.com/title.cgi?isbn=047197563X EOL EOL    Cross-Platform Perl EOLby Eric Foster-Johnson EOLISBN 1-55851-483-X [2nd edition September 2000] EOLhttp!://www.pconline.com/~erc/perlbook.htm EOL EOL    MacPerl!: Power and Ease EOLby Vicki Brown and Chris Nandor, EOL    with foreword by Matthias Neeracher EOLISBN 1-881957-32-2 [1st edition May 1998] EOLhttp!://www.macperl.com/ptf_book/  EOL EOLTask-Oriented EOL EOL    The Perl Cookbook EOLby Tom Christiansen and Nathan Torkington EOL    with foreword by Larry Wall EOLISBN 1-56592-243-3 [1st edition August 1998] EOLhttp!://www.oreilly.com/catalog/cookbook/ EOL EOL    Effective Perl Programming EOLby Joseph Hall EOLISBN 0-201-41975-0 [1st edition 1998] EOLhttp!://www.awl.com/  EOL EOLSpecial Topics EOL EOL    Mastering Regular Expressions EOLby Jeffrey E. F. Friedl EOLISBN 1-56592-257-3 [1st edition January 1997] EOLhttp!://www.oreilly.com/catalog/regex/ EOL EOL    Network Programming with Perl EOLby Lincoln Stein EOLISBN 0-201-61571-1 [1st edition 2001] EOLhttp!://www.awlonline.com/ EOL EOL    Object Oriented Perl EOLDamian Conway EOL    with foreword by Randal L. Schwartz EOLISBN 1884777791 [1st edition August 1999] EOLhttp!://www.manning.com/Conway/ EOL EOL    Data Munging with Perl EOL        Dave Cross EOL        ISBN 1930110006 [1st edition 2001] EOL        http!://www.manning.com/cross EOL EOL    Learning Perl/Tk EOL        by Nancy Walsh EOLISBN 1-56592-314-6 [1st edition January 1999] EOLhttp!://www.oreilly.com/catalog/lperltk/  EOL EOL::::edition###0.063___eolisbn###0.051___eolby###0.042___eolhttp!://www.oreilly.com###0.030___christiansen###0.024___eol###0.023___foreword###0.021___tom###0.017___perl###0.017___wall###0.015___book###0.015___july###0.015___books###0.014___larry###0.013___learning###0.012___programming###0.011___randal###0.010___schwartz###0.010___august###0.010___llama###0.009___companion###0.009___nathan###0.008___camel###0.006___orwant###0.006___conway###0.006___cookbook###0.006___lincoln###0.006___chapman###0.006___nigel###0.006___eolhttp!://www.manning.com###0.006___stein###0.006___isbn###0.006___gecko###0.006___programmer's###0.006___oriented###0.005___network_programming###0.005___october###0.005___jon###0.005___torkington###0.005___january###0.005___win32###0.005___programmer###0.004___object###0.004___systems###0.004___available###0.003___check_out###0.003___cgi###0.003___may###0.003___you're###0.003___written###0.003___http!://www.manning.com/)###0.003___eolhttp!://catalog.wiley.com###0.003___erc/perlbook###0.003___eric###0.003___erik###0.003___eolhttp!://perl.oreilly.com###0.003___bookpool###0.003___eolhttp!://www.awl.com###0.003___eolhttp!://www.awlonline.com###0.003___eolhttp!://www.macperl.com###0.003___editions###0.003___http!://www.manning.com/cross###0.003___andrew###0.003___eoltutorials###0.003___eolhttp!://www.pconline.com###0.003___discounter###0.003___effective###0.003___http!://www.awlonline.com/)###0.003___defurred###0.003___eoldamian###0.003___degreed###0.003___discount###0.003___brown###0.003___foster-johnson###0.003___damian###0.003___johan###0.003___eoldespite###0.003___http!://www.bookpool.com/###0.003___eolspecial###0.003___delightful###0.003___htm###0.003___dave###0.003___johnson###0.003___ellen###0.003___incontestably###0.003___foreign###0.003___eoladdison-wesley###0.003___eoltask-oriented###0.003___cousin###0.003___joseph###0.003___hard-core###0.003___manning###0.003___matthias###0.003___mileage###0.003___mini-tutorials###0.003___munging###0.003___nancy###0.003___nandor###0.003___neeracher###0.003___nutshell###0.003___olson###0.003___patwardhan###0.003___personally###0.003___picture###0.003___pocket###0.003___publishers###0.003___ram###0.003___real-world###0.003___reference_book###0.003___reviews###0.003___september###0.003___siever###0.003___spainhour###0.003___stephan###0.003___technical###0.003___unusual###0.003___vary###0.003___vicki###0.003___volume###0.003___vromans###0.003___eolrecommended###0.003___walsh###0.003___december###0.003___chris###0.003___hall###0.003___list###0.002___accidental###0.002___eolwhat###0.002___excellent###0.002___translations###0.002___extensive###0.002___hand-holding###0.002___cross-platform###0.002___cross###0.002___cover###0.002___computer_scientist###0.002___ease###0.002___topics###0.002___maintains###0.002___eolreferences###0.002___thousands###0.002___creator###0.002___definitive###0.002___updated###0.002___mastering###0.002___power###0.002___blue###0.002___third###0.002___macperl###0.002___worth###0.002___money###0.002___perl/tk###0.002___eolthe###0.002___follows###0.002___english###0.002___eolan###0.002___authors###0.002___containing###0.002___suffice###0.002___mostly###0.002___and/or###0.002___url###0.002___various###0.002___hope###0.002___fine###0.002___serious###0.002___a_few###0.002___possibly###0.002___eolif###0.002___friedl###0.002___elements###0.002___please###0.002___jeffrey###0.002___www.perl.com###0.002___follow###0.002___second###0.001___useful###0.001___provide###0.001___aren't###0.001___languages###0.001___http!://###0.001___complete###0.001___learn###0.001___including###0.001___expressions###0.001___faq###0.001___html###0.001___such_as###0.001___language###0.001___examples###0.001___reference###0.001___good###0.001___already###0.001___several###0.001___won't###0.001___above###0.001___release###0.001___found###0.001___is_not###0.001___programs###0.001___data###0.001___regular###0.001___try###0.001___even###0.001___really###0.001___number###0.001___probably###0.001___need###0.001___doesn't###0.001___
27:282###0.16,60###0.15,97###0.10,58###0.10,24###0.10,33###0.08,42###0.08,11###0.08,31###0.07,7###0.07:Perl in Magazines  EOL EOL:The first and only periodical devoted to All Things Perl, The Perl Journal contained tutorials, demonstrations, case studies, announcements, contests, and much more. TPJ had columns on web development, databases, Win32 Perl, graphical programming, regular expressions, and networking, and sponsored the Obfuscated Perl Contest. Sadly, this publication is no longer in circulation, but should it be resurrected, it will most likely be announced on http!://use.perl.org/ . EOL EOLBeyond this, magazines that frequently carry high-quality articles on Perl are Web Techniques (see http!:// www.webtechniques.com/), Performance Computing (http!://www.performance-computing.com/), and Usenix's newsletter/magazine to its members, login!:, at http!://www.usenix.org/. Randal's Web Technique's columns are available on the web at http!://www.stonehenge.com/merlyn/WebTechniques/ . EOL EOL::::web###0.044___magazines###0.037___columns###0.033___perl###0.023___http!://www.usenix.org/.###0.018___members###0.018___http!://www.stonehenge.com/merlyn/webtechniques/###0.018___newsletter/magazine###0.018___periodical###0.018___http!://www.performance-computing.com/),###0.018___publication###0.018___demonstrations###0.018___randal's###0.018___contests###0.018___resurrected###0.018___sadly###0.018___sponsored###0.018___studies###0.018___announcements###0.018___eolbeyond###0.018___technique's###0.018___devoted###0.018___high-quality###0.018___tpj###0.018___usenix's###0.018___www.webtechniques.com###0.018___computing###0.018___carry###0.018___circulation###0.018___login###0.018___announced###0.016___contained###0.016___http!://use.perl.org/###0.016___tutorials###0.016___graphical###0.016___journal###0.016___articles###0.015___win32###0.015___contest###0.015___obfuscated###0.015___networking###0.014___frequently###0.014___performance###0.014___techniques###0.014___databases###0.014___no_longer###0.013___likely###0.013___it_will###0.012___programming###0.011___http!://###0.011___development###0.011___expressions###0.010___case###0.010___eol###0.010___things###0.009___regular###0.009___first###0.008___available###0.008___
28:102###0.18,109###0.14,183###0.14,21###0.14,165###0.14,205###0.14,33###0.13,295###0.13,210###0.13,294###0.12:Perl on the Net!: FTP and WWW Access  EOL EOL:To get the best performance, pick a site from the list below and use it to grab the complete list of mirror sites which is at / CPAN/MIRRORED.BY or at http!://mirror.cpan.org/. From there you can find the quickest site for you. Remember, the following list is not the complete list of CPAN mirrors (the complete list contains 165 sites as of January 2001)!: EOL EOL  http!://www.cpan.org/ EOL  http!://www.perl.com/CPAN/ EOL  http!://download.sourceforge.net/mirrors/CPAN/ EOL  ftp!://ftp.digital.com/pub/plan/perl/CPAN/ EOL  ftp!://ftp.flirble.org/pub/languages/perl/CPAN/ EOL  ftp!://ftp.uvsq.fr/pub/perl/CPAN/ EOL  ftp!://ftp.funet.fi/pub/languages/perl/CPAN/ EOL  ftp!://ftp.dti.ad.jp/pub/lang/CPAN/ EOL  ftp!://mirror.aarnet.edu.au/pub/perl/CPAN/ EOL  ftp!://cpan.if.usp.br/pub/mirror/CPAN/  EOL EOLOne may also use xx.cpan.org where "xx" is the 2-letter country code for your domain; e.g. Australia would use au.cpan.org. EOL EOL::::list###0.053___complete###0.042___eol###0.041___site###0.039___sites###0.039___ftp!://ftp.funet.fi/pub/languages/perl/cpan/###0.023___ftp!://ftp.uvsq.fr/pub/perl/cpan/###0.023___country###0.023___ftp!://mirror.aarnet.edu.au/pub/perl/cpan/###0.023___get_the_best###0.023___http!://download.sourceforge.net/mirrors/cpan/###0.023___ftp!://cpan.if.usp.br/pub/mirror/cpan/###0.023___ftp!://ftp.digital.com/pub/plan/perl/cpan/###0.023___http!://www.perl.com/cpan/###0.023___http!://mirror.cpan.org/.###0.023___ftp!://ftp.dti.ad.jp/pub/lang/cpan/###0.023___ftp!://ftp.flirble.org/pub/languages/perl/cpan/###0.023___quickest###0.023___cpan/mirrored.by###0.023___xx.cpan.org###0.023___au.cpan.org###0.023___australia###0.023___mirrors###0.021___http!://www.cpan.org/###0.021___mirror###0.021___domain###0.019___pick###0.019___eolone###0.019___january###0.019___www###0.018___ftp###0.018___performance###0.018___grab###0.017___e.g.###0.017___remember###0.016___below###0.016___net###0.015___access###0.013___contains###0.013___is_not###0.012___following###0.011___find###0.011___may###0.009___code###0.008___cpan###0.008___perl###0.004___
29:110###0.20,33###0.16,60###0.15,23###0.15,272###0.14,31###0.11,205###0.11,32###0.10,273###0.10,53###0.10:What mailing lists are there for Perl?  EOL EOL:Most of the major modules (Tk, CGI, libwww-perl) have their own mailing lists. Consult the documentation that came with the module for subscription information. EOL EOLhttp!://lists.cpan.org/  EOL EOL:organisation###0.01075___pitch###0.01075___list###0.08602___database###0.01075___lean###0.08602___motility###0.01075___act###0.01075___mental_attitude###0.01075___position###0.01075___movement###0.01075___pitching###0.01075___struggle###0.01075___leaning###0.08602___tilt###0.08602___partiality###0.01075___listing###0.08602___human_activity###0.01075___conflict###0.01075___difference###0.01075___disposition###0.01075___organization###0.01075___difference_of_opinion###0.01075___lurch###0.01075___dispute###0.01075___partisanship###0.01075___move###0.01075___motion###0.01075___spatial_relation###0.01075___human_action###0.01075___attitude###0.01075___battle###0.01075___tendency###0.01075___lists###0.17204___liking###0.01075___inclination###0.08602___angle###0.01075:what###1.00000:what mailing###1.00000:mailing###0.147___lists###0.120___eolhttp!://lists.cpan.org###0.089___subscription###0.079___major###0.079___libwww-perl###0.079___consult###0.069___documentation###0.053___cgi###0.051___own###0.049___eol###0.048___information###0.044___modules###0.039___module###0.028___perl###0.018___
30:238###0.14,24###0.12,272###0.10,201###0.10,105###0.10,99###0.10,135###0.10,182###0.10,37###0.09,143###0.09:Archives of comp.lang.perl.misc  EOL EOL:Have you tried Deja or AltaVista? Those are the best archives. Just look up "*perl*" as a newsgroup. EOL EOL    http!://www.deja.com/dnquery.xp?QRY=&DBS=2&ST=PS&defaultOp=AND&LNG=ALL&format=terse&showsort=date&maxhits=25&subjects=&groups=*perl*&authors=&fromdate=&todate=  EOL EOLYou might want to trim that down a bit, though. EOL EOLYou'll probably want more a sophisticated query and retrieval mechanism than a file listing, preferably one that allows you to retrieve articles using a fast-access indices, keyed on at least author, date, subject, thread (as in "trn") and probably keywords. The best solution the FAQ authors know of is the MH pick command, but it is very slow to select on 18000 articles. EOL EOLIf you have, or know where can be found, the missing sections, please let perlfaq-suggestions@perl.com know. EOL EOL::::archives###0.043___know###0.037___articles###0.036___best###0.024___fast-access###0.021___listing###0.021___altavista###0.021___http!://www.deja.com/dnquery.xp?qry=&dbs=2&st=ps&defaultop=and&lng=all&format=terse&showsort=date&maxhits=25&subjects=&groups=*perl*&authors=&fromdate=&todate=###0.021___indices###0.021___perlfaq-suggestions@perl.com###0.021___retrieval###0.021___keyed###0.021___eol###0.021___trn###0.019___look_up###0.019___trim###0.019___missing###0.019___thread###0.019___preferably###0.019___retrieve###0.018___query###0.018___author###0.018___deja###0.018___pick###0.018___keywords###0.018___sophisticated###0.018___sections###0.018___probably###0.018___tried###0.017___a_bit###0.017___authors###0.017___newsgroup###0.017___mechanism###0.017___subject###0.017___down###0.016___misc###0.016___allows###0.015___eolyou'll###0.015___comp.lang.###0.015___slow###0.015___at_least###0.014___please###0.014___date###0.014___select###0.014___though###0.013___faq###0.012___command###0.012___solution###0.012___eolyou###0.011___found###0.011___you_have###0.009___perl###0.009___file###0.007___using###0.007___eolif###0.007___one###0.007___
31:2###0.26,24###0.18,42###0.16,58###0.16,15###0.15,11###0.14,33###0.14,266###0.13,59###0.12,16###0.12:Where can I buy a commercial version of Perl?  EOL EOL:In a real sense, Perl already is commercial software!: it has a license that you can grab and carefully read to your manager. It is distributed in releases and comes in well-defined packages. There is a very large user community and an extensive literature. The comp.lang.perl.* newsgroups and several of the mailing lists provide free answers to your questions in near real-time. Perl has traditionally been supported by Larry, scores of software designers and developers, and myriads of programmers, all working for free to create a useful thing to make life better for everyone. EOL EOLHowever, these answers may not suffice for managers who require a purchase order from a company whom they can sue should anything go awry. Or maybe they need very serious hand-holding and contractual obligations. Shrink-wrapped CDs with Perl on them are available from several sources if that will help. For example, many Perl books include a distribution of Perl, as do the O'Reilly Perl Resource Kits (in both the Unix flavor and in the proprietary Microsoft flavor); the free Unix distributions also all come with Perl. EOL EOLAlternatively, you can purchase commercial incidence based support through the Perl Clinic. The following is a commercial from them!: EOL EOL"The Perl Clinic is a commercial Perl support service operated by ActiveState Tool Corp. and The Ingram Group. The operators have many years of in-depth experience with Perl applications and Perl internals on a wide range of platforms. EOL EOL"Through our group of highly experienced and well-trained support engineers, we will put our best effort into understanding your problem, providing an explanation of the situation, and a recommendation on how to proceed." EOL EOLContact The Perl Clinic at EOL EOL    www.PerlClinic.com EOL EOL    North America Pacific Standard Time (GMT-8) EOL    Tel!:    1 604 606-4611 hours 8am-6pm EOL    Fax!:    1 604 606-4640 EOL EOL    Europe (GMT) EOL    Tel!:    00 44 1483 862814 EOL    Fax!:    00 44 1483 862801  EOL EOLSee also www.perl.com for updates on tutorials, training, and support. EOL EOL:change_of_location###0.00662___alteration###0.00662___written_language###0.00662___urban_center###0.00662___transformation###0.00662___datum###0.00662___public_speaking###0.00662___measuring###0.00662___taxon###0.00662___perturbation###0.00662___linguistic_process###0.00662___variation###0.05298___movement###0.00662___paraphrasis###0.00662___speechmaking###0.00662___internal_representation###0.00662___account###0.00662___difference###0.00662___terpsichore###0.00662___city###0.00662___deviation###0.00662___melodic_theme###0.00662___dance###0.00662___version###0.10596___modification###0.00662___paraphrase###0.00662___being###0.00662___variable_quantity###0.00662___public_presentation###0.00662___written_material###0.00662___translation###0.05298___interlingual_rendition###0.05298___defrayment###0.00662___payment###0.00662___move###0.00662___rendering###0.05298___language###0.00662___motion###0.00662___reading###0.05298___dancing###0.00662___data_point###0.00662___mental_representation###0.00662___activity###0.00662___thing###0.00662___interpretation###0.05298___saltation###0.00662___adaptation###0.05298___musical_theme###0.00662___drawing###0.00662___metropolis###0.00662___written_account###0.00662___organism###0.00662___written_record###0.00662___speaking###0.00662___variable###0.00662___explanation###0.00662___mensuration###0.00662___travel###0.00662___performance###0.00662___measurement###0.00662___departure###0.00662___defrayal###0.00662___adjustment###0.00662___writing###0.00662___theme###0.00662___oral_presentation###0.00662___divergence###0.00662___piece_of_writing###0.00662___taxonomic_group###0.00662___idea###0.00662___variant###0.05298___measure###0.00662___representation###0.00662___change###0.00662___type###0.00662___written_communication###0.00662___change_of_integrity###0.00662___organic_process###0.00662___angle###0.00662___biological_process###0.00662:where###1.00000:where can###1.00000:commercial###0.029___perl###0.024___clinic###0.023___eol###0.018___support###0.017___fax###0.015___tel###0.015___flavor###0.015___answers###0.012___group###0.011___free###0.010___software###0.010___several###0.008___unix###0.008___kits###0.007___eolcontact###0.007___contractual###0.007___europe###0.007___engineers###0.007___ingram###0.007___service###0.007___training###0.007___traditionally###0.007___scores###0.007___shrink-wrapped###0.007___awry###0.007___designers###0.007___cds###0.007___incidence###0.007___purchase_order###0.007___company###0.007___gmt###0.007___in-depth###0.007___proceed###0.007___recommendation###0.007___sue###0.007___experienced###0.007___pacific_standard_time###0.007___gmt-###0.007___operated###0.007___obligations###0.007___north_america###0.007___myriads###0.007___literature###0.007___well-defined###0.007___well-trained###0.007___www.perlclinic.com###0.007___providing###0.006___activestate###0.006___effort###0.006___managers###0.006___hand-holding###0.006___experience###0.006___corp.###0.006___community###0.006___developers###0.006___tutorials###0.006___life###0.006___real-time###0.006___internals###0.006___range###0.006___buy###0.006___near###0.006___come_with###0.006___extensive###0.006___we_will###0.006___hours###0.006___everyone###0.006___wide###0.006___explanation###0.006___purchase###0.006___resource###0.006___situation###0.006___updates###0.006___carefully###0.006___for_free###0.006___license###0.006___whom###0.006___mailing###0.006___packages###0.006___years###0.006___maybe###0.006___highly###0.006___books###0.006___manager###0.006___tool###0.006___eolalternatively###0.006___distributions###0.006___newsgroups###0.006___sense###0.006___based###0.006___microsoft###0.006___understanding###0.006___grab###0.005___sources###0.005___suffice###0.005___working###0.005___proprietary###0.005___applications###0.005___comp.lang.###0.005___operators###0.005___supported###0.005___o'reilly###0.005___platforms###0.005___serious###0.005___programmers###0.005___lists###0.005___large###0.005___www.perl.com###0.005___eolhowever###0.005___questions###0.005___distributed###0.005___releases###0.004___useful###0.004___anything###0.004___real###0.004___user###0.004___comes###0.004___provide###0.004___may_not###0.004___larry###0.004___thing###0.004___require###0.004___eolsee###0.004___already###0.004___best###0.004___help###0.004___better###0.004___include###0.004___create###0.004___problem###0.004___following###0.003___version###0.003___for_example###0.003___available###0.003___distribution###0.003___read###0.003___need###0.003___
32:63###0.18,23###0.15,57###0.14,39###0.12,6###0.12,25###0.12,272###0.11,58###0.10,287###0.10,266###0.10:Where do I send bug reports?  EOL EOL:If you are reporting a bug in the perl interpreter or the modules shipped with Perl, use the perlbug program in the Perl distribution or mail your report to perlbug@perl.org . EOL EOLIf you are posting a bug with a non-standard port (see the answer to "What platforms is Perl available for?"), a binary distribution, or a non-standard module (such as Tk, CGI, etc), then please see the documentation that came with it to determine the correct place to post bugs. EOL EOLRead the perlbug(1) man page (perl5.004 or later) for more information. EOL EOL:making_known###0.00372___structure###0.00372___estimate###0.00372___stuff###0.00372___hemipterous_insect###0.02974___learning###0.00372___knowledge_base###0.00372___memorizer###0.00372___production###0.00372___knowledge_domain###0.00372___thoughtfulness###0.00372___tune###0.00372___hemipteron###0.02974___melodic_phrase###0.00372___importance###0.00372___lie###0.00372___microorganism###0.00372___essay###0.00372___information###0.00372___word_form###0.00372___property###0.00372___publishing_house###0.00372___composition###0.02974___contemplation###0.00372___writing_assignment###0.00372___musing###0.00372___reflexion###0.00372___financial_statement###0.00372___fiction###0.00372___scrutiny###0.00372___piece###0.00372___flaw###0.00372___profit###0.00372___hemipteran###0.02974___acquisition###0.00372___inspiration###0.00372___account###0.02974___reports###0.05948___press###0.00372___signifier###0.00372___write_up###0.02974___opus###0.00372___line###0.00372___laurels###0.00372___medium###0.00372___printing###0.00372___memoriser###0.00372___complex_body_part###0.00372___notoriety###0.00372___rumination###0.00372___story###0.02974___construction###0.00372___examination###0.00372___creating_by_mental_acts###0.00372___prevarication###0.00372___room###0.00372___concentration###0.00372___placement###0.00372___ill_fame###0.00372___article###0.00372___mixture###0.00372___relationship###0.00372___arrangement###0.00372___estimation###0.00372___glitch###0.02974___germ###0.02974___reflection###0.00372___creation###0.00372___honour###0.00372___message###0.00372___ground###0.00372___statement###0.00372___news###0.00372___melody###0.00372___publisher###0.00372___immersion###0.00372___drawing###0.00372___reason###0.00372___form###0.00372___public_press###0.00372___reputation###0.02974___verbal_creation###0.00372___substance###0.00372___paper###0.02974___absorption###0.00372___insect###0.00372___piece_of_music###0.00372___printing_process###0.00372___gain###0.00372___thought###0.00372___report_card###0.02974___written_assignment###0.00372___honor###0.00372___informing###0.00372___melodic_line###0.00372___strain###0.00372___microbe###0.02974___musical_composition###0.00372___news_report###0.02974___fault###0.00372___study###0.02974___bug###0.05948___theme###0.02974___engrossment###0.00372___defect###0.00372___idea###0.00372___product###0.00372___material###0.00372___bodily_structure###0.00372___publishing_firm###0.00372___air###0.00372___subject_matter###0.00372___anatomical_structure###0.00372___body_structure###0.00372___info###0.00372___noise###0.00372___publishing_company###0.00372___record###0.00372___content###0.00372___report###0.02974:where###1.00000:where do###1.00000:bug###0.058___perlbug###0.057___non-standard###0.057___you_are###0.034___reporting###0.032___perlbug@perl.org###0.032___eolread###0.028___posting###0.028___shipped###0.028___distribution###0.027___report###0.026___perl###0.026___man###0.024___etc###0.024___platforms###0.023___post###0.023___bugs###0.023___page###0.022___reports###0.022___please###0.021___port###0.021___interpreter###0.021___send###0.021___determine###0.021___eol###0.020___correct###0.020___mail###0.020___perl5###0.020___later###0.019___documentation###0.019___place###0.019___binary###0.019___answer###0.018___such_as###0.018___cgi###0.018___information###0.015___modules###0.014___available###0.013___program###0.011___eolif###0.010___module###0.010___
33:29###0.16,31###0.14,28###0.13,24###0.12,60###0.10,58###0.10,11###0.10,183###0.09,56###0.09,205###0.08:What is perl.com? Perl Mongers? pm.org? perl.org?  EOL EOL:The Perl Home Page at http!://www.perl.com/ is currently hosted on a T3 line courtesy of Songline Systems, a software- oriented subsidiary of O'Reilly and Associates. Other starting points include EOL EOL    http!://language.perl.com/ EOL    http!://conference.perl.com/ EOL    http!://reference.perl.com/  EOL EOLPerl Mongers is an advocacy organization for the Perl language which maintains the web site http!://www.perl.org/ as a general advocacy site for the Perl language. EOL EOLPerl Mongers uses the pm.org domain for services related to Perl user groups, including the hosting of mailing lists and web sites. See the Perl user group web site at http!://www.pm.org/ for more information about joining, starting, or requesting services for a Perl user group. EOL EOLPerl Mongers also maintain the perl.org domain to provide general support services to the Perl community, including the hosting of mailing lists, web sites, and other services. The web site http!://www.perl.org/ is a general advocacy site for the Perl language, and there are many other sub-domains for special topics, such as EOL EOL    http!://bugs.perl.org/ EOL    http!://history.perl.org/ EOL    http!://lists.perl.org/ EOL    http!://news.perl.org/ EOL    http!://use.perl.org/  EOL EOL::what###1.00000:what is###1.00000:mongers###0.049___services###0.049___advocacy###0.037___web_site###0.030___eolperl###0.025___http!://www.perl.org/###0.024___pm.org###0.024___perl.org###0.024___hosting###0.024___general###0.023___eol###0.022___perl###0.022___user###0.022___language###0.021___site###0.020___domain###0.020___mailing###0.020___sites###0.020___starting###0.019___group###0.017___lists###0.016___web###0.014___including###0.014___organization###0.012___hosted###0.012___http!://news.perl.org/###0.012___subsidiary###0.012___sub-domains###0.012___http!://bugs.perl.org/###0.012___http!://reference.perl.com/###0.012___perl.com###0.012___http!://conference.perl.com/###0.012___http!://language.perl.com/###0.012___requesting###0.012___http!://lists.perl.org/###0.012___songline###0.012___joining###0.012___http!://www.pm.org/###0.012___http!://history.perl.org/###0.012___maintain###0.011___maintains###0.011___oriented###0.011___community###0.011___points###0.011___http!://www.perl.com/###0.011___topics###0.011___http!://use.perl.org/###0.011___associates###0.011___home###0.009___groups###0.009___related_to###0.009___o'reilly###0.008___courtesy###0.008___page###0.008___software###0.008___special###0.008___currently###0.007___provide###0.007___such_as###0.007___uses###0.007___support###0.006___include###0.006___information###0.006___line###0.005___systems###0.005___
34:62###0.15,131###0.12,35###0.12,23###0.10,58###0.10,243###0.09,210###0.08,32###0.08,204###0.07,4###0.07:How do I do (anything)?  EOL EOL:Have you looked at CPAN (see perlfaq2)? The chances are that someone has already written a module that can solve your problem. Have you read the appropriate man pages? Here's a brief index!: EOL EOLBasics        	perldata, perlvar, perlsyn, perlop, perlsub EOLExecution	perlrun, perldebug EOLFunctions	perlfunc EOLObjects		perlref, perlmod, perlobj, perltie EOLData Structures	perlref, perllol, perldsc EOLModulesperlmod, perlmodlib, perlsub EOLRegexesi	perlre, perlfunc, perlop, perllocale EOLMoving to perl5	perltrap, perl EOLLinking w/C	perlxstut, perlxs, perlcall, perlguts, perlembed EOLVarious http!://www.perl.com/CPAN/doc/FMTEYEWTK/index.html EOL(not a man-page but still useful)  EOL EOLA crude table of contents for the Perl man page set is found in perltoc. EOL EOL::how###1.00000:how do###1.00000:man###0.027___perlref###0.026___perlsub###0.026___perlop###0.026___perlfunc###0.021___eolmoving###0.018___table_of_contents###0.018___eolvarious###0.018___eolexecution###0.018___crude###0.018___eollinking###0.018___perltoc###0.018___eolbasics###0.018___eolfunctions###0.018___perltie###0.018___http!://www.perl.com/cpan/doc/fmteyewtk/index.html###0.018___eolobjects###0.018___chances###0.018___eolmodulesperlmod###0.018___eolregexesi###0.018___man-page###0.018___w/c###0.018___perlmodlib###0.018___brief###0.016___perlxs###0.016___solve###0.016___eoldata###0.016___perlsyn###0.016___perlcall###0.016___perllol###0.016___looked###0.015___pages###0.015___perldata###0.015___perldebug###0.015___perlfaq2###0.015___perlguts###0.015___perltrap###0.015___perlobj###0.014___perlembed###0.014___perlrun###0.014___perlre###0.014___perlmod###0.014___perldsc###0.014___eol###0.013___appropriate###0.013___perlxstut###0.013___perllocale###0.013___someone###0.013___index###0.012___page###0.012___perlvar###0.012___structures###0.011___perl5###0.011___anything###0.011___useful###0.011___eola###0.011___already###0.010___found###0.009___problem###0.009___here's###0.009___set###0.009___written###0.009___read###0.007___perl###0.007___cpan###0.006___module###0.005___
35:223###0.14,58###0.13,37###0.13,23###0.13,34###0.12,105###0.11,11###0.10,19###0.10,32###0.10,183###0.10:How can I use Perl interactively?  EOL EOL:The typical approach uses the Perl debugger, described in the perldebug(1) man page, on an ``empty'' program, like this!: EOL EOL    perl -de 42  EOL EOLNow just type in any legal Perl code, and it will be immediately evaluated. You can also examine the symbol table, get stack backtraces, check variable values, set breakpoints, and other operations typically found in symbolic debuggers. EOL EOL::how###1.00000:how can###1.00000:examine###0.039___backtraces###0.039___breakpoints###0.039___debuggers###0.039___immediately###0.035___legal###0.035___stack###0.035___typical###0.035___typically###0.035___evaluated###0.035___interactively###0.035___perldebug###0.032___perl###0.032___debugger###0.030___eol###0.030___man###0.029___empty###0.029___symbol###0.028___table###0.028___symbolic###0.028___page###0.027___operations###0.026___eolnow###0.025___it_will###0.025___described###0.024___type###0.024___uses###0.022___check###0.020___found###0.020___approach###0.020___set###0.019___values###0.019___variable###0.018___code###0.014___program###0.014___
36:253###0.14,132###0.13,11###0.13,58###0.13,266###0.12,49###0.11,249###0.11,31###0.10,150###0.10,217###0.10:Is there a Perl shell?  EOL EOL:In general, no. The Shell.pm module (distributed with Perl) makes Perl try commands which aren't part of the Perl language as shell commands. perlsh from the source distribution is simplistic and uninteresting, but may still be what you want. EOL EOL::::commands###0.103___shell###0.074___perlsh###0.069___no.###0.069___shell.pm###0.069___simplistic###0.069___uninteresting###0.069___perl###0.056___distributed###0.045___aren't###0.042___in_general###0.041___language###0.039___source###0.037___makes###0.037___try###0.033___part###0.031___eol###0.030___distribution###0.030___may###0.026___module###0.021___
37:201###0.15,35###0.13,64###0.12,183###0.10,223###0.10,210###0.10,58###0.09,41###0.09,30###0.09,205###0.09:How do I debug my Perl programs?  EOL EOL:Have you tried use warnings or used -w? They enable warnings to detect dubious practices. EOL EOLHave you tried use strict? It prevents you from using symbolic references, makes you predeclare any subroutines that you call as bare words, and (probably most importantly) forces you to predeclare your variables with my, our, or use vars. EOL EOLDid you check the return values of each and every system call? The operating system (and thus Perl) tells you whether they worked, and if not why. EOL EOL  open(FH, "> /etc/cantwrite") EOL    or die "Couldn't write to /etc/cantwrite!: $!!\n";  EOL EOLDid you read perltrap? It's full of gotchas for old and new Perl programmers and even has sections for those of you who are upgrading from languages like awk and C. EOL EOLHave you tried the Perl debugger, described in perldebug? You can step through your program and see what it's doing and thus work out why what it's doing isn't what it should be doing. EOL EOL:announcement###0.00671___structure###0.00671___organisation###0.00671___platform###0.05369___software_system###0.00671___information###0.00671___programs###0.10738___adp_system###0.00671___written_document###0.00671___papers###0.00671___education###0.00671___computer_system###0.00671___adps###0.00671___educational_activity###0.00671___organization###0.00671___political_platform###0.05369___pedagogy###0.00671___construction###0.00671___syllabus###0.05369___shoe###0.00671___horizontal_surface###0.00671___software_package###0.00671___computing_system###0.00671___package###0.00671___instruction###0.00671___arrangement###0.00671___show###0.00671___system_of_rules###0.00671___message###0.00671___programme###0.05369___drawing###0.00671___computer_programme###0.05369___broadcast###0.05369___software###0.00671___teaching###0.00671___document###0.00671___computer_program###0.05369___program###0.05369___curriculum###0.05369___course_of_study###0.05369___system###0.00671___performance###0.00671___automatic_data_processing_system###0.00671___thought###0.00671___political_program###0.05369___plan###0.05369___idea###0.00671___info###0.00671___level###0.00671___promulgation###0.00671:how###1.00000:how do###1.00000:tried###0.042___etc/cantwrite###0.035___eolhave###0.035___predeclare###0.035___eoldid###0.035___doing###0.034___thus###0.028___warnings###0.024___eol###0.021___it's###0.020___practices###0.017___most_importantly###0.017___work_out###0.017___vars.###0.017___debug###0.017___detect###0.016___dubious###0.016___upgrading###0.016___bare###0.016___forces###0.016___enable###0.016___why###0.015___perldebug###0.014___sections###0.014___worked###0.014___gotchas###0.014___perltrap###0.014___perl###0.014___if_not###0.014___step###0.014___debugger###0.014___full###0.013___tells###0.013___system_call###0.013___prevents###0.013___symbolic###0.012___couldn't###0.012___programmers###0.012___awk###0.012___words###0.012___subroutines###0.012___every###0.011___strict###0.011___operating_system###0.011___described###0.010___languages###0.010___references###0.010___variables###0.009___makes###0.009___check###0.009___call###0.009___programs###0.008___even###0.008___values###0.008___return###0.008___isn't###0.008___used###0.008___whether###0.008___die###0.008___write###0.007___open###0.007___probably###0.007___read###0.007___new###0.007___program###0.006___using###0.006___
38:72###0.20,210###0.17,205###0.17,51###0.17,183###0.16,261###0.16,194###0.15,149###0.15,165###0.14,101###0.14:How do I profile my Perl programs?  EOL EOL:You should get the Devel!:!:DProf module from the standard distribution (or separately on CPAN) and also use Benchmark.pm from the standard distribution. The Benchmark module lets you time specific portions of your code, while Devel!:!:DProf gives detailed breakdowns of where your code spends its time. EOL EOLHere's a sample use of Benchmark!: EOL EOL  use Benchmark; EOL EOL  @junk = `cat /etc/motd`; EOL  $count = 10_000; EOL EOL  timethese($count, { EOL            'map' => sub { my @a = @junk; EOL   map { s/a/b/ } @a; EOL   return @a EOL }, EOL            'for' => sub { my @a = @junk; EOL   local $_; EOL   for (@a) { s/a/b/ }; EOL   return @a }, EOL           });  EOL EOLThis is what it prints (on one machine--your results will be dependent on your hardware, operating system, and the load on your machine)!: EOL EOL  Benchmark!: timing 10000 iterations of for, map... EOL         for!:  4 secs ( 3.97 usr  0.01 sys =  3.98 cpu) EOL         map!:  6 secs ( 4.97 usr  0.00 sys =  4.97 cpu)  EOL EOLBe aware that a good benchmark is very hard to write. It only tests the data you give it and proves little about the differing complexities of contrasting algorithms. EOL EOL:profile###1.00000:how###1.00000:how do###1.00000:benchmark###0.061___junk###0.044___eol###0.043___map###0.043___secs###0.029___dprof###0.029___s/a/b###0.029___devel###0.029___cpu###0.026___usr###0.026___machine###0.022___sys###0.022___count###0.018___proves###0.014___dependent_on###0.014___iterations###0.014___complexities###0.014___benchmark.pm###0.014___contrasting###0.014___spends###0.014___breakdowns###0.014___timethese###0.014___timing###0.014___differing###0.014___return###0.014___portions###0.013___etc/motd###0.013___load###0.013___profile###0.013___sub###0.013___distribution###0.012___standard###0.012___separately###0.012___aware###0.012___detailed###0.012___eolbe###0.012___time###0.012___little###0.011___tests###0.011___sample###0.011___hardware###0.011___algorithms###0.011___lets###0.011___prints###0.011___results###0.011___code###0.011___specific###0.010___cat###0.010___gives###0.009___hard###0.009___operating_system###0.009___module###0.009___give###0.009___eolhere's###0.008___good###0.008___local###0.007___data###0.007___programs###0.007___eolthis###0.006___write###0.006___cpan###0.005___one###0.004___perl###0.003___
39:32###0.12,55###0.12,58###0.12,49###0.12,53###0.11,266###0.10,183###0.10,11###0.09,100###0.09,178###0.09:How do I cross-reference my Perl programs?  EOL EOL:The B!:!:Xref module, shipped with the new, alpha-release Perl compiler (not the general distribution prior to the 5.005 release), can be used to generate cross-reference reports for Perl programs. EOL EOL    perl -MO=Xref[,OPTIONS] scriptname.plx  EOL EOL:quotation###0.03333___credit###0.03333___citation###0.03333___mention###0.03333___reference###0.03333___acknowledgment###0.03333___cross-index###0.26667___cross-reference###0.53333:how###1.00000:how do###1.00000:cross-reference###0.116___xref###0.116___alpha-release###0.058___scriptname###0.058___plx###0.058___programs###0.057___shipped###0.052___prior_to###0.048___options###0.048___perl###0.047___generate###0.043___compiler###0.040___reports###0.040___used_to###0.038___eol###0.038___general###0.036___release###0.031___distribution###0.025___new###0.023___module###0.018___
40:44###0.20,42###0.12,175###0.11,183###0.10,72###0.10,192###0.10,58###0.09,43###0.09,250###0.09,221###0.09:Is there a pretty-printer (formatter) for Perl?  EOL EOL:There is no program that will reformat Perl as much as indent(1) does for C. The complex feedback between the scanner and the parser (this feedback is what confuses the vgrind and emacs programs) makes it challenging at best to write a stand-alone Perl parser. EOL EOLOf course, if you simply follow the guidelines in perlstyle, you shouldn't need to reformat. The habit of formatting your code as you write it will help prevent bugs. Your editor can and should help you with this. The perl-mode or newer cperl- mode for emacs can provide remarkable amounts of help with most (but not all) code, and even less programmable editors can provide significant assistance. Tom swears by the following settings in vi and its clones!: EOL EOL    set ai sw=4 EOL    map!! ^O {^M}^[O^T  EOL EOLNow put that in your .exrc file (replacing the caret characters with control characters) and away you go. In insert mode, ^T is for indenting, ^D is for undenting, and ^O is for blockdenting-- as it were. If you haven't used the last one, you're missing a lot. A more complete example, with comments, can be found at http!://www.perl.com/CPAN-local/authors/id/ TOMC/scripts/toms.exrc.gz EOL EOLIf you are used to using the vgrind program for printing out nice code to a laser printer, you can take a stab at this using http!://www.perl.com/CPAN/doc/misc/tips/working.vgrind.entry, but the results are not particularly satisfying for sophisticated code. EOL EOLThe a2ps at http!://www.infres.enst.fr/%7Edemaille/a2ps/ does lots of things related to generating nicely printed output of documents. EOL EOL::::vgrind###0.021___exrc###0.019___feedback###0.019___reformat###0.019___help###0.017___emacs###0.017___code###0.016___parser###0.014___mode###0.014___provide###0.013___eol###0.012___characters###0.011___remarkable###0.010___clones###0.010___satisfying###0.010___a2ps###0.010___scanner###0.010___stab###0.010___swears###0.010___blockdenting###0.010___as_it_were###0.010___http!://www.perl.com/cpan-local/authors/id/###0.010___guidelines###0.010___tomc/scripts/toms###0.010___undenting###0.010___formatter###0.010___http!://www.perl.com/cpan/doc/misc/tips/working.vgrind.entry,###0.010___amounts###0.010___indenting###0.010___confuses###0.010___challenging###0.010___cperl###0.010___habit###0.010___laser_printer###0.010___pretty-printer###0.010___programmable###0.010___http!://www.infres.enst.fr/%7edemaille/a2ps/###0.010___lots###0.009___significant###0.009___stand-alone###0.009___missing###0.009___caret###0.009___assistance###0.009___perl-mode###0.009___editors###0.009___insert###0.009___perlstyle###0.009___as_much_as###0.009___prevent###0.009___newer###0.009___indent###0.009___printing###0.009___at_best###0.009___replacing###0.009___write###0.009___course###0.008___editor###0.008___sophisticated###0.008___generating###0.008___formatting###0.008___haven't###0.008___nicely###0.008___related_to###0.008___settings###0.008___eolof###0.008___documents###0.008___printed###0.008___away###0.008___results###0.008___nice###0.008___map###0.007___tom###0.007___bugs###0.007___complex###0.007___program###0.007___comments###0.007___using###0.007___particularly###0.007___follow###0.007___it_will###0.007___simply###0.007___used_to###0.007___are_not###0.007___eolnow###0.007___shouldn't###0.006___control###0.006___perl###0.006___complete###0.006___less###0.006___a_lot###0.006___output###0.005___last###0.005___makes###0.005___you_are###0.005___found###0.005___set###0.005___following###0.005___things###0.005___programs###0.005___even###0.005___example###0.005___used###0.005___need###0.004___eolthe###0.004___you're###0.003___file###0.003___eolif###0.003___one###0.003___
41:7###0.14,183###0.11,210###0.11,253###0.10,168###0.10,58###0.09,37###0.09,274###0.09,205###0.09,141###0.09:Is there a ctags for Perl?  EOL EOL:There's a simple one at http!://www.perl.com/CPAN/authors/id/TOMC/scripts/ptags.gz which may do the trick. And if not, it's easy to hack into what you want. EOL EOL::::ctags###0.125___http!://www.perl.com/cpan/authors/id/tomc/scripts/ptags.gz###0.125___hack###0.125___if_not###0.097___trick###0.093___easy###0.084___there's###0.069___simple###0.062___eol###0.054___it's###0.048___may###0.047___one###0.040___perl###0.025___
42:59###0.17,44###0.16,31###0.16,58###0.13,278###0.13,40###0.12,274###0.12,17###0.12,99###0.11,16###0.11:Is there an IDE or Windows Perl Editor?  EOL EOL:Perl programs are just plain text, so any editor will do. EOL EOLIf you're on Unix, you already have an IDE--Unix itself. The UNIX philosophy is the philosophy of several small tools that each do one thing and do it well. It's like a carpenter's toolbox. EOL EOLIf you want a Windows IDE, check the following!: EOL EOLCodeMagicCD EOLhttp!://www.codemagiccd.com/ EOLKomodo EOLActiveState's cross-platform, multi-language IDE has Perl support, including a regular expression debugger and remote debugging (http!://www.ActiveState.com/Products/Komodo/index.html). (Visual Perl, a Visual Studio.NET plug-in is currently (early 2001) in beta (http!://www.ActiveState.com/Products/VisualPerl/ index.html)). EOLThe Object System EOL(http!://www.castlelink.co.uk/object_system/) is a Perl web applications development IDE. EOLPerlBuilder EOL(http!://www.solutionsoft.com/perl.htm) is an integrated development environment for Windows that supports Perl development. EOLPerl code magic EOL(http!://www.petes-place.com/codemagic.html). EOLvisiPerl+ EOLhttp!://helpconsulting.net/visiperl/, from Help Consulting. EOL EOLFor editors!: if you're on Unix you probably have vi or a vi clone already, and possibly an emacs too, so you may not need to download anything. In any emacs the cperl-mode (M-x cperl-mode) gives you perhaps the best available Perl editing mode in any editor. EOL EOLFor Windows editors!: you can download an Emacs EOL EOLGNU Emacs EOLhttp!://www.gnu.org/software/emacs/windows/ntemacs.html EOLMicroEMACS EOLhttp!://members.nbci.com/uemacs/ EOLXEmacs EOLhttp!://www.xemacs.org/Download/index.html EOL EOLor a vi clone such as EOL EOLElvis EOLftp!://ftp.cs.pdx.edu/pub/elvis/ http!://www.fh-wedel.de/elvis/ EOLVile EOLhttp!://vile.cx/ EOLVim EOL EOLhttp!://www.vim.org/ EOL EOLwin32!: http!://www.cs.vu.nl/%7Etmgil/vi.html EOL EOLFor vi lovers in general, Windows or elsewhere!: http!://www.thomer.com/thomer/vi/vi.html. EOL EOLnvi (http!://www.bostic.com/vi/, available from CPAN in src/misc/) is yet another vi clone, unfortunately not available for Windows, but in UNIX platforms you might be interested in trying it out, firstly because strictly speaking it is not a vi clone, it is the real vi, or the new incarnation of it, and secondly because you can embed Perl inside it to use Perl as the scripting language. nvi is not alone in this, though!: at least also vim and vile offer an embedded Perl. EOL EOLThe following are Win32 multilanguage editor/IDESs that support Perl!: EOL EOLCodewright EOLhttp!://www.starbase.com/ EOLMultiEdit EOLhttp!://www.MultiEdit.com/ EOLSlickEdit EOLhttp!://www.slickedit.com/ EOL EOLThere is also a toyedit Text widget based editor written in Perl that is distributed with the Tk module on CPAN. The ptkdb (http!://world.std.com/~aep/ptkdb/) is a Perl/tk based debugger that acts as a development environment of sorts. Perl Composer (http!://perlcomposer.sourceforge.net/vperl.html) is an IDE for Perl/Tk GUI creation. EOL EOLIn addition to an editor/IDE you might be interested in a more powerful shell environment for Win32. Your options include EOL EOLBash EOLfrom the Cygwin package (http!://sources.redhat.com/cygwin/) EOLKsh EOLfrom the MKS Toolkit (http!://www.mks.com/), or the Bourne shell of the U/WIN environment (http!:// www.research.att.com/sw/tools/uwin/) EOLTcsh EOLftp!://ftp.astron.com/pub/tcsh/, see also http!://www.primate.wisc.edu/software/csh-tcsh-book/ EOLZsh EOLftp!://ftp.blarg.net/users/amol/zsh/, see also http!://www.zsh.org/ EOL EOLMKS and U/WIN are commercial (U/WIN is free for educational and research purposes), Cygwin is covered by the GNU Public License (but that shouldn't matter for Perl use). The Cygwin, MKS, and U/WIN all contain (in addition to the shells) a comprehensive set of standard UNIX toolkit utilities. EOL EOLIf you're transferring text files between Unix and Windows using FTP be sure to transfer them in ASCII mode so the ends of lines are appropriately converted. EOL EOLOn Mac OS the MacPerl Application comes with a simple 32k text editor that behaves like a rudimentary IDE. In contrast to the MacPerl Application the MPW Perl tool can make use of the MPW Shell itself as an editor (with no 32k limit). EOL EOLBBEdit and BBEdit Lite EOLare text editors for Mac OS that have a Perl sensitivity mode (http!://web.barebones.com/). EOLAlpha EOLis an editor, written and extensible in Tcl, that nonetheless has built in support for several popular markup and programming languages including Perl and HTML (http!://alpha.olm.net/). EOL EOLPepper and Pe are programming language sensitive text editors for Mac OS X and BeOS respectively (http!:// www.hekkelman.com/). EOL EOL::::ide###0.025___editor###0.017___windows###0.017___u/win###0.014___clone###0.014___unix###0.013___editors###0.012___perl###0.012___emacs###0.011___eol###0.011___environment###0.010___cygwin###0.009___mac###0.008___text###0.008___development###0.008___html###0.008___mode###0.007___mks###0.007___eolfrom###0.007___philosophy###0.007___visual###0.007___mpw###0.006___toolkit###0.006___cperl-mode###0.006___support###0.006___download###0.005___perl/tk###0.005___macperl###0.005___interested###0.005___win32###0.005___shell###0.005___eolfor###0.005___see_also###0.005___debugger###0.005___based###0.005___itself###0.005___application###0.005___available###0.004___http!://###0.004___including###0.004___already###0.004___several###0.003___you're###0.003___eolif###0.003___written###0.003___is_not###0.003___public###0.003___incarnation###0.003___eolkomodo###0.003___research###0.003___rudimentary###0.003___carpenter's###0.003___eolksh###0.003___eolcodemagiccd###0.003___eolcodewright###0.003___integrated###0.003___secondly###0.003___http!://perlcomposer.sourceforge.net/vperl.html)###0.003___firstly###0.003___http!://www.cs.vu.nl/%7etmgil/vi.html###0.003___gui###0.003___contrast###0.003___sensitive###0.003___sensitivity###0.003___sorts###0.003___eolvile###0.003___eolvim###0.003___http!://www.zsh.org/###0.003___src/misc###0.003___eolvisiperl###0.003___studio.net###0.003___http!://sources.redhat.com/cygwin/)###0.003___toyedit###0.003___eolmicroemacs###0.003___http!://web.barebones.com/).###0.003___eolmks###0.003___transfer###0.003___transferring###0.003___eolslickedit###0.003___unfortunately###0.003___http!://world.std.com/~aep/ptkdb/)###0.003___vile###0.003___vim###0.003___eolelvis###0.003___eolmultiedit###0.003___www.hekkelman.com###0.003___www.research.att.com###0.003___eolwin32###0.003___http!://www.fh-wedel.de/elvis/###0.003___eolxemacs###0.003___addition###0.003___http!://www.activestate.com/products/komodo/index.html).###0.003___eolnvi###0.003___http!://www.activestate.com/products/visualperl/###0.003___eolftp!://ftp.astron.com###0.003___eolftp!://ftp.blarg.net###0.003___eolftp!://ftp.cs.pdx.edu###0.003___http!://www.petes-place.com/codemagic.html).###0.003___eolgnu###0.003___eoltcsh###0.003___http!://alpha.olm.net/).###0.003___eolhttp!://helpconsulting.net###0.003___bbedit###0.003___composer###0.003___covered###0.003___eolhttp!://members.nbci.com###0.003___eolactivestate's###0.003___eolhttp!://vile.cx###0.003___eolzsh###0.003___eolalpha###0.003___http!://www.primate.wisc.edu/software/csh-tcsh-book/###0.003___eolhttp!://www.codemagiccd.com###0.003___eolhttp!://www.gnu.org###0.003___http!://www.solutionsoft.com/perl.htm)###0.003___editing###0.003___eolpepper###0.003___eolhttp!://www.multiedit.com###0.003___editor/ide###0.003___editor/idess###0.003___educational###0.003___eolare###0.003___http!://www.bostic.com/vi/,###0.003___eolhttp!://www.slickedit.com###0.003___beta###0.003___eolhttp!://www.starbase.com###0.003___eolhttp!://www.vim.org###0.003___eolhttp!://www.xemacs.org###0.003___eolbash###0.003___eolbbedit###0.003___eolperlbuilder###0.003___http!://www.castlelink.co.uk/object_system/)###0.003___eolis###0.003___http!://www.mks.com/),###0.003___http!://www.thomer.com/thomer/vi/vi.html.###0.003___elsewhere###0.003___consulting###0.003___limit###0.003___lovers###0.003___m-x###0.003___markup###0.003___multi-language###0.003___multilanguage###0.003___nonetheless###0.003___plug-in###0.003___ptkdb###0.003___following###0.003___text_editor###0.003___embed###0.003___toolbox###0.003___lite###0.003___gnu###0.003___behaves###0.003___beos###0.003___alone###0.003___acts###0.003___cross-platform###0.003___extensible###0.003___bourne###0.003___nvi###0.003___remote###0.003___respectively###0.003___early###0.003___shells###0.003___creation###0.002___plain###0.002___utilities###0.002___comprehensive###0.002___debugging###0.002___offer###0.002___scripting###0.002___options###0.002___purposes###0.002___magic###0.002___converted###0.002___license###0.002___strictly_speaking###0.002___in_addition_to###0.002___tools###0.002___eolthe###0.002___widget###0.002___tool###0.002___tcl###0.002___popular###0.002___powerful###0.002___ftp###0.002___commercial###0.002___ends###0.002___appropriately###0.002___contain###0.002___inside###0.002___matter###0.002___eolon###0.002___platforms###0.002___applications###0.002___index###0.002___embedded###0.002___eolperl###0.002___trying###0.002___possibly###0.002___built###0.002___programming_language###0.002___object###0.002___free###0.002___at_least###0.002___cpan###0.002___gives###0.002___perhaps###0.002___distributed###0.002___eolthere###0.002___ascii###0.002___sure###0.002___shouldn't###0.002___real###0.002___small###0.002___anything###0.002___currently###0.002___may_not###0.002___programming###0.002___comes###0.002___web###0.002___though###0.002___do_it###0.002___languages###0.002___in_general###0.002___in_this###0.002___such_as###0.002___language###0.002___thing###0.002___supports###0.002___best###0.002___help###0.002___expression###0.002___that_is###0.001___package###0.001___check###0.001___eolin###0.001___include###0.001___lines###0.001___set###0.001___simple###0.001___programs###0.001___files###0.001___regular###0.001___eolor###0.001___standard###0.001___probably###0.001___need###0.001___system###0.001___new###0.001___it's###0.001___
43:163###0.16,160###0.15,141###0.14,172###0.13,38###0.13,177###0.12,142###0.11,275###0.11,151###0.10,15###0.10:Where can I get Perl macros for vi?  EOL EOL:For a complete version of Tom Christiansen's vi configuration file, see http!://www.perl.com/CPAN/authors/ Tom_Christiansen/scripts/toms.exrc.gz , the standard benchmark file for vi emulators. The file runs best with nvi, the current version of vi out of Berkeley, which incidentally can be built with an embedded Perl interpreter--see http!:// www.perl.com/CPAN/src/misc. EOL EOL:macro_instruction###0.22222___macros###0.44444___instruction###0.02778___program_line###0.02778___macro###0.22222___statement###0.02778___command###0.02778:where###1.00000:where can###1.00000:file###0.052___emulators###0.048___berkeley###0.048___incidentally###0.048___macros###0.048___tom_christiansen/scripts/toms###0.048___version###0.047___christiansen's###0.043___nvi###0.043___exrc###0.043___configuration###0.040___http!://www.perl.com/cpan/authors/###0.040___benchmark###0.040___out_of###0.036___tom###0.034___embedded###0.033___built###0.033___www.perl.com###0.032___interpreter###0.031___runs###0.031___complete###0.029___http!://###0.029___best###0.027___current###0.025___eol###0.021___standard###0.020___perl###0.019___
44:40###0.20,42###0.16,214###0.09,266###0.08,31###0.07,58###0.07,172###0.07,15###0.07,101###0.07,16###0.07:Where can I get perl-mode for emacs?  EOL EOL:Since Emacs version 19 patchlevel 22 or so, there have been both a perl-mode.el and support for the Perl debugger built in. These should come with the standard Emacs 19 distribution. EOL EOLIn the Perl source directory, you'll find a directory called "emacs", which contains a cperl-mode that color-codes keywords, provides context-sensitive help, and other nifty things. EOL EOLNote that the perl-mode of emacs will have fits with "main'foo" (single quote), and mess up the indentation and highlighting. You are probably using "main!:!:foo" in new Perl code anyway, so this shouldn't be an issue. EOL EOL::where###1.00000:where can###1.00000:emacs###0.111___perl-mode###0.072___directory###0.031___context-sensitive###0.026___patchlevel###0.026___mess_up###0.026___main'foo###0.026___highlighting###0.026___color-codes###0.026___indentation###0.024___or_so###0.024___come_with###0.024___cperl-mode###0.024___nifty###0.024___fits###0.024___single_quote###0.024___keywords###0.022___debugger###0.021___anyway###0.020___in.###0.019___built###0.018___main###0.018___eol###0.017___shouldn't###0.017___issue###0.017___perl###0.016___foo###0.016___eolnote###0.015___provides###0.015___contains###0.014___help###0.014___support###0.014___source###0.014___called###0.014___you_are###0.014___eolin###0.014___things###0.013___version###0.013___find###0.013___you'll###0.012___distribution###0.011___standard###0.011___probably###0.011___new###0.010___code###0.010___using###0.009___
45:133###0.11,266###0.09,230###0.07,46###0.07,219###0.07,9###0.07,205###0.07,267###0.07,255###0.06,188###0.06:How can I use curses with Perl?  EOL EOL:The Curses module from CPAN provides a dynamically loadable object module interface to a curses library. A small demo can be found at the directory http!://www.perl.com/CPAN/authors/Tom_Christiansen/scripts/rep; this program repeats a command and updates the screen as needed, rendering rep ps axu similar to top. EOL EOL:greek_deity###0.00515___magic_spell###0.00515___object###0.00515___blow###0.00515___disapproval###0.00515___curse###0.04124___reverse###0.00515___suffering###0.00515___human###0.00515___hex###0.04124___final_judgment###0.00515___nemesis###0.04124___curses###0.08247___persecutor###0.00515___swearword###0.04124___hurting###0.00515___setback###0.00515___vexation###0.00515___denunciation###0.00515___condemnation###0.04124___molestation###0.00515___hatred###0.00515___oath###0.04124___mortal###0.00515___distress###0.00515___affliction###0.00515___whammy###0.04124___final_decision###0.00515___charm###0.00515___commitment###0.00515___somebody###0.00515___someone###0.00515___disgust###0.00515___profanity###0.00515___hurt###0.00515___condition###0.00515___bane###0.04124___swearing###0.04124___tormenter###0.00515___unfortunate_person###0.00515___spell###0.00515___denouncement###0.00515___pain###0.00515___scourge###0.04124___expletive###0.04124___male###0.00515___whip###0.00515___individual###0.00515___status###0.00515___torment###0.04124___unfortunate###0.00515___male_person###0.00515___execration###0.04124___cuss###0.04124___chafe###0.00515___harassment###0.00515___utterance###0.00515___person###0.00515___reversal###0.00515___dedication###0.00515___jinx###0.04124___annoyance###0.00515___vocalization###0.00515___tormentor###0.00515___curse_word###0.04124___soul###0.00515___hate###0.00515:how###1.00000:how can###1.00000:curses###0.124___loadable###0.046___top.###0.046___repeats###0.046___rep###0.046___as_needed###0.046___axu###0.046___http!://www.perl.com/cpan/authors/tom_christiansen/scripts/rep;###0.046___rendering###0.046___screen###0.038___demo###0.038___updates###0.038___dynamically###0.036___similar###0.036___interface###0.031___object###0.031___library###0.029___module###0.029___small###0.028___directory###0.027___provides###0.026___command###0.026___found###0.024___eol###0.020___program###0.016___cpan###0.015___perl###0.009___
46:42###0.10,60###0.09,61###0.08,188###0.08,277###0.08,71###0.08,295###0.08,21###0.07,45###0.07,272###0.07:How can I use X or Tk with Perl?  EOL EOL:Tk is a completely Perl-based, object-oriented interface to the Tk toolkit that doesn't force you to use Tcl just to get at Tk. Sx is an interface to the Athena Widget set. Both are available from CPAN. See the directory http!://www.perl.com/ CPAN/modules/by-category/08_User_Interfaces/ EOL EOLInvaluable for Perl/Tk programming are the Perl/Tk FAQ at http!://w4.lns.cornell.edu/%7Epvhp/ptk/ptkTOC.html , the Perl/Tk Reference Guide available at http!://www.perl.com/CPAN-local/authors/Stephen_O_Lidie/ , and the online manpages at http!://www-users.cs.umn.edu/%7Eamundson/perl/perltk/toc.html . EOL EOL:period_of_time###0.01235___decade###0.09877___tenner###0.09877___time_period###0.01235___adult_male###0.01235___cloud_nine###0.01235___emotional_state###0.01235___architect###0.01235___spirit###0.01235___x###0.19753___bliss###0.01235___man###0.01235___stimulant###0.01235___blissfulness###0.01235___walking_on_air###0.01235___large_integer###0.01235___ten###0.09877___MDMA###0.09877___Adam###0.09877___stimulant_drug###0.01235___period###0.01235___seventh_heaven###0.01235___ecstasy###0.09877___designer###0.01235:how###1.00000:how can###1.00000:perl/tk###0.097___interface###0.053___athena###0.039___http!://www-users.cs.umn.edu/%7eamundson/perl/perltk/toc.html###0.039___perl-based###0.039___http!://w4.lns.cornell.edu/%7epvhp/ptk/ptktoc.html###0.039___online###0.039___eolinvaluable###0.039___http!://www.perl.com/cpan-local/authors/stephen_o_lidie/###0.039___cpan/modules/by-category/08_user_interfaces###0.039___get_at###0.035___http!://www.perl.com/###0.035___manpages###0.035___guide###0.035___toolkit###0.035___available###0.034___completely###0.032___tcl###0.030___object-oriented###0.030___widget###0.030___force###0.029___programming###0.024___directory###0.023___faq###0.022___reference###0.022___eol###0.021___set###0.019___doesn't###0.015___cpan###0.013___perl###0.008___
47:272###0.18,60###0.16,53###0.12,205###0.11,273###0.11,266###0.10,183###0.10,284###0.09,39###0.09,175###0.09:How can I generate simple menus without using CGI or Tk?  EOL EOL:The http!://www.perl.com/CPAN/authors/id/SKUNZ/perlmenu.v4.0.tar.gz module, which is curses-based, can help with this. EOL EOL:composition_board###0.00980___roll###0.00980___passenger###0.00980___salutation###0.00980___list###0.00980___printed_circuit###0.00980___humorist###0.00980___book###0.00980___roster###0.00980___fare###0.07843___food###0.00980___certificate###0.00980___cardboard###0.00980___menus###0.15686___listing###0.00980___nutrient###0.00980___recordbook###0.00980___bill_of_fare###0.07843___bill###0.00980___carte_du_jour###0.07843___charge###0.00980___agenda###0.00980___computer_menu###0.07843___credentials###0.00980___greeting###0.00980___menu###0.07843___certification###0.00980___paper###0.00980___rider###0.00980___sign###0.00980___correspondence###0.00980___credential###0.00980___docket###0.00980___card###0.07843___carte###0.07843___humourist###0.00980___record###0.00980___schedule###0.00980:how###1.00000:how can###1.00000:http!://www.perl.com/cpan/authors/id/skunz/perlmenu.v4.###0.127___curses-based###0.127___menus###0.127___tar###0.113___generate###0.094___cgi###0.073___help###0.070___without###0.064___simple###0.063___eol###0.055___using###0.043___module###0.039___
48:49###0.19,266###0.18,55###0.17,60###0.16,183###0.15,64###0.15,205###0.15,221###0.15,225###0.14,53###0.14:What is undump?  EOL EOL:See the next question on ``How can I make my Perl program run faster?'' EOL EOL::what###1.00000:what is###1.00000:undump###0.209___next###0.158___faster###0.140___run###0.128___question###0.126___eol###0.102___program###0.083___perl###0.048___
49:55###0.31,48###0.19,53###0.12,38###0.12,266###0.12,39###0.12,10###0.11,36###0.11,57###0.11,50###0.10:How can I make my Perl program run faster?  EOL EOL:The best way to do this is to come up with a better algorithm. This can often make a dramatic difference. Jon Bentley's book ``Programming Pearls'' (that's not a misspelling!!) has some good tips on optimization, too. Advice on benchmarking boils down to!: benchmark and profile to make sure you're optimizing the right part, look for better algorithms instead of microtuning your code, and when all else fails consider just buying faster hardware. EOL EOLA different approach is to autoload seldom-used Perl code. See the AutoSplit and AutoLoader modules in the standard distribution for that. Or you could locate the bottleneck and think about writing just that part in C, the way we used to take bottlenecks in C code and write them in assembler. Similar to rewriting in C, modules that have critical sections can be written in C (for instance, the PDL module from CPAN). EOL EOLIn some cases, it may be worth it to use the backend compiler to produce byte code (saving compilation time) or compile into C, which will certainly save compilation time and sometimes a small amount (but not much) execution time. See the question about compiling your Perl programs for more on the compiler--the wins aren't as obvious as you'd hope. EOL EOLIf you're currently linking your perl executable to a shared libc.so, you can often gain a 10-25% performance benefit by rebuilding it to link with a static libc.a instead. This will make a bigger perl executable, but your Perl programs (and programmers) may thank you for it. See the INSTALL file in the source distribution for more information. EOL EOLUnsubstantiated reports allege that Perl interpreters that use sfio outperform those that don't (for I/O intensive applications). To try this, see the INSTALL file in the source distribution, especially the ``Selecting File I/O mechanisms'' section. EOL EOLThe undump program was an old attempt to speed up your Perl program by storing the already-compiled form to disk. This is no longer a viable option, as it only worked on a few architectures, and wasn't a good solution anyway. EOL EOL:structure###0.00990___organisation###0.00990___platform###0.07921___information###0.00990___adp_system###0.00990___written_document###0.00990___papers###0.00990___education###0.00990___computer_system###0.00990___adps###0.00990___educational_activity###0.00990___organization###0.00990___political_platform###0.07921___pedagogy###0.00990___construction###0.00990___syllabus###0.07921___shoe###0.00990___horizontal_surface###0.00990___computing_system###0.00990___instruction###0.00990___arrangement###0.00990___show###0.00990___message###0.00990___drawing###0.00990___broadcast###0.07921___teaching###0.00990___document###0.00990___program###0.15842___course_of_study###0.07921___curriculum###0.07921___system###0.00990___automatic_data_processing_system###0.00990___thought###0.00990___plan###0.07921___idea###0.00990___info###0.00990___level###0.00990:how###1.00000:how can###1.00000:executable###0.014___compilation###0.013___perl###0.013___i/o###0.012___code###0.011___compiler###0.011___file_in###0.011___distribution###0.010___time###0.009___install###0.009___faster###0.009___good###0.009___better###0.008___often###0.008___source###0.008___program###0.008___libc.so###0.008___sfio###0.008___seldom-used###0.008___misspelling###0.008___saving###0.008___buying###0.008___rebuilding###0.008___intensive###0.008___microtuning###0.008___pearls###0.008___benchmarking###0.008___autoloader###0.008___allege###0.008___dramatic###0.008___eolunsubstantiated###0.008___come_up###0.008___autosplit###0.008___libc###0.008___mechanisms###0.008___tips###0.008___outperform###0.008___optimizing###0.008___bottlenecks###0.008___assembler###0.008___optimization###0.008___bentley's###0.008___thank_you###0.008___look_for###0.008___boils###0.008___already-compiled###0.008___locate###0.008___speed_up###0.008___wins###0.008___programs###0.007___eol###0.007___part###0.007___bigger###0.007___advice###0.007___autoload###0.007___gain###0.007___execution###0.007___critical###0.007___interpreters###0.007___backend###0.007___amount###0.007___obvious###0.007___produce###0.007___profile###0.007___rewriting###0.007___undump###0.007___viable###0.007___jon###0.007___modules###0.007___benefit###0.006___selecting###0.006___bottleneck###0.006___disk###0.006___benchmark###0.006___sections###0.006___think_about###0.006___compiling###0.006___worked###0.006___worth###0.006___pdl###0.006___storing###0.006___architectures###0.006___static###0.006___performance###0.006___option###0.006___hardware###0.006___wasn't###0.006___similar###0.006___algorithms###0.006___for_instance###0.006___may###0.006___linking###0.006___shared###0.006___down###0.006___link###0.006___attempt###0.006___anyway###0.006___you're###0.005___no_longer###0.005___applications###0.005___save###0.005___hope###0.005___a_few###0.005___reports###0.005___certainly###0.005___programmers###0.005___fails###0.005___algorithm###0.005___you'd###0.005___byte###0.005___especially###0.005___used_to###0.005___book###0.005___small###0.005___consider###0.005___currently###0.005___make_sure###0.005___aren't###0.004___programming###0.004___eola###0.004___compile###0.004___section###0.004___form###0.004___writing###0.004___right###0.004___sometimes###0.004___difference###0.004___best###0.004___cases###0.004___run###0.004___solution###0.004___instead_of###0.004___question###0.004___that's###0.004___eolin###0.004___instead###0.004___approach###0.004___different###0.004___written###0.004___information###0.003___try###0.003___write###0.003___standard###0.003___eolthe###0.003___don't###0.003___file###0.002___eolif###0.002___cpan###0.002___module###0.002___
50:52###0.20,123###0.16,117###0.14,7###0.12,116###0.11,2###0.11,105###0.11,266###0.11,57###0.11,250###0.10:How can I make my Perl program take less memory?  EOL EOL:When it comes to time-space tradeoffs, Perl nearly always prefers to throw memory at a problem. Scalars in Perl use more memory than strings in C, arrays take more than that, and hashes use even more. While there's still a lot to be done, recent releases have been addressing these issues. For example, as of 5.004, duplicate hash keys are shared amongst all hashes using them, so require no reallocation. EOL EOLIn some cases, using substr() or vec() to simulate arrays can be highly beneficial. For example, an array of a thousand booleans will take at least 20,000 bytes of space, but it can be turned into one 125-byte bit vector--a considerable memory savings. The standard Tie!:!:SubstrHash module can also help for certain types of data structure. If you're working with specialist data structures (matrices, for instance) modules that implement these in C may use less memory than equivalent Perl modules. EOL EOLAnother thing to try is learning whether your Perl was compiled with the system malloc or with Perl's builtin malloc. Whichever one it is, try using the other one and see whether this makes a difference. Information about malloc is in the INSTALL file in the source distribution. You can find out whether you are using perl's malloc by typing perl - V!:usemymalloc. EOL EOL:structure###0.00990___organisation###0.00990___platform###0.07921___information###0.00990___adp_system###0.00990___written_document###0.00990___papers###0.00990___education###0.00990___computer_system###0.00990___adps###0.00990___educational_activity###0.00990___organization###0.00990___political_platform###0.07921___pedagogy###0.00990___construction###0.00990___syllabus###0.07921___shoe###0.00990___horizontal_surface###0.00990___computing_system###0.00990___instruction###0.00990___arrangement###0.00990___show###0.00990___message###0.00990___drawing###0.00990___broadcast###0.07921___teaching###0.00990___document###0.00990___program###0.15842___course_of_study###0.07921___curriculum###0.07921___system###0.00990___automatic_data_processing_system###0.00990___thought###0.00990___plan###0.07921___idea###0.00990___info###0.00990___level###0.00990:how###1.00000:how can###1.00000:malloc###0.046___memory###0.040___whether###0.018___using###0.017___perl###0.016___less###0.015___hashes###0.015___arrays###0.014___perl's###0.013___considerable###0.013___booleans###0.013___a_thousand###0.013___beneficial###0.013___usemymalloc###0.013___turned###0.013___time-space###0.013___substrhash###0.013___specialist###0.013___savings###0.013___reallocation###0.013___amongst###0.013___addressing###0.013___one###0.012___try###0.012___vector###0.011___matrices###0.011___issues###0.011___prefers###0.011___data_structure###0.011___simulate###0.011___tradeoffs###0.011___typing###0.011___for_example###0.011___modules###0.011___vec###0.010___types###0.010___for_certain###0.010___throw###0.010___learning###0.010___implement###0.010___for_instance###0.010___highly###0.010___whichever###0.010___tie###0.009___builtin###0.009___shared###0.009___eolanother###0.009___duplicate###0.009___nearly###0.009___recent###0.009___scalars###0.009___working###0.009___file_in###0.009___substr###0.009___bytes###0.008___at_least###0.008___find_out###0.008___equivalent###0.008___structures###0.008___eol###0.008___space###0.008___releases###0.008___compiled###0.008___more_than###0.007___bit###0.007___comes###0.007___install###0.007___a_lot###0.007___thing###0.007___require###0.007___done###0.007___difference###0.007___there's###0.007___help###0.007___cases###0.007___source###0.007___makes###0.007___keys###0.007___you_are###0.007___eolin###0.006___always###0.006___strings###0.006___problem###0.006___data###0.006___information###0.006___array###0.006___even###0.006___hash###0.005___distribution###0.005___standard###0.005___system###0.005___may###0.004___you're###0.004___program###0.004___module###0.004___
51:183###0.25,134###0.25,210###0.24,205###0.23,58###0.23,149###0.23,101###0.22,100###0.22,165###0.21,108###0.20:Is it unsafe to return a pointer to local data?  EOL EOL:No, Perl's garbage collection system takes care of this. EOL EOL    sub makeone { EOLmy @a = ( 1 .. 10 ); EOLreturn \@a; EOL    } EOL EOL    for $i ( 1 .. 10 ) { EOL        push @many, makeone(); EOL    } EOL EOL    print $many[4][5], "\n"; EOL EOL    print "@many\n";  EOL EOL::::makeone###0.150___eol###0.122___garbage_collection###0.075___unsafe###0.075___pointer###0.075___print###0.054___care###0.049___push###0.047___eolreturn###0.046___takes###0.046___eolmy###0.043___local###0.039___perl's###0.039___data###0.037___return###0.035___sub###0.032___system###0.029___
52:50###0.20,153###0.13,242###0.11,163###0.10,211###0.10,250###0.10,200###0.09,256###0.09,123###0.09,177###0.08:How can I free an array or hash so my program shrinks?  EOL EOL:You can't. On most operating systems, memory allocated to a program can never be returned to the system. That's why long-running programs sometimes re-exec themselves. Some operating systems (notably, FreeBSD and Linux) allegedly reclaim large chunks of memory that is no longer used, but it doesn't appear to happen with Perl (yet). The Mac appears to be the only platform that will reliably (albeit, slowly) return memory to the OS. EOL EOLWe've had reports that on Linux (Redhat 5.1) on Intel, undef $scalar will return memory to the system, while on Solaris 2.6 it won't. In general, try it yourself and see. EOL EOLHowever, judicious use of my() on your variables will help make sure that they go out of scope so that Perl can free up that space for use in other parts of your program. A global variable, of course, never goes out of scope, so you can't get its space automatically reclaimed, although undef()ing and/or delete()ing it will achieve the same effect. In general, memory allocation and de-allocation isn't something you can or should be worrying about much in Perl, but even this capability (preallocation of data types) is in the works. EOL EOL:paraphernalia###0.01515___wearing_apparel###0.01515___gear###0.01515___regalia###0.12121___apparel###0.01515___clothing###0.01515___vesture###0.01515___appurtenances###0.01515___raiment###0.12121___clothes###0.01515___wear###0.01515___article_of_clothing###0.01515___hash###0.24242___finery###0.12121___array###0.24242:how###1.00000:how can###1.00000:memory###0.042___ing###0.024___linux###0.021___scope###0.019___operating###0.019___free###0.018___space###0.017___in_general###0.016___undef###0.014___program###0.014___re-exec###0.013___allegedly###0.013___allocated###0.013___allocation###0.013___preallocation###0.013___de-allocation###0.013___long-running###0.013___os.###0.013___intel###0.013___achieve###0.013___freebsd###0.013___reclaimed###0.013___shrinks###0.013___judicious###0.013___reclaim###0.013___redhat###0.013___return###0.012___systems###0.012___chunks###0.012___albeit###0.012___appears###0.012___eolwe've###0.012___go_out###0.012___effect###0.012___notably###0.012___platform###0.012___slowly###0.012___worrying###0.012___capability###0.012___solaris###0.011___types###0.011___mac###0.011___themselves###0.011___reliably###0.011___can't###0.010___system###0.010___and/or###0.010___goes###0.010___out_of###0.010___parts###0.009___no_longer###0.009___returned###0.009___happen###0.009___reports###0.009___automatically###0.009___eolhowever###0.009___appear###0.009___large###0.009___delete###0.008___global###0.008___it_will###0.008___eol###0.008___of_course###0.008___so_that###0.008___although###0.008___make_sure###0.008___perl###0.008___yourself###0.007___sometimes###0.007___help###0.007___works###0.007___that_is###0.007___variables###0.007___won't###0.007___that's###0.007___scalar###0.006___programs###0.006___data###0.006___array###0.006___even###0.006___try###0.006___isn't###0.006___used###0.006___variable###0.006___hash###0.006___something###0.005___why###0.005___doesn't###0.005___
53:272###0.20,60###0.18,55###0.17,273###0.15,12###0.14,48###0.14,284###0.13,49###0.12,47###0.12,39###0.11:How can I make my CGI script more efficient?  EOL EOL:Beyond the normal measures described to make general Perl programs faster or smaller, a CGI program has additional issues. It may be run several times per second. Given that each time it runs it will need to be re-compiled and will often allocate a megabyte or more of system memory, this can be a killer. Compiling into C isn't going to help you because the process start-up overhead is where the bottleneck is. EOL EOLThere are two popular ways to avoid this overhead. One solution involves running the Apache HTTP server (available from http!://www.apache.org/) with either of the mod_perl or mod_fastcgi plugin modules. EOL EOLWith mod_perl and the Apache!:!:Registry module (distributed with mod_perl), httpd will run with an embedded Perl interpreter which pre-compiles your script and then executes it within the same address space without forking. The Apache extension also gives Perl access to the internal server API, so modules written in Perl can do just about anything a module written in C can. For more on mod_perl, see http!://perl.apache.org/ EOL EOLWith the FCGI module (from CPAN) and the mod_fastcgi module (available from http!://www.fastcgi.com/) each of your Perl programs becomes a permanent CGI daemon process. EOL EOLBoth of these solutions can have far-reaching effects on your system and on the way you write your CGI programs, so investigate them with care. EOL EOLSee http!://www.perl.com/CPAN/modules/by-category/15_World_Wide_Web_HTML_HTTP_CGI/ . EOL EOLA non-free, commercial product, ``The Velocity Engine for Perl'', (http!://www.binevolve.com/ or http!:// www.binevolve.com/velocigen/ ) might also be worth looking at. It will allow you to increase the performance of your Perl programs, running programs up to 25 times faster than normal CGI Perl when running in persistent Perl mode or 4 to 5 times faster without any modification to your existing CGI programs. Fully functional evaluation copies are available from the web site. EOL EOL:laborer###0.01235___handsbreadth###0.01235___forepaw###0.01235___religious_writing###0.01235___production###0.01235___power###0.01235___collection###0.01235___pointer###0.01235___section###0.01235___sacred_writing###0.01235___book###0.09877___extremity###0.01235___accumulation###0.01235___hand###0.09877___card_player###0.01235___hand_clapping###0.01235___labourer###0.01235___fact###0.01235___sacred_text###0.01235___jack###0.01235___script###0.19753___handbreadth###0.01235___manual_laborer###0.01235___side###0.01235___aggregation###0.01235___dramatic_composition###0.01235___help###0.01235___religious_text###0.01235___assist###0.01235___applause###0.01235___assistance###0.01235___subdivision###0.01235___publication###0.01235___assemblage###0.01235___dramatic_work###0.01235___handwriting###0.09877___clapping###0.01235___writing###0.01235___aid###0.01235___sailor###0.01235___ability###0.01235___crewman###0.01235___product###0.01235___committal_to_writing###0.01235___record###0.01235:how###1.00000:how can###1.00000:mod_perl###0.034___cgi###0.029___apache###0.025___programs###0.025___overhead###0.017___mod_fastcgi###0.017___perl###0.015___running###0.015___faster###0.015___times###0.014___eolwith###0.013___server###0.011___it_will###0.011___available###0.011___module###0.010___normal###0.010___process###0.009___script###0.009___run###0.009___eol###0.009___without###0.008___written###0.008___fcgi###0.008___increase###0.008___re-compiled###0.008___killer###0.008___pre-compiles###0.008___given_that###0.008___plugin###0.008___permanent###0.008___involves###0.008___forking###0.008___http!://perl.apache.org/###0.008___additional###0.008___fully###0.008___non-free###0.008___http!://www.apache.org/)###0.008___far-reaching###0.008___http!://www.binevolve.com/###0.008___megabyte###0.008___measures###0.008___http!://www.fastcgi.com/)###0.008___http!://www.perl.com/cpan/modules/by-category/15_world_wide_web_html_http_cgi/###0.008___evaluation###0.008___start-up###0.008___velocity###0.008___just_about###0.008___www.binevolve.com###0.008___allocate###0.007___on_the_way###0.007___investigate###0.007___functional###0.007___modification###0.007___httpd###0.007___product###0.007___becomes###0.007___beyond###0.007___issues###0.007___registry###0.007___effects###0.007___smaller###0.007___modules###0.007___bottleneck###0.007___persistent###0.007___api###0.007___eolboth###0.007___web_site###0.007___worth###0.007___executes###0.007___compiling###0.007___system###0.006___up_to###0.006___engine###0.006___copies###0.006___address###0.006___looking_at###0.006___performance###0.006___popular###0.006___solutions###0.006___daemon###0.006___commercial###0.006___existing###0.006___within###0.006___allow###0.005___http###0.005___internal###0.005___going###0.005___embedded###0.005___efficient###0.005___mode###0.005___distributed###0.005___interpreter###0.005___gives###0.005___care###0.005___eolthere###0.005___space###0.005___extension###0.005___runs###0.005___memory###0.005___anything###0.005___second###0.005___general###0.005___described###0.005___eola###0.005___ways###0.005___and_then###0.005___http!://###0.005___avoid###0.004___access###0.004___eolsee###0.004___help###0.004___several###0.004___often###0.004___solution###0.004___either###0.004___isn't###0.004___two###0.003___write###0.003___time###0.003___need###0.003___may###0.003___program###0.003___cpan###0.002___one###0.002___
54:55###0.12,60###0.11,272###0.09,256###0.09,57###0.09,12###0.09,9###0.08,49###0.08,4###0.08,172###0.08:How can I hide the source for my Perl program?  EOL EOL:Delete it. !:-) Seriously, there are a number of (mostly unsatisfactory) solutions with varying levels of ``security''. EOL EOLFirst of all, however, you can't take away read permission, because the source code has to be readable in order to be compiled and interpreted. (That doesn't mean that a CGI script's source is readable by people on the web, though--only by people with access to the filesystem.) So you have to leave the permissions at the socially friendly 0755 level. EOL EOLSome people regard this as a security problem. If your program does insecure things and relies on people not knowing how to exploit those insecurities, it is not secure. It is often possible for someone to determine the insecure things and exploit them without viewing the source. Security through obscurity, the name for hiding your bugs instead of fixing them, is little security indeed. EOL EOLYou can try using encryption via source filters (Filter!:!:* from CPAN), but any decent programmer will be able to decrypt it. You can try using the byte code compiler and interpreter described below, but the curious might still be able to de- compile it. You can try using the native-code compiler described below, but crackers might be able to disassemble it. These pose varying degrees of difficulty to people wanting to get at your code, but none can definitively conceal it (true of every language, not just Perl). EOL EOLIf you're concerned about people profiting from your code, then the bottom line is that nothing but a restrictive license will give you legal security. License your software and pepper it with threatening statements like ``This is unpublished proprietary software of XYZ Corp. Your access to it does not give you permission to use it blah blah blah.'' We are not lawyers, of course, so you should see a lawyer if you want to be sure your license's wording will stand up in court. EOL EOL:filiation###0.00592___point_in_time###0.00592___verbaliser###0.00592___humor###0.00592___immobility###0.00592___recommendation###0.00592___happening###0.00592___structure###0.00592___participant###0.00592___ancestry###0.00592___section###0.00592___perceiver###0.00592___origin###0.04734___microorganism###0.00592___bodily_fluid###0.00592___book###0.00592___word_form###0.00592___utterer###0.00592___reference###0.04734___annotation###0.00592___relative###0.00592___beginning###0.04734___setup###0.00592___remark###0.00592___natural_event###0.00592___inspiration###0.00592___occurrence###0.00592___genealogy###0.00592___indicator###0.00592___ovule###0.00592___relation###0.00592___observer###0.00592___signifier###0.00592___stationariness###0.00592___testimonial###0.00592___comment###0.00592___talker###0.00592___set###0.00592___plant_organ###0.00592___derivation###0.00592___complex_body_part###0.00592___communicator###0.00592___humour###0.00592___generator###0.04734___lineage###0.00592___root###0.04734___speaker###0.00592___fixedness###0.00592___fruit###0.00592___action###0.00592___rootage###0.04734___source###0.09467___germ###0.04734___apparatus###0.00592___beholder###0.00592___good_word###0.00592___form###0.00592___publication###0.00592___number###0.00592___substance###0.00592___verbalizer###0.00592___player###0.00592___electronic_device###0.00592___system###0.00592___informant###0.04734___liquid_body_substance###0.00592___family_tree###0.00592___body_fluid###0.00592___change_of_state###0.00592___division###0.00592___shaper###0.00592___notation###0.00592___part###0.00592___point###0.00592___meaning###0.00592___bodily_structure###0.00592___engine###0.00592___maker###0.00592___anatomical_structure###0.00592___body_structure###0.00592___seed###0.04734___author###0.04734___intersection###0.00592___note###0.00592:how###1.00000:how can###1.00000:people###0.028___security###0.026___blah###0.024___able###0.018___source###0.017___permission###0.016___exploit###0.016___readable###0.016___license###0.013___varying###0.013___insecure###0.013___try###0.011___compiler###0.011___below###0.011___software###0.010___described###0.010___give###0.010___access###0.009___code###0.009___using###0.008___threatening###0.008___court###0.008___levels###0.008___eolfirst###0.008___take_away###0.008___disassemble###0.008___curious###0.008___bottom_line###0.008___stand_up###0.008___decrypt###0.008___obscurity###0.008___restrictive###0.008___regard###0.008___indeed###0.008___insecurities###0.008___friendly###0.008___license's###0.008___profiting###0.008___conceal###0.008___pose###0.008___filters###0.008___lawyer###0.008___lawyers###0.008___unsatisfactory###0.008___difficulty###0.008___unpublished###0.008___definitively###0.008___socially###0.008___fixing###0.008___pepper###0.008___to_be_sure###0.008___viewing###0.008___we_are###0.008___wording###0.008___xyz###0.008___things###0.008___crackers###0.007___get_at###0.007___filter###0.007___corp.###0.007___concerned###0.007___encryption###0.007___degrees###0.007___legal###0.007___seriously###0.007___statements###0.007___decent###0.007___hide###0.007___hiding###0.007___knowing###0.007___eol###0.007___in_order###0.006___native-code###0.006___filesystem###0.006___script's###0.006___level###0.006___secure###0.006___wanting###0.006___relies###0.006___none###0.006___programmer###0.006___to_it###0.006___little###0.006___solutions###0.006___mostly###0.006___leave###0.006___permissions###0.006___interpreted###0.005___someone###0.005___source_code###0.005___bugs###0.005___eolsome###0.005___proprietary###0.005___program###0.005___delete###0.005___nothing###0.005___interpreter###0.005___byte###0.005___every###0.005___determine###0.005___of_course###0.005___compiled###0.005___true###0.005___compile###0.005___possible###0.004___web###0.004___though###0.004___however###0.004___does_not###0.004___language###0.004___cgi###0.004___mean###0.004___often###0.004___instead_of###0.004___name###0.004___eolyou###0.004___problem###0.004___without###0.004___is_not###0.004___number###0.003___you_have###0.003___read###0.003___perl###0.003___can't###0.003___doesn't###0.003___you're###0.002___eolif###0.002___cpan###0.002___
55:49###0.31,53###0.17,48###0.17,12###0.13,54###0.12,39###0.12,266###0.12,10###0.11,57###0.10,225###0.10:How can I compile my Perl program into byte code or C?  EOL EOL:Malcolm Beattie has written a multifunction backend compiler, available from CPAN, that can do both these things. It is included in the perl5.005 release, but is still considered experimental. This means it's fun to play with if you're a programmer but not really for people looking for turn-key solutions. EOL EOLMerely compiling into C does not in and of itself guarantee that your code will run very much faster. That's because except for lucky cases where a lot of native type inferencing is possible, the normal Perl run-time system is still present and so your program will take just as long to run and be just as big. Most programs save little more than compilation time, leaving execution no more than 10-30% faster. A few rare programs actually benefit significantly (even running several times faster), but this takes some tweaking of your code. EOL EOLYou'll probably be astonished to learn that the current version of the compiler generates a compiled form of your script whose executable is just as big as the original perl executable, and then some. That's because as currently written, all programs are prepared for a full eval() statement. You can tremendously reduce this cost by building a shared libperl.so library and linking against that. See the INSTALL podfile in the Perl source distribution for details. If you link your main perl binary with this, it will make it minuscule. For example, on one author's system, /usr/bin/perl is only 11k in size!! EOL EOLIn general, the compiler will do nothing to make a Perl program smaller, faster, more portable, or more secure. In fact, it can make your situation worse. The executable will be bigger, your VM system may take longer to load the whole thing, the binary is fragile and hard to fix, and compilation never stopped software piracy in the form of crackers, viruses, or bootleggers. The real advantage of the compiler is merely packaging, and once you see the size of what it makes (well, unless you use a shared libperl.so), you'll probably want a complete Perl install anyway. EOL EOL:structure###0.00990___organisation###0.00990___platform###0.07921___information###0.00990___adp_system###0.00990___written_document###0.00990___papers###0.00990___education###0.00990___computer_system###0.00990___adps###0.00990___educational_activity###0.00990___organization###0.00990___political_platform###0.07921___pedagogy###0.00990___construction###0.00990___syllabus###0.07921___shoe###0.00990___horizontal_surface###0.00990___computing_system###0.00990___instruction###0.00990___arrangement###0.00990___show###0.00990___message###0.00990___drawing###0.00990___broadcast###0.07921___teaching###0.00990___document###0.00990___program###0.15842___course_of_study###0.07921___curriculum###0.07921___system###0.00990___automatic_data_processing_system###0.00990___thought###0.00990___plan###0.07921___idea###0.00990___info###0.00990___level###0.00990:how###1.00000:how can###1.00000:compiler###0.021___executable###0.021___faster###0.018___just_as###0.018___libperl.so###0.015___compilation###0.013___size###0.011___shared###0.011___programs###0.011___perl###0.011___install###0.009___binary###0.009___form###0.009___system###0.009___code###0.008___run###0.008___that's###0.008___program###0.008___written###0.007___author's###0.007___bootleggers###0.007___significantly###0.007___podfile###0.007___piracy###0.007___packaging###0.007___beattie###0.007___inferencing###0.007___multifunction###0.007___minuscule###0.007___and_then_some###0.007___viruses###0.007___eolmerely###0.007___very_much###0.007___astonished###0.007___tweaking###0.007___turn-key###0.007___in_and_of_itself###0.007___fragile###0.007___cost###0.007___malcolm###0.007___worse###0.007___whole_thing###0.007___play###0.007___bigger###0.007___tremendously###0.007___crackers###0.007___backend###0.007___lucky###0.007___leaving###0.007___execution###0.007___stopped###0.007___load###0.007___smaller###0.007___secure###0.006___experimental###0.006___fun###0.006___advantage###0.006___situation###0.006___and_so###0.006___compiling###0.006___benefit###0.006___considered###0.006___longer###0.006___native###0.006___no_more###0.006___prepared###0.006___present###0.006___rare###0.006___run-time###0.006___probably###0.006___programmer###0.006___little###0.006___reduce###0.006___except_for###0.006___generates###0.006___eol###0.005___anyway###0.005___link###0.005___linking###0.005___solutions###0.005___full###0.005___included###0.005___building###0.005___whose###0.005___fix###0.005___eolyou'll###0.005___save###0.005___guarantee###0.005___usr/bin/perl###0.005___a_few###0.005___make_it###0.005___against###0.005___looking_for###0.005___long###0.005___in_fact###0.005___merely###0.005___original###0.005___main###0.005___statement###0.005___it_will###0.005___byte###0.005___software###0.005___nothing###0.005___compiled###0.005___hard###0.005___eval###0.005___library###0.005___normal###0.004___perl5###0.004___general###0.004___real###0.004___takes###0.004___currently###0.004___compile###0.004___portable###0.004___type###0.004___running###0.004___more_than###0.004___actually###0.004___once###0.004___possible###0.004___learn###0.004___complete###0.004___unless###0.004___does_not###0.004___a_lot###0.004___people###0.004___times###0.004___means###0.004___script###0.004___cases###0.004___several###0.004___source###0.004___makes###0.004___release###0.004___eolin###0.004___current###0.004___things###0.003___version###0.003___details###0.003___even###0.003___you'll###0.003___really###0.003___for_example###0.003___available###0.003___distribution###0.003___time###0.003___it's###0.003___may###0.003___you're###0.002___cpan###0.002___one###0.002___
56:8###0.10,31###0.10,11###0.10,24###0.09,33###0.09,58###0.09,2###0.09,266###0.09,261###0.08,36###0.08:How can I compile Perl into Java?  EOL EOL:You can also integrate Java and Perl with the Perl Resource Kit from O'Reilly and Associates. See http!:// www.oreilly.com/catalog/prkunix/ . EOL EOLPerl 5.6 comes with Java Perl Lingo, or JPL. JPL, still in development, allows Perl code to be called from Java. See jpl/ README in the Perl source tree. EOL EOL:potable###0.03125___brownness###0.03125___beverage###0.03125___drinkable###0.03125___coffee###0.25000___tree###0.03125___java###0.50000___brown###0.03125___drink###0.03125___seed###0.03125:how###1.00000:how can###1.00000:java###0.153___jpl###0.139___perl###0.057___lingo###0.046___integrate###0.046___tree###0.046___www.oreilly.com###0.046___kit###0.041___associates###0.041___readme###0.038___resource###0.038___o'reilly###0.033___allows###0.033___eolperl###0.032___comes###0.028___compile###0.028___http!://###0.027___development###0.027___eol###0.025___source###0.025___called###0.025___code###0.017___
57:17###0.16,266###0.16,32###0.14,58###0.12,16###0.12,248###0.12,11###0.11,49###0.11,53###0.11,50###0.11:How can I get #!!perl to work on [MS-DOS,NT,...]?  EOL EOL:For OS/2 just use EOL EOL    extproc perl -S -your_switches  EOL EOLas the first line in *.cmd file (-S due to a bug in cmd.exe's `extproc' handling). For DOS one should first invent a corresponding batch file and codify it in ALTERNATIVE_SHEBANG (see the INSTALL file in the source distribution for more information). EOL EOLThe Win95/NT installation, when using the ActiveState port of Perl, will modify the Registry to associate the .pl extension with the perl interpreter. If you install another port, perhaps even building your own Win95/NT Perl from the standard sources by using a Windows port of gcc (e.g., with cygwin or mingw32), then you'll have to modify the Registry yourself. In addition to associating .pl with the interpreter, NT people can use!: SET PATHEXT=%PATHEXT%;.PL to let them run the program install-linux.pl merely by typing install- linux. EOL EOLMacintosh Perl programs will have the appropriate Creator and Type, so that double-clicking them will invoke the Perl application. EOL EOLIMPORTANT!!!: Whatever you do, PLEASE don't get frustrated, and just throw the perl interpreter into your cgi-bin directory, in order to get your programs working for a web server. This is an EXTREMELY big security risk. Take the time to figure out how to do it correctly. EOL EOL:ms-dos###0.61538___Microsoft_disk_operating_system###0.30769___disk_operating_system###0.03846___dos###0.03846:how###1.00000:how can###1.00000:port###0.025___extproc###0.025___pathext###0.025___interpreter###0.025___install###0.023___registry###0.022___win95/nt###0.022___perl###0.020___cmd###0.019___modify###0.018___eol###0.013___eolmacintosh###0.012___alternative_shebang###0.012___eolimportant###0.012___invent###0.012___mingw32###0.012___batch###0.012___frustrated###0.012___figure_out###0.012___your_switches###0.012___invoke###0.012___exe's###0.012___cgi-bin###0.012___associate###0.012___install-linux.pl###0.012___associating###0.012___codify###0.012___double-clicking###0.012___programs###0.012___installation###0.011___activestate###0.011___cygwin###0.011___handling###0.011___typing###0.011___creator###0.011___first###0.011___throw###0.010___eolas###0.010___in_order###0.010___gcc###0.010___in_addition_to###0.010___os/2###0.010___linux###0.009___extremely###0.009___risk###0.009___corresponding###0.009___due_to###0.009___dos###0.009___appropriate###0.009___sources###0.009___building###0.009___e.g.###0.009___ms-dos###0.009___working###0.009___application###0.009___file###0.009___work_on###0.008___file_in###0.008___using###0.008___server###0.008___please###0.008___merely###0.008___windows###0.008___correctly###0.008___security###0.008___perhaps###0.008___extension###0.008___whatever###0.008___so_that###0.007___type###0.007___bug###0.007___do_it###0.007___web###0.007___directory###0.007___people###0.007___yourself###0.007___own###0.007___run###0.006___source###0.006___set###0.006___information###0.006___even###0.006___you'll###0.006___line###0.005___distribution###0.005___standard###0.005___time###0.005___eolthe###0.005___don't###0.004___program###0.004___one###0.004___
58:183###0.26,51###0.23,141###0.21,161###0.21,59###0.20,165###0.20,210###0.19,100###0.19,205###0.19,175###0.18:Can I write useful Perl programs on the command line?  EOL EOL:Yes. Read perlrun for more information. Some examples follow. (These assume standard Unix shell quoting rules.) EOL EOL    # sum first and last fields EOL    perl -lane 'print $F[0] + $F[-1]' * EOL EOL    # identify text files EOL    perl -le 'for(@ARGV) {print if -f && -T _}' * EOL EOL    # remove (most) comments from C program EOL    perl -0777 -pe 's{/\*.*?\*/}{}gs' foo.c EOL EOL    # make file a month younger than today, defeating reaper daemons EOL    perl -e '$X=24*60*60; utime(time(),time() + 30 * $X,@ARGV)' * EOL EOL    # find first unused uid EOL    perl -le '$i++ while getpwuid($i); print $i' EOL EOL    # display reasonable manpath EOL    echo $PATH | perl -nl -072 -e ' EOLs!![^/+]*$!!man!!&&-d&&!!$s{$_}++&&push@m,$_;END{print"@m"}'  EOL EOLOK, the last one was actually an Obfuscated Perl Contest entry. !:-) EOL EOL::::eol###0.052___argv###0.034___perl###0.034___print###0.030___lane###0.021___defeating###0.021___daemons###0.021___today###0.021___first_and_last###0.021___eolok###0.021___identify###0.021___unused###0.021___younger###0.021___sum###0.018___rules###0.018___reasonable###0.018___reaper###0.018___display###0.018___manpath###0.018___uid###0.018___utime###0.018___getpwuid###0.018___month###0.017___eols###0.017___obfuscated###0.017___contest###0.017___time###0.017___fields###0.016___perlrun###0.016___c_program###0.016___echo###0.016___entry###0.015___man###0.015___quoting###0.015___command_line###0.015___assume###0.015___comments###0.014___follow###0.014___path###0.014___remove###0.013___push###0.013___useful###0.013___foo###0.012___actually###0.012___examples###0.012___last###0.011___shell###0.011___unix###0.011___information###0.010___programs###0.010___find###0.010___files###0.010___text###0.010___first###0.009___write###0.009___standard###0.008___read###0.008___file###0.007___one###0.006___
59:58###0.20,42###0.17,205###0.17,183###0.16,51###0.15,100###0.14,233###0.14,165###0.14,175###0.14,217###0.13:Why don't Perl one-liners work on my DOS/Mac/VMS system?  EOL EOL:The problem is usually that the command interpreters on those systems have rather different ideas about quoting than the Unix shells under which the one-liners were created. On some systems, you may have to change single-quotes to double ones, which you must NOT do on Unix or Plan9 systems. You might also have to change a single % to a %%. EOL EOLFor example!: EOL EOL    # Unix EOL    perl -e 'print "Hello world\n"' EOL EOL    # DOS, etc. EOL    perl -e "print \"Hello world\n\"" EOL EOL    # Mac EOL    print "Hello world\n" EOL     (then Run "Myscript" or Shift-Command-R) EOL EOL    # VMS EOL    perl -e "print ""Hello world\n"""  EOL EOLThe problem is that none of these examples are reliable!: they depend on the command interpreter. Under Unix, the first two often work. Under DOS, it's entirely possible that neither works. If 4DOS was the command shell, you'd probably have better luck like this!: EOL EOL  perl -e "print <Ctrl-x>"Hello world\n<Ctrl-x>""  EOL EOLUnder the Mac, it depends which environment you are using. The MacPerl shell, or MPW, is much like Unix shells in its support for several quoting variants, except that it makes free use of the Mac's non-ASCII characters as control characters. EOL EOLUsing qq(), q(), and qx(), instead of "double quotes", 'single quotes', and `backticks`, may make one-liners easier to write. EOL EOLThere is no general solution to all of this. It is a mess, pure and simple. Sucks to be away from Unix, huh? !:-) EOL EOL[Some of this answer was contributed by Kenneth Albanowski.] EOL EOL:wheeze###0.03226___yak###0.03226___gag###0.03226___one-liner###0.25806___joke###0.03226___laugh###0.03226___one-liners###0.51613___jape###0.03226___jest###0.03226:why###1.00000:why don't###1.00000:hello###0.047___world###0.042___unix###0.034___eol###0.030___one-liners###0.028___ctrl-x###0.021___print###0.019___shells###0.019___command###0.018___mac###0.017___dos###0.016___quoting###0.016___systems###0.014___single###0.013___shell###0.011___change###0.011___problem###0.011___characters###0.011___perl###0.011___kenneth###0.010___single-quotes###0.010___huh###0.010___shift-command-r###0.010___entirely###0.010___away_from###0.010___pure_and_simple###0.010___eolunder###0.010___plan9###0.010___dos/mac/vms###0.010___ideas###0.010___luck###0.010___variants###0.010___except_that###0.010___mac's###0.010___non-ascii###0.010___myscript###0.010___albanowski###0.010___sucks###0.010___eolusing###0.009___contributed###0.009___depend_on###0.009___mpw###0.009___mess###0.009___interpreters###0.009___double_quotes###0.009___quotes###0.008___vms###0.008___all_of###0.008___macperl###0.008___none###0.008___reliable###0.008___may###0.008___backticks###0.008___rather###0.008___depends###0.007___environment###0.007___work_on###0.007___created###0.007___free###0.007___easier###0.007___double###0.007___eolthere###0.007___you'd###0.007___etc.###0.007___interpreter###0.007___neither###0.007___control###0.006___general###0.006___ones###0.006___possible###0.006___examples###0.006___answer###0.006___usually###0.006___works###0.005___support###0.005___better###0.005___several###0.005___solution###0.005___often###0.005___run###0.005___instead_of###0.005___makes###0.005___you_are###0.005___eolfor###0.005___different###0.005___example###0.005___two###0.004___work###0.004___first###0.004___write###0.004___why###0.004___probably###0.004___eolthe###0.004___system###0.004___it's###0.004___don't###0.004___using###0.003___
60:272###0.71,284###0.25,273###0.22,183###0.21,282###0.21,205###0.20,24###0.19,278###0.19,53###0.18,165###0.18:Where can I learn about CGI or Web programming in Perl?  EOL EOL:For modules, get the CGI or LWP modules from CPAN. For textbooks, see the two especially dedicated to web stuff in the question on books. For problems and questions related to the web, like ``Why do I get 500 Errors'' or ``Why doesn't it run from the browser right when it runs fine on the command line'', see these sources!: EOL EOL    WWW Security FAQ EOL        http!://www.w3.org/Security/Faq/ EOL EOL    Web FAQ EOL        http!://www.boutell.com/faq/ EOL EOL    CGI FAQ EOL        http!://www.webthing.com/tutorials/cgifaq.html EOL EOL    HTTP Spec EOL        http!://www.w3.org/pub/WWW/Protocols/HTTP/ EOL EOL    HTML Spec EOL        http!://www.w3.org/TR/REC-html40/ EOL        http!://www.w3.org/pub/WWW/MarkUp/ EOL EOL    CGI Spec EOL        http!://www.w3.org/CGI/ EOL EOL    CGI Security FAQ EOL        http!://www.go2net.com/people/paulp/cgi-security/safe-cgi.txt  EOL EOL:communication_system###0.01786___trap###0.01786___blade###0.01786___computer_network###0.01786___network###0.14286___entanglement###0.14286___WWW###0.14286___communication_equipment###0.01786___system###0.01786___rotating_mechanism###0.01786___web###0.28571___mechanical_device###0.01786___vane###0.14286:where###1.00000:where can###1.00000:cgi###0.071___eol###0.069___web###0.059___spec###0.058___faq###0.056___security###0.032___textbooks###0.024___http!://www.w3.org/cgi/###0.022___http!://www.go2net.com/people/paulp/cgi-security/safe-cgi.txt###0.022___http!://www.w3.org/pub/www/protocols/http/###0.022___http!://www.w3.org/security/faq/###0.022___http!://www.w3.org/pub/www/markup/###0.022___http!://www.boutell.com/faq/###0.022___http!://www.w3.org/tr/rec-html40/###0.022___http!://www.webthing.com/tutorials/cgifaq.html###0.022___errors###0.022___modules###0.021___why###0.021___dedicated###0.020___books###0.019___related_to###0.019___www###0.019___sources###0.018___lwp###0.018___browser###0.017___fine###0.017___command_line###0.017___http###0.017___questions###0.016___stuff###0.016___especially###0.016___runs###0.015___programming###0.015___problems###0.015___learn###0.014___html###0.014___right###0.014___run###0.013___question###0.013___two###0.011___doesn't###0.009___cpan###0.008___perl###0.005___
61:206###0.29,202###0.14,278###0.13,221###0.12,131###0.11,240###0.11,183###0.11,23###0.11,215###0.10,219###0.10:Where can I learn about object-oriented Perl programming?  EOL EOL:A good place to start is perltoot, and you can use perlobj, perlboot, and perlbot for reference. Perltoot didn't come out until the 5.004 release; you can get a copy (in pod, html, or postscript) from http!://www.perl.com/CPAN/doc/ FMTEYEWTK/ . EOL EOL::where###1.00000:where can###1.00000:perltoot###0.078___http!://www.perl.com/cpan/doc/###0.059___postscript###0.059___fmteyewtk###0.059___perlboot###0.053___come_out###0.053___pod###0.053___perlbot###0.053___object-oriented###0.046___perlobj###0.046___didn't###0.042___copy###0.041___until###0.040___programming###0.036___learn###0.035___place###0.035___start###0.034___reference###0.034___html###0.034___good###0.033___release###0.031___eol###0.025___perl###0.012___
62:243###0.26,202###0.23,34###0.15,63###0.13,244###0.11,7###0.11,183###0.09,240###0.09,264###0.08,60###0.08:Where can I learn about linking C with Perl? [h2xs, xsubpp]  EOL EOL:If you want to call C from Perl, start with perlxstut, moving on to perlxs, xsubpp, and perlguts. If you want to call Perl from C, then read perlembed, perlcall, and perlguts. Don't forget that you can learn a lot from looking at how the authors of existing extension modules wrote their code and solved their problems. EOL EOL:light_speed###0.13793___layer###0.01724___hundred###0.13793___precipitation###0.01724___constant###0.01724___c###0.27586___downfall###0.01724___large_integer###0.01724___speed###0.01724___speed_of_light###0.13793___hard_drug###0.01724___writer###0.01724___snow###0.13793___velocity###0.01724___author###0.01724:where###1.00000:where can###1.00000:xsubpp###0.079___perlguts###0.074___learn###0.053___call###0.046___solved###0.044___moving###0.044___perlxs###0.039___wrote###0.039___perlcall###0.039___on_to###0.037___perlembed###0.035___h2xs###0.035___authors###0.035___looking_at###0.035___forget###0.033___linking###0.033___perlxstut###0.032___existing###0.032___extension###0.028___perl###0.027___problems###0.027___start###0.026___a_lot###0.026___modules###0.019___eol###0.019___read###0.018___don't###0.017___code###0.016___
63:32###0.18,62###0.13,266###0.11,58###0.08,210###0.08,48###0.08,7###0.07,257###0.07,65###0.07,34###0.07:I've read perlembed, perlguts, etc., but I can't embed perl in my C program; what am I doing wrong?  EOL EOL:Download the ExtUtils!:!:Embed kit from CPAN and run `make test'. If the tests pass, read the pods again and again and again. If they fail, see perlbug and send a bug report with the output of make test TEST_VERBOSE=1 along with perl -V. EOL EOL::what###1.00000:what am###1.00000:embed###0.073___test###0.057___again_and_again###0.041___i've###0.041___test_verbose###0.041___pods###0.041___kit###0.036___perlbug###0.036___along_with###0.036___report###0.034___fail###0.034___download###0.034___perlguts###0.034___read###0.033___perlembed###0.032___c_program###0.032___extutils###0.032___tests###0.032___again###0.029___pass###0.028___etc.###0.026___send###0.026___doing###0.026___bug###0.025___output###0.022___wrong###0.022___run###0.022___eol###0.017___perl###0.016___can't###0.016___cpan###0.013___
64:48###0.15,273###0.15,221###0.14,183###0.13,201###0.13,205###0.13,101###0.12,51###0.12,28###0.12,99###0.12:When I tried to run my script, I got this message. What does it mean?   EOL EOL:A complete list of Perl's error messages and warnings with explanatory text can be found in perldiag. You can also use the splain program (distributed with Perl) to explain the error messages!: EOL EOL    perl program 2>diag.out EOL    splain [-v] [-p] diag.out  EOL EOLor change your program to explain the messages for you!: EOL EOL    use diagnostics;  EOL EOLor EOL EOL    use diagnostics -verbose;  EOL EOL:noesis###0.00714___laborer###0.00714___handsbreadth###0.00714___component###0.00714___communication###0.00714___forepaw###0.00714___religious_writing###0.00714___production###0.00714___collection###0.00714___power###0.00714___pointer###0.00714___section###0.00714___sacred_writing###0.00714___book###0.05714___extremity###0.00714___accumulation###0.00714___hand###0.05714___card_player###0.00714___portion###0.00714___hand_clapping###0.00714___acceptance###0.00714___labourer###0.00714___fact###0.00714___sacred_text###0.00714___jack###0.00714___script###0.11429___knowledge###0.00714___handbreadth###0.00714___manual_laborer###0.00714___side###0.00714___aggregation###0.00714___component_part###0.00714___dramatic_composition###0.00714___help###0.00714___capital###0.00714___message###0.11429___religious_text###0.00714___cognitive_content###0.00714___proportion###0.00714___assist###0.00714___applause###0.00714___assistance###0.00714___subdivision###0.00714___physical_thing###0.00714___publication###0.00714___mental_object###0.00714___substance###0.05714___assemblage###0.00714___dramatic_work###0.00714___entity###0.00714___handwriting###0.05714___thought###0.00714___volume###0.00714___clapping###0.00714___writing###0.00714___aid###0.00714___ability###0.00714___sailor###0.00714___crewman###0.00714___proportionality###0.00714___idea###0.00714___product###0.00714___part###0.00714___subject_matter###0.05714___committal_to_writing###0.00714___record###0.00714___cognition###0.00714___content###0.05714:when###0.50000___what###0.50000:what does###0.50000___when i###0.50000:messages###0.092___diagnostics###0.078___splain###0.078___diag###0.078___explain###0.065___eol###0.055___error###0.046___program###0.041___explanatory###0.039___perldiag###0.039___eolor###0.037___verbose###0.034___tried###0.030___warnings###0.026___distributed###0.025___message###0.025___complete###0.023___mean###0.022___script###0.021___run###0.021___change###0.020___perl's###0.020___found###0.020___text###0.018___list###0.017___perl###0.016___
65:266###0.33,202###0.20,244###0.18,255###0.11,132###0.11,205###0.11,58###0.11,268###0.10,88###0.10,289###0.10:What's MakeMaker?  EOL EOL:This module (part of the standard Perl distribution) is designed to write a Makefile for an extension module from a Makefile.PL. For more information, see ExtUtils!:!:MakeMaker. EOL EOL::what###1.00000:what's makemaker###1.00000:makemaker###0.169___makefile###0.102___makefile.pl###0.084___extutils###0.080___designed###0.080___extension###0.065___module###0.064___what's###0.057___information###0.050___part###0.046___eol###0.044___distribution###0.044___write###0.044___standard###0.042___perl###0.021___
66:70###0.16,69###0.16,74###0.16,149###0.15,68###0.12,67###0.10,82###0.10,133###0.09,18###0.09,224###0.08:Why am I getting long decimals (eg, 19.9499999999999) instead of the numbers I should be getting (eg, 19.95)?  EOL EOL:The infinite set that a mathematician thinks of as the real numbers can only be approximated on a computer, since the computer only has a finite number of bits to store an infinite number of, um, numbers. EOL EOLInternally, your computer represents floating-point numbers in binary. Floating-point numbers read in from a file or appearing as literals in your program are converted from their decimal floating-point representation (eg, 19.95) to an internal binary representation. EOL EOLHowever, 19.95 can't be precisely represented as a binary floating-point number, just like 1/3 can't be exactly represented as a decimal floating-point number. The computer's binary representation of 19.95, therefore, isn't exactly 19.95. EOL EOLWhen a floating-point number gets printed, the binary floating-point representation is converted back to decimal. These decimal numbers are displayed in either the format you specify with printf(), or the current output format for numbers. (See perlvar/"$#" if you use print. $# has a different default value in Perl5 than it did in Perl4. Changing $# yourself is deprecated.) EOL EOLThis affects all computer languages that represent decimal floating-point numbers in binary, not just Perl. Perl provides arbitrary-precision decimal numbers with the Math!:!:BigFloat module (part of the standard Perl distribution), but mathematical operations are consequently slower. EOL EOLTo get rid of the superfluous digits, just use a format (eg, printf("%.2f", 19.95)) to get the required precision. See perlop/"Floating-point Arithmetic". EOL EOL:proper_fraction###0.02941___decimals###0.47059___decimal_fraction###0.23529___decimal###0.23529___number###0.02941:why###1.00000:why am###1.00000:floating-point###0.063___numbers###0.060___decimal###0.047___representation###0.042___binary###0.037___computer###0.035___floating-point_number###0.031___exactly###0.021___infinite###0.021___represented###0.021___format###0.018___converted###0.017___getting###0.015___printf###0.014___changing###0.010___deprecated###0.010___superfluous###0.010___bigfloat###0.010___eolinternally###0.010___appearing###0.010___precision###0.010___decimals###0.010___displayed###0.010___approximated###0.010___computer's###0.010___arbitrary-precision###0.010___mathematician###0.010___eol###0.010___number###0.009___specify###0.009___finite###0.009___required###0.009___literals###0.009___represents###0.009___thinks###0.009___get_rid_of###0.009___slower###0.008___affects###0.008___represent###0.008___digits###0.008___precisely###0.008___arithmetic###0.008___consequently###0.008___mathematical###0.008___can't###0.008___math###0.008___therefore###0.007___printed###0.007___eolwhen###0.007___bits###0.007___perlop###0.007___perl4###0.007___internal###0.007___long###0.007___default###0.007___store###0.007___perlvar###0.007___operations###0.007___back###0.007___eolhowever###0.007___gets###0.006___perl5###0.006___real###0.006___perl###0.006___languages###0.006___provides###0.006___yourself###0.006___output###0.005___eolto###0.005___instead_of###0.005___current###0.005___different###0.005___set###0.005___either###0.005___value###0.005___isn't###0.004___part###0.004___eolthis###0.004___distribution###0.004___why###0.004___standard###0.004___read###0.004___print###0.003___file###0.003___program###0.003___module###0.003___
67:66###0.10,172###0.10,233###0.09,101###0.09,151###0.09,163###0.09,154###0.08,203###0.08,214###0.08,165###0.08:Why isn't my octal data interpreted correctly?  EOL EOL:Perl only understands octal and hex numbers as such when they occur as literals in your program. If they are read in from somewhere and assigned, no automatic conversion takes place. You must explicitly use oct() or hex() if you want the values converted. oct() interprets both hex ("0x350") numbers and octal ones ("0350" or even without the leading "0", like "377"), while hex() only converts hexadecimal ones, with or without a leading "0x", like "0x255", "3A", "ff", or "deadbeef". EOL EOLThis problem shows up most often when people try using chmod(), mkdir(), umask(), or sysopen(), which all want permissions in octal. EOL EOL    chmod(644,  $file);# WRONG -- perl -w catches this EOL    chmod(0644, $file);# right  EOL EOL:noesis###0.02632___collection###0.02632___information###0.21053___accumulation###0.02632___knowledge###0.02632___accusal###0.02632___aggregation###0.02632___accusation###0.02632___message###0.02632___substance###0.02632___assemblage###0.02632___information_measure###0.02632___data###0.42105___subject_matter###0.02632___cognition###0.02632___content###0.02632:why###1.00000:why isn't###1.00000:octal###0.071___hex###0.067___chmod###0.057___oct###0.042___leading###0.030___numbers###0.027___ones###0.026___without###0.021___catches###0.021___conversion###0.021___hexadecimal###0.021___umask###0.021___automatic###0.021___occur###0.021___mkdir###0.021___explicitly###0.019___shows###0.019___interprets###0.019___deadbeef###0.019___converts###0.019___as_such###0.019___understands###0.019___literals###0.019___eol###0.018___somewhere###0.017___converted###0.017___assigned###0.017___permissions###0.016___interpreted###0.015___file###0.015___they_are###0.014___sysopen###0.014___correctly###0.014___takes###0.013___place###0.012___right###0.012___people###0.012___wrong###0.011___often###0.011___problem###0.011___data###0.010___try###0.010___values###0.010___even###0.010___isn't###0.010___eolthis###0.009___why###0.009___read###0.008___perl###0.008___program###0.007___using###0.007___
68:71###0.13,205###0.13,134###0.12,66###0.12,183###0.11,266###0.11,210###0.11,165###0.11,70###0.11,107###0.10:Does Perl have a round() function? What about ceil() and floor()? Trig functions?  EOL EOL:Remember that int() merely truncates toward 0. For rounding to a certain number of digits, sprintf() or printf() is usually the easiest route. EOL EOL    printf("%.3f", 3.1415926535);# prints 3.142  EOL EOLThe POSIX module (part of the standard Perl distribution) implements ceil(), floor(), and a number of other mathematical and trigonometric functions. EOL EOL    use POSIX; EOL    $ceil   = ceil(3.5);# 4 EOL    $floor  = floor(3.5);# 3  EOL EOLIn 5.000 to 5.003 perls, trigonometry was done in the Math!:!:Complex module. With 5.004, the Math!:!:Trig module (part of the standard Perl distribution) implements the trigonometric functions. Internally it uses the Math!:!:Complex module and some functions can break out from the real axis into the complex plane, for example the inverse sine of 2. EOL EOLRounding in financial applications can have serious implications, and the rounding method used should be specified precisely. In these cases, it probably pays not to trust whichever system rounding is being used by Perl, but to instead implement the rounding function you need yourself. EOL EOLTo see why, notice how you'll still have an issue on half-way-point alternation!: EOL EOL    for ($i = 0; $i < 1.01; $i += 0.05) { printf "%.1f ",$i} EOL EOL    0.0 0.1 0.1 0.2 0.2 0.2 0.3 0.3 0.4 0.4 0.5 0.5 0.6 0.7 0.7 EOL    0.8 0.8 0.9 0.9 1.0 1.0  EOL EOLDon't blame Perl. It's the same as in C. IEEE says we have to do this. Perl numbers whose absolute values are integers under 2**31 (on 32 bit machines) will work pretty much like mathematical integers. Other numbers are not guaranteed. EOL EOL:ingredient###0.01087___magnitude###0.01087___structure###0.01087___chemical_compound###0.01087___supposal###0.01087___surface###0.01087___control###0.01087___baseball_equipment###0.01087___lie###0.01087___word_form###0.01087___state###0.01087___underside###0.01087___assumption###0.01087___height###0.01087___fiction###0.01087___piece###0.01087___base###0.08696___indicator###0.01087___signifier###0.01087___store###0.01087___altitude###0.01087___floor###0.17391___stock###0.01087___fund###0.01087___construction###0.01087___story###0.08696___prevarication###0.01087___compound###0.01087___supposition###0.01087___electrode###0.01087___military_installation###0.01087___message###0.01087___location###0.01087___news###0.01087___storey###0.08696___form###0.01087___number###0.01087___substance###0.01087___support###0.01087___flank###0.01087___rank###0.01087___bottom###0.01087___undersurface###0.01087___part###0.01087___subject_matter###0.01087___level###0.08696___record###0.01087___content###0.01087___place###0.01087:what###1.00000:what about###1.00000:floor###0.043___ceil###0.043___rounding###0.043___math###0.025___eol###0.023___complex###0.023___printf###0.022___trig###0.021___implements###0.021___trigonometric###0.021___functions###0.021___mathematical###0.017___integers###0.016___numbers###0.013___module###0.013___perl###0.013___posix###0.012___pretty_much###0.010___financial###0.010___round###0.010___break_out###0.010___route###0.010___inverse###0.010___half-way-point###0.010___sine###0.010___plane###0.010___trigonometry###0.010___eoldon't###0.010___alternation###0.010___pays###0.010___absolute###0.010___implications###0.010___axis###0.010___blame###0.010___eolrounding###0.010___used###0.010___number###0.010___part###0.009___truncates###0.009___trust###0.009___specified###0.009___ieee###0.009___toward###0.009___perls###0.009___distribution###0.009___standard###0.009___precisely###0.008___internally###0.008___digits###0.008___guaranteed###0.008___we_have###0.008___implement###0.008___machines###0.008___whichever###0.008___function###0.008___prints###0.008___notice###0.008___whose###0.008___certain###0.007___applications###0.007___easiest###0.007___serious###0.007___remember###0.007___sprintf###0.007___int###0.007___merely###0.007___says###0.007___are_not###0.007___issue###0.006___real###0.006___bit###0.006___yourself###0.006___done###0.006___uses###0.006___usually###0.006___method###0.006___eolto###0.005___cases###0.005___eolin###0.005___instead###0.005___values###0.005___you'll###0.005___work###0.004___for_example###0.004___why###0.004___probably###0.004___need###0.004___eolthe###0.004___system###0.004___it's###0.004___
69:144###0.22,222###0.20,288###0.18,240###0.17,116###0.17,97###0.16,66###0.16,183###0.15,70###0.15,95###0.15:How do I convert bits into ints?  EOL EOL:To turn a string of 1s and 0s like 10110110 into a scalar containing its binary value, use the pack() and unpack() functions (documented in perlfunc/"pack" and perlfunc/"unpack")!: EOL EOL    $decimal = unpack('c', pack('B8', '10110110'));  EOL EOLThis packs the string 10110110 into an eight bit binary structure. This is then unpacked as a character, which returns its ordinal value. EOL EOLThis does the same thing!: EOL EOL    $decimal = ord(pack('B8', '10110110'));  EOL EOLHere's an example of going the other way!: EOL EOL    $binary_string = unpack('B*', "\x29");  EOL EOL:point_in_time###0.00322___blemish###0.00322___case###0.00322___instrument###0.00322___rotation###0.00322___process###0.00322___change_of_direction###0.00322___injury###0.00322___unit_of_time###0.00322___software_system###0.00322___approach###0.00322___occupation###0.00322___business###0.00322___break###0.00322___touch###0.00322___favour###0.00322___company###0.00322___definite_quantity###0.00322___piece_of_cloth###0.00322___section###0.00322___angular_unit###0.00322___fragment###0.00322___item###0.00322___routine###0.02572___act###0.02572___helping###0.00322___job###0.00322___lesion###0.00322___lamp###0.00322___manifestation###0.00322___force###0.00322___semiconductor_device###0.00322___business_establishment###0.00322___touching###0.00322___grammatical_category###0.00322___portion###0.00322___unit_of_measurement###0.00322___weightlifting###0.00322___position###0.00322___reflexion###0.00322___movement###0.00322___playing_card###0.00322___legal_document###0.00322___piece###0.02572___scrap###0.02572___periodical###0.00322___tender###0.00322___shift###0.00322___gear###0.00322___size###0.00322___female_genitals###0.00322___place_of_business###0.00322___characteristic###0.00322___muck###0.00322___statistic###0.00322___bit###0.02572___time###0.00322___second###0.02572___seizure###0.00322___merchandise###0.00322___line###0.00322___wares###0.00322___flake###0.02572___snack_food###0.00322___wound###0.00322___attack###0.00322___change_of_course###0.00322___eating###0.00322___trauma###0.00322___sculpture###0.00322___signal###0.00322___line_of_work###0.00322___walk###0.00322___example###0.00322___public_presentation###0.00322___curved_shape###0.00322___official_document###0.00322___chip###0.02572___mistake###0.00322___dramatic_composition###0.00322___droppings###0.00322___curve###0.00322___software_package###0.00322___percentage###0.00322___package###0.00322___bite###0.02572___attender###0.00322___moment###0.02572___work_shift###0.00322___spicery###0.00322___float###0.00322___morsel###0.02572___motion###0.00322___hurt###0.00322___gear_mechanism###0.00322___symbol###0.00322___reflection###0.00322___creation###0.00322___serving###0.00322___procedure###0.00322___bits###0.05145___activity###0.00322___unit###0.00322___instance###0.00322___minute###0.02572___mark###0.00322___legal_instrument###0.00322___capture###0.00322___reorientation###0.00322___nowadays###0.00322___marking###0.00322___spot###0.02572___cutting_implement###0.00322___subdivision###0.00322___semiconductor_unit###0.00322___physical_thing###0.00322___saddlery###0.00322___approach_shot###0.00322___significance###0.00322___period_of_play###0.00322___favor###0.00322___small_indefinite_amount###0.00322___agreement###0.00322___number###0.02572___distance###0.00322___piece_of_material###0.00322___software###0.00322___marker###0.00322___turn###0.02572___dramatic_work###0.00322___repast###0.00322___snatch###0.02572___share###0.00322___harm###0.00322___stable_gear###0.00322___development###0.00322___entity###0.00322___feeding###0.00322___game_equipment###0.00322___performance###0.00322___playing_period###0.00322___sign###0.00322___duty_period###0.00322___mouthful###0.00322___gun###0.00322___error###0.00322___attendant###0.00322___expression###0.00322___fault###0.00322___female_genital_organ###0.00322___meal###0.00322___fleck###0.02572___rank###0.00322___dung###0.00322___taste###0.00322___counter###0.00322___defect###0.00322___amount###0.00322___spiciness###0.00322___part###0.00322___product###0.00322___signaling###0.00322___point###0.00322___play###0.00322___identification###0.00322___crystal###0.00322___breakage###0.00322___tack###0.00322___time_unit###0.00322___semiconductor###0.00322___breaking###0.00322___spice###0.00322___present###0.00322___syntactic_category###0.00322___small_indefinite_quantity###0.00322___female_genitalia###0.00322___note###0.00322:how###1.00000:how do###1.00000:unpack###0.088___pack###0.086___decimal###0.049___eol###0.046___binary###0.039___perlfunc###0.038___value###0.033___binary_string###0.032___ordinal###0.032___packs###0.032___unpacked###0.032___x29###0.032___eight###0.029___ord###0.029___ints###0.029___eolthis###0.029___structure###0.025___containing###0.025___string###0.025___turn###0.024___bits###0.023___returns###0.023___convert###0.023___going###0.022___bit###0.020___thing###0.018___eolhere's###0.018___character###0.018___documented###0.016___scalar###0.016___functions###0.016___example###0.015___
70:196###0.19,95###0.18,92###0.18,100###0.17,183###0.17,203###0.17,66###0.16,69###0.15,124###0.14,99###0.14:Why doesn't & work the way I want it to?  EOL EOL:The behavior of binary arithmetic operators depends on whether they're used on numbers or strings. The operators treat a string as a series of bits and work with that (the string "3" is the bit pattern 00110011). The operators work with the binary form of a number (the number 3 is treated as the bit pattern 00000011). EOL EOLSo, saying 11 & 3 performs the "and" operation on numbers (yielding 1). Saying "11" & "3" performs the "and" operation on strings (yielding "1"). EOL EOLMost problems with & and | arise because the programmer thinks they have a number but really it's a string. The rest arise because the programmer says!: EOL EOL    if ("\020\020" & "\101\101") { EOL# ... EOL    }  EOL EOLbut a string consisting of two null bytes (the result of "\020\020" & "\101\101") is not a false value in Perl. You need!: EOL EOL    if ( ("\020\020" & "\101\101") !!~ /[^\000]/) { EOL# ... EOL    }  EOL EOL:pattern###0.00495___learning###0.00495___knowledge_base###0.00495___memorizer###0.00495___occupation###0.00495___mode###0.03960___knowledge_domain###0.00495___business###0.00495___thoughtfulness###0.00495___control###0.00495___path###0.00495___job###0.00495___information###0.00495___fashion###0.03960___property###0.00495___composition###0.00495___state###0.00495___contemplation###0.00495___musing###0.00495___reflexion###0.00495___position###0.00495___scrutiny###0.00495___piece###0.00495___demeanor###0.00495___acquisition###0.00495___bid###0.00495___variety###0.00495___business_organization###0.00495___instrumentation###0.00495___behaviour###0.00495___disposition###0.00495___opus###0.00495___means###0.03960___line###0.00495___elbow_room###0.03960___memoriser###0.00495___employment###0.03960___style###0.00495___demeanour###0.00495___rumination###0.00495___way###0.07921___line_of_work###0.00495___examination###0.00495___room###0.00495___concentration###0.00495___business_concern###0.00495___conduct###0.00495___output###0.00495___average###0.00495___agency###0.03960___concern###0.00495___bidding###0.00495___action###0.00495___spatial_relation###0.00495___reflection###0.00495___condition###0.00495___capital###0.00495___message###0.00495___activity###0.00495___kind###0.00495___immersion###0.00495___drawing###0.00495___sort###0.00495___vogue###0.00495___form###0.00495___work###0.07921___trend###0.00495___effectuation###0.00495___substance###0.00495___absorption###0.00495___grammatical_relation###0.00495___end_product###0.00495___command###0.00495___implementation###0.00495___administrative_unit###0.00495___norm###0.00495___deportment###0.00495___practice###0.00495___behavior###0.00495___manner###0.03960___oeuvre###0.03960___piece_of_music###0.00495___status###0.00495___direction###0.03960___route###0.00495___diatonic_scale###0.00495___musical_composition###0.00495___study###0.03960___logical_relation###0.00495___tendency###0.00495___activeness###0.00495___itinerary###0.00495___engrossment###0.00495___instrumentality###0.00495___subject_matter###0.00495___dictation###0.00495___administrative_body###0.00495___social_control###0.00495___info###0.00495___content###0.00495___inclination###0.00495___business_organisation###0.00495:why###1.00000:why doesn't###1.00000:operators###0.046___yielding###0.042___arise###0.042___saying###0.038___performs###0.038___eol###0.034___programmer###0.033___string###0.033___number###0.029___work###0.028___numbers###0.027___bit###0.026___operation###0.026___binary###0.025___pattern###0.024___strings###0.022___eolmost###0.019___thinks###0.019___with_that###0.019___false###0.019___null###0.019___treated###0.017___series###0.017___arithmetic###0.017___consisting###0.017___they_have###0.016___eolso###0.016___treat###0.016___rest###0.016___result###0.016___depends###0.015___bits###0.015___they're###0.014___says###0.014___bytes###0.014___eolbut###0.013___behavior###0.013___problems###0.013___form###0.012___is_not###0.010___value###0.010___used###0.010___really###0.010___whether###0.009___two###0.009___why###0.009___need###0.008___doesn't###0.008___it's###0.008___perl###0.004___
71:188###0.15,295###0.15,202###0.14,68###0.13,21###0.13,139###0.13,266###0.12,255###0.11,296###0.09,239###0.09:How do I multiply matrices?  EOL EOL:Use the Math!:!:Matrix or Math!:!:MatrixReal modules (available from CPAN) or the PDL extension (also available from CPAN). EOL EOL:ground_substance###0.16327___cast###0.02041___mold###0.02041___natural_enclosure###0.02041___mould###0.02041___matrix###0.16327___animal_tissue###0.02041___body_substance###0.02041___matrices###0.32653___cytoplasm###0.02041___intercellular_substance###0.16327___array###0.02041___enclosure###0.02041:how###1.00000:how do###1.00000:math###0.167___multiply###0.107___matrix###0.107___matrixreal###0.107___matrices###0.095___available###0.092___pdl###0.088___cpan###0.072___extension###0.068___modules###0.047___eol###0.046___
72:111###0.24,108###0.23,105###0.21,113###0.21,38###0.20,110###0.19,183###0.18,104###0.17,210###0.17,95###0.17:How do I perform an operation on a series of integers?  EOL EOL:To call a function on each element in an array, and collect the results, use!: EOL EOL    @results = map { my_func($_) } @array;  EOL EOLFor example!: EOL EOL    @triple = map { 3 * $_ } @single;  EOL EOLTo call a function on each element of an array, but ignore the results!: EOL EOL    foreach $iterator (@array) { EOL        some_func($iterator); EOL    }  EOL EOLTo call a function on each integer in a (small) range, you can use!: EOL EOL    @results = map { some_func($_) } (5 .. 25);  EOL EOLbut you should be aware that the .. operator creates an array of all integers in the range. This can take a lot of memory for large ranges. Instead use!: EOL EOL    @results = (); EOL    for ($i=5; $i < 500_005; $i++) { EOL        push(@results, some_func($i)); EOL    }  EOL EOLThis situation has been fixed in Perl5.005. Use of .. in a for loop will iterate over the range, without creating the entire range. EOL EOL    for my $i (5 .. 500_005) { EOL        push(@results, some_func($i)); EOL    }  EOL EOLwill not create a list of 500,000 integers. EOL EOL:noesis###0.00662___presentation###0.00662___surgical_process###0.05298___operation###0.10596___achievement###0.00662___process###0.00662___medical_science###0.00662___software_system###0.00662___proceeding###0.00662___mathematical_process###0.05298___periodical###0.00662___proceedings###0.00662___knowledge###0.00662___surgical_procedure###0.05298___presentment###0.00662___series###0.10596___room###0.00662___hospital_room###0.00662___software_package###0.00662___package###0.00662___surgery###0.05298___action###0.00662___show###0.00662___procedure###0.05298___accomplishment###0.00662___activity###0.00662___programme###0.00662___work###0.00662___broadcast###0.00662___software###0.00662___serial_publication###0.05298___cognitive_process###0.05298___functioning###0.05298___mental_process###0.05298___program###0.00662___computing###0.00662___legal_proceeding###0.00662___performance###0.05298___demonstration###0.00662___serial###0.05298___computation###0.00662___calculation###0.00662___medical_procedure###0.00662___cognition###0.00662:how###1.00000:how do###1.00000:results###0.096___range###0.065___some_func###0.065___eol###0.058___array###0.045___integers###0.041___map###0.039___call###0.028___iterator###0.027___push###0.023___element###0.021___function###0.020___eolto###0.020___triple###0.018___my_func###0.018___collect###0.018___ranges###0.018___ignore###0.016___perform###0.016___iterate###0.016___eolwill###0.016___aware###0.015___situation###0.015___creates###0.015___series###0.015___integer###0.014___loop###0.013___creating###0.013___entire###0.013___fixed###0.012___large###0.012___eolbut###0.011___perl5###0.011___memory###0.011___foreach###0.011___small###0.011___single###0.011___operation###0.011___a_lot###0.010___operator###0.010___create###0.009___eolfor###0.009___instead###0.009___without###0.009___example###0.008___list###0.008___eolthis###0.008___
73:205###0.13,183###0.12,140###0.12,250###0.12,149###0.11,266###0.11,165###0.11,101###0.10,51###0.10,210###0.10:How can I output Roman numerals?  EOL EOL:Get the http!://www.perl.com/CPAN/modules/by-module/Roman module. EOL EOL:numeral###0.07767___production###0.00971___company###0.00971___definite_quantity###0.00971___grammatical_category###0.00971___attendance###0.00971___periodical###0.00971___size###0.00971___merchandise###0.00971___wares###0.00971___signal###0.00971___public_presentation###0.00971___output###0.15534___outturn###0.07767___symbol###0.00971___numerals###0.15534___number###0.07767___income###0.00971___assemblage###0.00971___end_product###0.07767___turnout###0.07767___performance###0.00971___sign###0.00971___yield###0.07767___attending###0.00971___amount###0.00971___signaling###0.00971___product###0.00971___identification###0.00971___syntactic_category###0.00971___gathering###0.00971:how###1.00000:how can###1.00000:http!://www.perl.com/cpan/modules/by-module/roman###0.232___numerals###0.232___roman###0.232___output###0.129___eol###0.100___module###0.072___
74:113###0.31,173###0.19,66###0.16,111###0.13,149###0.10,82###0.09,220###0.09,70###0.08,68###0.08,67###0.08:Why aren't my random numbers random?  EOL EOL:If you're using a version of Perl before 5.004, you must call srand once at the start of your program to seed the random number generator. 5.004 and later automatically call srand at the beginning. Don't call srand more than once--you make your numbers less random, rather than more. EOL EOLComputers are good at being predictable and bad at being random (despite appearances caused by bugs in your programs !:-). http!://www.perl.com/CPAN/doc/FMTEYEWTK/random , courtesy of Tom Phoenix, talks more about this. John von Neumann said, ``Anyone who attempts to generate random numbers by deterministic means is, of course, living in a state of sin.'' EOL EOLIf you want numbers that are more random than rand with srand provides, you should also check out the Math!:!:TrulyRandom module from CPAN. It uses the imperfections in your system's timer to generate random numbers, but this takes quite a while. If you want a better pseudorandom generator than comes with your operating system, look at ``Numerical Recipes in C'' at http!://www.nr.com/ . EOL EOL EOL:numbers###1.00000:why###1.00000:why aren't###1.00000:random###0.077___numbers###0.051___srand###0.050___call###0.025___generate###0.023___once###0.019___at_the_start###0.016___eolcomputers###0.016___timer###0.016___seed###0.016___recipes###0.016___appearances###0.016___random_number_generator###0.016___john_von_neumann###0.016___http!://www.nr.com/###0.016___trulyrandom###0.016___living###0.016___pseudorandom###0.016___predictable###0.016___imperfections###0.016___phoenix###0.016___http!://www.perl.com/cpan/doc/fmteyewtk/random###0.016___despite###0.014___talks###0.014___deterministic###0.014___attempts###0.014___generator###0.014___numerical###0.014___caused###0.014___look_at###0.014___quite_a###0.014___sin###0.014___anyone###0.013___math###0.012___system's###0.012___beginning###0.012___rather_than###0.012___eol###0.012___rand###0.011___courtesy###0.011___bugs###0.011___tom###0.011___state###0.011___automatically###0.010___of_course###0.010___check_out###0.010___operating_system###0.010___takes###0.009___aren't###0.009___later###0.009___comes###0.009___more_than###0.009___less###0.009___bad###0.009___provides###0.009___good###0.009___uses###0.009___better###0.008___means###0.008___programs###0.007___version###0.007___why###0.006___don't###0.006___you're###0.005___program###0.005___using###0.005___eolif###0.005___cpan###0.005___module###0.005___perl###0.003___
75:81###0.23,80###0.19,76###0.19,79###0.13,160###0.13,77###0.12,238###0.11,78###0.11,183###0.10,108###0.10:How do I find the week-of-the-year/day-of-the-year?  EOL EOL:The day of the year is in the array returned by localtime() (see perlfunc/"localtime")!: EOL EOL    $day_of_year = (localtime(time()))[7];  EOL EOLor more legibly (in 5.004 or higher)!: EOL EOL    use Time!:!:localtime; EOL    $day_of_year = localtime(time())->yday;  EOL EOLYou can find the week of the year by dividing this by 7!: EOL EOL    $week_of_year = int($day_of_year / 7);  EOL EOLOf course, this believes that weeks start at zero. The Date!:!:Calc module from CPAN has a lot of date calculation functions, including day of the year, week of the year, and so on. Note that not all businesses consider ``week 1'' to be the same; for example, American businesses often consider the first week with a Monday in it to be Work Week #1, despite ISO 8601, which considers WW1 to be the first week with a Thursday in it. EOL EOL::how###1.00000:how do###1.00000:week###0.110___localtime###0.065___day_of_year###0.055___year###0.054___businesses###0.036___day###0.028___eol###0.027___date###0.024___consider###0.022___time###0.022___calculation###0.018___considers###0.018___yday###0.018___dividing###0.018___believes###0.018___american###0.018___monday###0.018___thursday###0.018___week-of-the-year/day-of-the-year###0.018___week_of_year###0.018___weeks###0.018___ww1###0.018___find###0.017___and_so_on###0.016___higher###0.016___despite###0.016___zero###0.016___iso###0.016___legibly###0.016___first###0.016___course###0.015___eolof###0.014___calc###0.014___returned###0.013___int###0.012___note###0.011___start###0.010___including###0.010___a_lot###0.010___perlfunc###0.010___often###0.010___eolyou###0.009___functions###0.008___array###0.008___eolor###0.008___work###0.008___for_example###0.008___cpan###0.006___module###0.005___
76:75###0.19,80###0.16,160###0.15,210###0.14,149###0.13,81###0.13,51###0.13,259###0.12,205###0.12,208###0.12:How do I find the current century or millennium?  EOL EOL:Use the following simple functions!: EOL EOL    sub get_century    { EOLreturn int((((localtime(shift || time))[5] + 1999))/100); EOL    } EOL    sub get_millennium { EOLreturn 1+int((((localtime(shift || time))[5] + 1899))/1000); EOL    }   EOL EOLOn some systems, you'll find that the POSIX module's strftime() function has been extended in a non-standard way to use a %C format, which they sometimes claim is the "century". It isn't, because on most such systems, this is only the first two digits of the four-digit year, and thus cannot be used to reliably determine the current century or millennium. EOL EOL:change_of_location###0.00877___natural_process###0.00877___emission###0.00877___flow###0.07018___water###0.00877___one_C###0.07018___expelling###0.00877___hundred###0.07018___movement###0.00877___C###0.07018___course###0.00877___flowing###0.00877___stream###0.07018___programing_language###0.00877___constant###0.00877___natural_action###0.00877___line###0.00877___move###0.00877___action###0.00877___body_of_water###0.00877___motion###0.00877___activity###0.00877___programming_language###0.00877___nucleotide###0.00877___charge_unit###0.00877___chemical_element###0.00877___large_integer###0.00877___rate###0.00877___speed###0.00877___hard_drug###0.00877___century###0.14035___travel###0.00877___centred###0.07018___letter_of_the_alphabet###0.00877___element###0.00877___discharge###0.00877___quantity_unit###0.00877___letter###0.00877___degree###0.00877___velocity###0.00877___current###0.14035___alphabetic_character###0.00877:how###1.00000:how do###1.00000:century###0.087___millennium###0.058___localtime###0.042___eolreturn###0.036___shift###0.032___eol###0.031___current###0.030___claim###0.029___get_millennium###0.029___get_century###0.029___extended###0.029___four-digit###0.029___find###0.028___systems###0.026___module's###0.026___non-standard###0.026___strftime###0.026___sub###0.025___digits###0.024___reliably###0.024___time###0.024___thus###0.022___year###0.021___eolon###0.021___int###0.019___cannot###0.019___determine###0.019___used_to###0.019___format###0.017___sometimes###0.016___posix###0.016___simple###0.014___following###0.014___functions###0.014___you'll###0.013___isn't###0.013___two###0.013___first###0.012___function###0.011___
77:78###0.39,79###0.24,80###0.20,238###0.18,75###0.12,81###0.09,30###0.07,160###0.06,255###0.06,182###0.06:How can I compare two dates and find the difference?  EOL EOL:If you're storing your dates as epoch seconds then simply subtract one from the other. If you've got a structured date (distinct year, day, month, hour, minute, seconds values), then for reasons of accessibility, simplicity, and efficiency, merely use either timelocal or timegm (from the Time!:!:Local module in the standard distribution) to reduce structured dates to epoch seconds. However, if you don't know the precise format of your dates, then you should probably use either of the Date!:!:Manip and Date!:!:Calc modules from CPAN before you go hacking up your own parsing routine to handle arbitrary date formats. EOL EOL:dates###0.07767___point_in_time###0.00485___get_together###0.00485___component###0.00485___day###0.00485___remainder###0.03883___occupation###0.00485___business###0.00485___piece_of_cloth###0.00485___disagreement###0.00485___striking###0.00485___escort###0.03883___human###0.00485___edible_fruit###0.00485___job###0.00485___twenty-four_hours###0.00485___protection###0.00485___decision###0.00485___state###0.00485___portion###0.00485___promise###0.00485___fluctuation###0.00485___variation###0.00485___comrade###0.00485___associate###0.00485___decease###0.00485___tender###0.00485___day_of_the_month###0.03883___erroneousness###0.00485___interval###0.00485___protector###0.00485___conflict###0.03883___statistic###0.00485___difference###0.07767___disposition###0.00485___deviation###0.03883___line###0.00485___mean_solar_day###0.00485___mortal###0.00485___series###0.00485___engagement###0.03883___employment###0.00485___resistance###0.00485___line_of_work###0.00485___familiar###0.00485___ambivalence###0.00485___turning###0.00485___dispute###0.03883___component_part###0.00485___someone###0.00485___somebody###0.00485___deed###0.00485___separation###0.00485___action###0.00485___attender###0.00485___guardian###0.00485___ambivalency###0.00485___feat###0.00485___military_action###0.00485___meeting###0.00485___group_action###0.00485___fellow###0.00485___nowadays###0.00485___appointment###0.03883___work###0.00485___number###0.00485___piece_of_material###0.00485___death###0.00485___turn###0.00485___conclusion###0.00485___abnormality###0.00485___solar_day###0.00485___irregularity###0.00485___defender###0.00485___oppositeness###0.00485___impinging###0.00485___determination###0.00485___calendar_year###0.00485___individual###0.00485___shielder###0.00485___departure###0.03883___furnishings###0.00485___error###0.00485___attendant###0.00485___person###0.00485___divergence###0.03883___opposition###0.00485___part###0.00485___point###0.00485___civil_year###0.00485___date###0.03883___effort###0.00485___companion###0.00485___incompatibility###0.00485___present###0.00485___contact###0.00485___soul###0.00485___exploit###0.00485___disposal###0.00485:how###1.00000:how can###1.00000:dates###0.087___date###0.059___seconds###0.051___structured###0.043___epoch###0.032___either###0.022___accessibility###0.021___hacking###0.021___timegm###0.021___distinct###0.019___simplicity###0.019___routine###0.019___minute###0.019___timelocal###0.019___formats###0.019___parsing###0.019___precise###0.019___subtract###0.019___hour###0.019___storing###0.018___manip###0.018___month###0.018___calc###0.017___day###0.017___reduce###0.017___compare###0.017___efficiency###0.017___year###0.016___arbitrary###0.015___merely###0.014___simply###0.014___reasons###0.014___you've###0.013___however###0.013___format###0.013___difference###0.012___handle###0.012___know###0.012___own###0.012___local###0.011___find###0.010___values###0.010___two###0.010___modules###0.009___eol###0.009___distribution###0.009___standard###0.009___probably###0.009___time###0.009___don't###0.008___you're###0.007___cpan###0.007___one###0.007___module###0.006___
78:77###0.39,79###0.28,238###0.22,80###0.14,94###0.12,210###0.12,183###0.12,188###0.12,92###0.12,95###0.11:How can I take a string and turn it into epoch seconds?  EOL EOL:If it's a regular enough string that it always has the same format, you can split it up and pass the parts to timelocal in the standard Time!:!:Local module. Otherwise, you should look into the Date!:!:Calc and Date!:!:Manip modules from CPAN. EOL EOL:pattern###0.00806___bond###0.00806___consequence###0.00806___twine###0.06452___period_of_time###0.00806___business###0.00806___piece_of_cloth###0.00806___aftermath###0.00806___shore###0.00806___time_period###0.00806___ligament###0.00806___chain###0.06452___hamper###0.00806___business_organization###0.00806___cord###0.00806___line###0.00806___linear_unit###0.00806___series###0.00806___fibre###0.00806___wheelwork###0.00806___biochemist###0.00806___public_transport###0.00806___business_concern###0.00806___date_of_reference###0.06452___strand###0.06452___building_block###0.00806___shape###0.00806___concern###0.00806___train###0.06452___epoch###0.12903___string###0.12903___unit###0.00806___shackle###0.00806___era###0.06452___constraint###0.00806___procession###0.00806___geological_formation###0.00806___form###0.00806___piece_of_material###0.00806___restraint###0.00806___geologic_time###0.00806___fiber###0.00806___formation###0.00806___geology###0.00806___geological_time###0.00806___trammel###0.00806___street###0.00806___date###0.00806___trammels###0.00806___period###0.00806___necklace###0.00806___business_organisation###0.00806:how###1.00000:how can###1.00000:date###0.083___timelocal###0.055___manip###0.051___calc###0.048___seconds###0.048___enough###0.048___string###0.047___look_into###0.046___epoch###0.046___otherwise###0.046___turn###0.046___parts###0.044___pass###0.042___split###0.042___format###0.036___always###0.032___local###0.032___regular###0.030___modules###0.027___eol###0.026___standard###0.025___time###0.025___it's###0.023___cpan###0.020___module###0.019___
79:78###0.28,77###0.24,238###0.21,75###0.13,80###0.13,255###0.11,59###0.10,226###0.09,228###0.08,165###0.07:How can I find the Julian Day?  EOL EOL:Use the Time!:!:JulianDay module (part of the Time-modules bundle available from CPAN.) EOL EOLBefore you immerse yourself too deeply in this, be sure to verify that it is the Julian Day you really want. Are you really just interested in a way of getting serial days so that they can do date arithmetic? If you are interested in performing date arithmetic, this can be done using either Date!:!:Manip or Date!:!:Calc, without converting to Julian Day first. EOL EOLThere is too much confusion on this issue to cover in this FAQ, but the term is applied (correctly) to a calendar now supplanted by the Gregorian Calendar, with the Julian Calendar failing to adjust properly for leap years on centennial years (among other annoyances). The term is also used (incorrectly) to mean!: [1] days in the Gregorian Calendar; and [2] days since a particular starting time or `epoch', usually 1970 in the Unix world and 1980 in the MS-DOS/Windows world. If you find that it is not the first meaning that you really want, then check out the Date!:!:Manip and Date!:!:Calc modules. (Thanks to David Cassell for most of this text.) EOL EOL:day###0.61538___unit_of_time###0.03846___twenty-four_hours###0.30769___time_unit###0.03846:how###1.00000:how can###1.00000:date###0.054___julian###0.040___day###0.031___days###0.030___gregorian_calendar###0.026___arithmetic###0.022___interested###0.022___years###0.022___manip###0.022___calc###0.021___world###0.021___really###0.018___term###0.016___in_this###0.015___david###0.013___immerse###0.013___failing###0.013___eolbefore###0.013___cassell###0.013___calendar###0.013___julian_calendar###0.013___annoyances###0.013___bundle###0.013___centennial###0.013___starting_time###0.013___supplanted###0.013___incorrectly###0.013___thanks###0.013___time-modules###0.013___too_much###0.013___julianday###0.013___among###0.013___find###0.013___cover###0.011___confusion###0.011___leap###0.011___verify###0.011___deeply###0.011___converting###0.011___first###0.011___performing###0.011___serial###0.011___adjust###0.011___properly###0.011___applied###0.011___in_a_way###0.010___meaning###0.010___epoch###0.010___getting###0.009___ms-dos###0.009___eolthere###0.008___correctly###0.008___particular###0.008___eol###0.008___check_out###0.008___issue###0.008___sure###0.008___so_that###0.008___faq###0.007___mean###0.007___yourself###0.007___usually###0.007___done###0.007___you_are###0.007___unix###0.007___without###0.006___is_not###0.006___either###0.006___text###0.006___used###0.006___part###0.006___modules###0.005___available###0.005___time###0.005___using###0.004___cpan###0.004___module###0.004___
80:77###0.20,75###0.19,76###0.16,160###0.15,183###0.14,210###0.14,78###0.14,51###0.13,58###0.13,238###0.13:How do I find yesterday's date?  EOL EOL:The time() function returns the current time in seconds since the epoch. Take twenty-four hours off that!: EOL EOL    $yesterday = time() - ( 24 * 60 * 60 );  EOL EOLThen you can pass this to localtime() and get the individual year, month, day, hour, minute, seconds values. EOL EOLNote very carefully that the code above assumes that your days are twenty-four hours each. For most people, there are two days a year when they aren't!: the switch to and from summer time throws this off. A solution to this issue is offered by Russ Allbery. EOL EOL    sub yesterday { EOLmy $now  = defined $_[0] ? $_[0] !: time; EOLmy $then = $now - 60 * 60 * 24; EOLmy $ndst = (localtime $now)[8] > 0; EOLmy $tdst = (localtime $then)[8] > 0; EOL$then - ($tdst - $ndst) * 60 * 60; EOL    } EOL    # Should give you "this time yesterday" in seconds since epoch relative to EOL    # the first argument or the current time if no argument is given and EOL    # suitable for passing to localtime or whatever else you need to do with EOL    # it.  $ndst is whether we're currently in daylight savings time; $tdst is EOL    # whether the point 24 hours ago was in daylight savings time.  If $tdst EOL    # and $ndst are the same, a boundary wasn't crossed, and the correction EOL    # will subtract 0.  If $tdst is 1 and $ndst is 0, subtract an hour more EOL    # from yesterday's time since we gained an extra hour while going off EOL    # daylight savings time.  If $tdst is 0 and $ndst is 1, subtract a EOL    # negative hour (add an hour) to yesterday's time since we lost an hour. EOL    # EOL    # All of this is because during those days when one switches off or onto EOL    # DST, a "day" isn't 24 hours long; it's either 23 or 25. EOL    # EOL    # The explicit settings of $ndst and $tdst are necessary because localtime EOL    # only says it returns the system tm struct, and the system tm struct at EOL    # least on Solaris doesn't guarantee any particular positive value (like, EOL    # say, 1) for isdst, just a positive value.  And that value can EOL    # potentially be negative, if DST information isn't available (this sub EOL    # just treats those cases like no DST). EOL    # EOL    # Note that between 2am and 3am on the day after the time zone switches EOL    # off daylight savings time, the exact hour of "yesterday" corresponding EOL    # to the current hour is not clearly defined.  Note also that if used EOL    # between 2am and 3am the day after the change to daylight savings time, EOL    # the result will be between 3am and 4am of the previous day; it's EOL    # arguable whether this is correct. EOL    # EOL    # This sub does not attempt to deal with leap seconds (most things don't). EOL    # EOL    # Copyright relinquished 1999 by Russ Allbery <rra@stanford.edu> EOL    # This code is in the public domain  EOL EOL:get_together###0.01064___day###0.01064___occupation###0.01064___business###0.01064___striking###0.01064___escort###0.08511___human###0.01064___job###0.01064___twenty-four_hours###0.01064___protection###0.01064___decision###0.01064___promise###0.01064___comrade###0.01064___associate###0.01064___tender###0.01064___day_of_the_month###0.08511___protector###0.01064___disposition###0.01064___line###0.01064___mean_solar_day###0.01064___mortal###0.01064___engagement###0.08511___employment###0.01064___line_of_work###0.01064___familiar###0.01064___someone###0.01064___somebody###0.01064___action###0.01064___attender###0.01064___guardian###0.01064___military_action###0.01064___meeting###0.01064___fellow###0.01064___group_action###0.01064___appointment###0.08511___work###0.01064___conclusion###0.01064___solar_day###0.01064___defender###0.01064___impinging###0.01064___determination###0.01064___individual###0.01064___shielder###0.01064___furnishings###0.01064___attendant###0.01064___person###0.01064___date###0.17021___companion###0.01064___contact###0.01064___soul###0.01064___disposal###0.01064:how###1.00000:how do###1.00000:hour###0.045___tdst###0.044___ndst###0.044___time###0.036___daylight_savings###0.031___eol###0.030___yesterday###0.025___day###0.024___localtime###0.022___seconds###0.019___yesterday's###0.019___dst###0.019___subtract###0.017___eolmy###0.014___days###0.014___struct###0.012___twenty-four_hours###0.012___russ###0.012___switches###0.012___allbery###0.012___hours###0.011___current###0.009___negative###0.009___positive###0.009___value###0.009___year###0.009___epoch###0.009___returns###0.009___whether###0.008___sub###0.008___argument###0.008___note###0.007___defined###0.006___least###0.006___copyright###0.006___suitable###0.006___relinquished###0.006___relative_to###0.006___public_domain###0.006___boundary###0.006___arguable###0.006___onto###0.006___correction###0.006___crossed###0.006___gained###0.006___clearly###0.006___treats###0.006___time_zone###0.006___isdst###0.006___isn't###0.006___during###0.005___lost###0.005___minute###0.005___offered###0.005___summer###0.005___throws###0.005___individual###0.005___exact###0.005___explicit###0.005___leap###0.005___necessary###0.005___solaris###0.005___we're###0.005___carefully###0.005___all_of###0.005___month###0.005___system###0.005___wasn't###0.004___settings###0.004___potentially###0.004___switch###0.004___corresponding###0.004___it's###0.004___result###0.004___eolthen###0.004___attempt###0.004___code###0.004___passing###0.004___point###0.004___guarantee###0.004___previous###0.004___long###0.004___deal###0.004___pass###0.004___going###0.004___says###0.004___date###0.004___extra###0.004___assumes###0.004___particular###0.004___whatever###0.004___issue###0.004___correct###0.003___currently###0.003___aren't###0.003___give###0.003___does_not###0.003___eolnote###0.003___people###0.003___say###0.003___given###0.003___cases###0.003___solution###0.003___above###0.003___change###0.003___either###0.003___is_not###0.003___things###0.003___information###0.003___find###0.003___values###0.003___used###0.002___two###0.002___first###0.002___available###0.002___need###0.002___doesn't###0.002___don't###0.002___function###0.002___one###0.002___
81:75###0.23,76###0.13,80###0.10,161###0.09,77###0.09,160###0.09,11###0.09,194###0.08,214###0.08,102###0.08:Does Perl have a Year 2000 problem? Is Perl Y2K compliant?  EOL EOL:Short answer!: No, Perl does not have a Year 2000 problem. Yes, Perl is Y2K compliant (whatever that means). The programmers you've hired to use it, however, probably are not. EOL EOLLong answer!: The question belies a true understanding of the issue. Perl is just as Y2K compliant as your pencil--no more, and no less. Can you use your pencil to write a non-Y2K-compliant memo? Of course you can. Is that the pencil's fault? Of course it isn't. EOL EOLThe date and time functions supplied with Perl (gmtime and localtime) supply adequate information to determine the year well beyond 2000 (2038 is when trouble strikes for 32-bit machines). The year returned by these functions when used in a list context is the year minus 1900. For years between 1910 and 1999 this happens to be a 2-digit decimal number. To avoid the year 2000 problem simply do not treat the year as a 2-digit number. It isn't. EOL EOLWhen gmtime() and localtime() are used in scalar context they return a timestamp string that contains a fully-expanded year. For example, $timestamp = gmtime(1005613200) sets $timestamp to "Tue Nov 13 01!:00!:00 2001". There's no year 2000 problem here. EOL EOLThat doesn't mean that Perl can't be used to create non-Y2K compliant programs. It can. But so can your pencil. It's the fault of the user, not the language. At the risk of inflaming the NRA!: ``Perl doesn't break Y2K, people do.'' See http!:// language.perl.com/news/y2k.html for a longer exposition. EOL EOL::::year###0.074___y2k_compliant###0.044___pencil###0.033___gmtime###0.029___timestamp###0.027___problem###0.022___fault###0.022___perl###0.018___localtime###0.015___of_course###0.014___context###0.012___answer###0.012___exposition###0.011___nra###0.011___nov###0.011___non-y2k-compliant###0.011___supplied_with###0.011___strikes###0.011___fully-expanded###0.011___belies###0.011___non-###0.011___memo###0.011___hired###0.011___eollong###0.011___pencil's###0.011___y2k###0.011___adequate###0.011___tue###0.011___language.perl.com###0.011___inflaming###0.011___functions###0.010___isn't###0.010___used###0.010___number###0.010___beyond###0.009___minus###0.009___eol###0.009___trouble###0.009___no_more###0.009___supply###0.009___short###0.009___years###0.009___longer###0.009___break###0.009___just_as###0.008___machines###0.008___sets###0.008___risk###0.008___understanding###0.008___doesn't###0.008___eolwhen###0.008___treat###0.008___decimal###0.008___happens###0.007___returned###0.007___eolthat###0.007___programmers###0.007___date###0.007___determine###0.007___simply###0.007___are_not###0.007___used_to###0.007___issue###0.007___do_not###0.007___whatever###0.007___true###0.006___you've###0.006___user###0.006___http!://###0.006___less###0.006___however###0.006___does_not###0.006___mean###0.006___avoid###0.006___html###0.006___people###0.006___language###0.006___there's###0.006___contains###0.006___means###0.006___question###0.005___create###0.005___programs###0.005___scalar###0.005___information###0.005___return###0.005___list###0.004___for_example###0.004___write###0.004___time###0.004___probably###0.004___can't###0.004___eolthe###0.004___it's###0.004___string###0.004___
82:287###0.19,149###0.19,289###0.17,182###0.13,163###0.12,229###0.11,196###0.11,177###0.11,290###0.10,48###0.10:How do I validate input?  EOL EOL:The answer to this question is usually a regular expression, perhaps with auxiliary logic. See the more specific questions (numbers, mail addresses, etc.) for details. EOL EOL:sex_activity###0.01923___natural_process###0.01923___arousal###0.01923___information###0.01923___natural_action###0.01923___rousing###0.01923___sex###0.01923___action###0.01923___stimulant###0.15385___activity###0.01923___sexual_activity###0.01923___drug###0.01923___sexual_practice###0.01923___input###0.30769___stimulus###0.15385___stimulation###0.15385:how###1.00000:how do###1.00000:auxiliary###0.083___logic###0.083___validate###0.083___addresses###0.068___specific###0.059___questions###0.055___etc.###0.054___perhaps###0.054___numbers###0.053___mail###0.051___input###0.049___answer###0.047___usually###0.046___expression###0.046___question###0.044___details###0.040___regular###0.040___eol###0.036___
83:99###0.14,183###0.14,251###0.13,88###0.13,92###0.12,210###0.11,85###0.11,95###0.11,165###0.11,279###0.11:How do I unescape a string?  EOL EOL:It depends just what you mean by ``escape''. URL escapes are dealt with in perlfaq9. Shell escapes with the backslash (\) character are removed with EOL EOL    s/\\(.)/$1/g;  EOL EOLThis won't expand "\n" or "\t" or any other special escapes. EOL EOL:pattern###0.01163___bond###0.01163___consequence###0.01163___twine###0.09302___business###0.01163___piece_of_cloth###0.01163___aftermath###0.01163___shore###0.01163___ligament###0.01163___chain###0.09302___hamper###0.01163___business_organization###0.01163___cord###0.01163___line###0.01163___linear_unit###0.01163___series###0.01163___fibre###0.01163___wheelwork###0.01163___biochemist###0.01163___public_transport###0.01163___business_concern###0.01163___strand###0.09302___building_block###0.01163___shape###0.01163___concern###0.01163___train###0.09302___string###0.18605___unit###0.01163___shackle###0.01163___constraint###0.01163___geological_formation###0.01163___procession###0.01163___form###0.01163___piece_of_material###0.01163___restraint###0.01163___fiber###0.01163___formation###0.01163___geology###0.01163___trammel###0.01163___street###0.01163___trammels###0.01163___necklace###0.01163___business_organisation###0.01163:how###1.00000:how do###1.00000:escapes###0.161___removed###0.068___dealt###0.068___unescape###0.068___perlfaq9###0.061___backslash###0.061___eol###0.052___url###0.051___expand###0.049___depends###0.049___escape###0.049___special###0.045___mean###0.039___character###0.039___shell###0.037___won't###0.037___eolthis###0.030___string###0.026___
84:183###0.15,274###0.15,175###0.14,186###0.14,205###0.13,165###0.13,210###0.13,95###0.12,101###0.12,51###0.12:How do I remove consecutive pairs of characters?  EOL EOL:To turn "abbcccd" into "abccd"!: EOL EOL    s/(.)\1/$1/g;# add /s to include newlines  EOL EOLHere's a solution that turns "abbcccd" to "abcd"!: EOL EOL    y///cs;# y == tr, but shorter !:-)  EOL EOL:state_of_mind###0.00221___textile###0.00221___natural_covering###0.00221___case###0.01766___object###0.00221___recommendation###0.00221___happening###0.00221___structure###0.00221___stanza###0.00221___stuff###0.00221___fictional_character###0.01766___grapheme###0.01766___appearance###0.00221___personation###0.00221___imaginary_being###0.00221___utility###0.00221___motility###0.00221___tune###0.00221___attribute###0.00221___duad###0.01766___problem###0.00221___melodic_phrase###0.00221___deuce###0.00221___two###0.00221___human###0.00221___strengthener###0.00221___book###0.00221___cloth###0.00221___taxon###0.00221___musical_organization###0.00221___property###0.00221___assets###0.00221___composition###0.00221___reference###0.01766___grammatical_category###0.00221___written_symbol###0.00221___proceeding###0.00221___annotation###0.00221___frame###0.00221___cover###0.00221___yoke###0.01766___concept###0.00221___imaginary_creature###0.00221___movement###0.00221___quality###0.01766___covering###0.00221___piece###0.00221___remark###0.00221___grownup###0.00221___fact###0.00221___wearing_apparel###0.00221___natural_event###0.00221___framing###0.00221___variety###0.00221___framework###0.00221___proceedings###0.00221___grade###0.00221___occurrence###0.00221___fabric###0.00221___indicator###0.00221___couplet###0.01766___relation###0.00221___dental_appliance###0.00221___twain###0.01766___containerful###0.00221___terpsichore###0.00221___testimonial###0.00221___opus###0.00221___line###0.00221___frame_of_mind###0.00221___comment###0.00221___linear_unit###0.00221___dance###0.00221___apparel###0.00221___stock###0.00221___mortal###0.00221___printed_symbol###0.00221___fibre###0.01766___connective###0.00221___ii###0.00221___set###0.00221___clothing###0.00221___connecter###0.00221___vesture###0.00221___construction###0.00221___continuance###0.00221___twosome###0.01766___doubleton###0.01766___building_block###0.00221___concern###0.00221___somebody###0.00221___someone###0.00221___connection###0.00221___action###0.00221___move###0.00221___try###0.00221___clothes###0.00221___motion###0.00221___repute###0.00221___sound_property###0.00221___trait###0.00221___rope###0.00221___connexion###0.00221___symbol###0.00221___dancing###0.00221___reinforcement###0.00221___construct###0.00221___wear###0.00221___location###0.00221___activity###0.00221___couple###0.01766___unit###0.00221___unusual_person###0.00221___statement###0.00221___kind###0.00221___persona###0.01766___family_unit###0.00221___saltation###0.00221___melody###0.00221___graphic_symbol###0.01766___characterization###0.00221___sort###0.00221___physical_thing###0.00221___distich###0.01766___saddlery###0.00221___character_reference###0.01766___good_word###0.00221___punctuation###0.00221___form###0.00221___publication###0.00221___small_indefinite_amount###0.00221___argument###0.00221___block###0.00221___distance###0.00221___attempt###0.00221___reputation###0.00221___enactment###0.00221___endeavor###0.00221___substance###0.00221___dyad###0.01766___theatrical_role###0.01766___bed_linen###0.00221___duo###0.01766___support###0.00221___portrayal###0.00221___fiber###0.01766___character###0.01766___pair###0.00221___duration###0.00221___pairs###0.03532___punctuation_mark###0.00221___characters###0.03532___connector###0.00221___span###0.01766___duet###0.01766___dimension###0.00221___family###0.00221___duty###0.00221___musical_group###0.00221___stable_gear###0.00221___structural_member###0.00221___article_of_clothing###0.00221___entity###0.00221___social_status###0.00221___fictitious_character###0.01766___individual###0.00221___legal_proceeding###0.00221___piece_of_music###0.00221___usefulness###0.00221___brace###0.01766___conception###0.00221___adult###0.00221___circumstance###0.00221___melodic_line###0.00221___physical_object###0.00221___strain###0.00221___person###0.00221___musical_composition###0.00221___housing###0.00221___rank###0.00221___musical_organisation###0.00221___degree###0.00221___anomaly###0.00221___taxonomic_group###0.00221___notation###0.00221___visual_aspect###0.00221___part###0.01766___social_station###0.00221___lineament###0.01766___meaning###0.00221___social_rank###0.00221___material###0.00221___effort###0.00221___type###0.01766___air###0.00221___body_part###0.00221___tack###0.00221___eccentric###0.01766___level###0.00221___syntactic_category###0.00221___container###0.00221___small_indefinite_quantity###0.00221___endeavour###0.00221___soul###0.00221___role###0.01766___note###0.00221:how###1.00000:how do###1.00000:abbcccd###0.156___abccd###0.078___abcd###0.078___shorter###0.078___eol###0.076___consecutive###0.069___turns###0.064___pairs###0.061___turn###0.058___newlines###0.056___remove###0.051___eolhere's###0.044___solution###0.042___include###0.041___characters###0.040___
85:99###0.30,102###0.24,88###0.20,87###0.19,214###0.19,100###0.17,58###0.17,183###0.17,210###0.16,194###0.16:How do I expand function calls in a string?  EOL EOL:This is documented in perlref. In general, this is fraught with quoting and readability problems, but it is possible. To interpolate a subroutine call (in list context) into a string!: EOL EOL    print "My sub returned @{[mysub(1,2,3)]} that time.\n";  EOL EOLIf you prefer scalar context, similar chicanery is also useful for arbitrary expressions!: EOL EOL    print "That yields ${\($n + 5)} widgets\n";  EOL EOLVersion 5.004 of Perl had a bug that gave list context to the expression in ${...}, but this is fixed in version 5.005. EOL EOLSee also ``How can I expand variables in text strings?'' in this section of the FAQ. EOL EOL:resolve###0.00272___birdsong###0.02180___request###0.00272___legal_right###0.00272___object###0.00272___song###0.02180___happening###0.00272___outcry###0.02180___process###0.00272___acoustic_device###0.00272___call_option###0.02180___software_system###0.00272___end###0.00272___occupation###0.00272___personation###0.00272___birdcall###0.02180___demand###0.00272___utility###0.00272___tune###0.00272___business###0.00272___call###0.02180___melodic_phrase###0.00272___motto###0.00272___visit###0.00272___goal###0.00272___social_event###0.00272___routine###0.02180___opportunity###0.00272___job###0.00272___business_establishment###0.00272___assets###0.00272___decision###0.00272___composition###0.00272___state###0.00272___assertion###0.00272___proceeding###0.00272___subroutine###0.02180___usage###0.00272___concept###0.00272___steal###0.00272___piece###0.00272___vociferation###0.02180___vocal_music###0.00272___influence###0.00272___natural_event###0.00272___right###0.00272___proceedings###0.00272___sound###0.00272___occurrence###0.00272___effusion###0.00272___phone_call###0.02180___dynasty###0.00272___place_of_business###0.00272___relation###0.00272___claim###0.02180___staff###0.00272___disposition###0.00272___time###0.00272___margin_call###0.02180___opus###0.00272___purpose###0.02180___line###0.00272___animal_communication###0.00272___shibboleth###0.00272___chance###0.00272___line_of_work###0.00272___outburst###0.00272___public_presentation###0.00272___concern###0.00272___software_package###0.00272___package###0.00272___instruction###0.00272___try###0.00272___social_occasion###0.02180___yell###0.02180___office###0.02180___usance###0.00272___sexual_relationship###0.00272___procedure###0.02180___construct###0.00272___resolution###0.00272___program_line###0.00272___occasion###0.02180___location###0.00272___activity###0.00272___calls###0.04360___ground###0.00272___statement###0.00272___option###0.00272___firmness###0.00272___melody###0.00272___shout###0.02180___characterization###0.00272___Call###0.02180___physical_thing###0.00272___resoluteness###0.00272___reason###0.00272___custom###0.00272___slogan###0.00272___bargain###0.00272___work###0.00272___averment###0.00272___attempt###0.00272___enactment###0.00272___endeavor###0.00272___asseveration###0.00272___software###0.00272___conclusion###0.00272___portrayal###0.00272___affair###0.02180___function###0.04360___rite###0.00272___command###0.00272___duty###0.00272___administrative_unit###0.00272___determination###0.00272___asking###0.00272___entity###0.00272___legal_proceeding###0.00272___performance###0.00272___piece_of_music###0.00272___telephone###0.00272___usefulness###0.00272___stock_option###0.00272___conception###0.00272___melodic_line###0.00272___physical_object###0.00272___strain###0.00272___subprogram###0.02180___gush###0.00272___catchword###0.00272___utterance###0.00272___musical_composition###0.00272___telephone_call###0.02180___telephony###0.00272___tendency###0.00272___part###0.02180___effort###0.00272___cry###0.02180___air###0.00272___buy###0.00272___vocalization###0.00272___administrative_body###0.00272___use###0.02180___endeavour###0.00272___inclination###0.00272___religious_rite###0.00272___role###0.02180:how###1.00000:how do###1.00000:context###0.052___expand###0.042___eol###0.035___fraught###0.029___chicanery###0.029___widgets###0.029___readability###0.029___eolversion###0.029___mysub###0.029___yields###0.029___interpolate###0.029___list###0.026___similar###0.023___gave###0.023___string###0.023___quoting###0.022___print###0.021___perlref###0.021___returned###0.021___fixed###0.020___arbitrary###0.020___prefer###0.019___useful###0.018___bug###0.018___problems###0.018___subroutine###0.018___section###0.017___in_general###0.017___possible###0.017___in_this###0.017___calls###0.017___expressions###0.017___faq###0.017___eolsee###0.016___expression###0.016___variables###0.016___strings###0.015___call###0.015___documented###0.014___scalar###0.014___version###0.014___text###0.014___sub###0.013___time###0.012___function###0.011___eolif###0.010___perl###0.006___
86:183###0.20,221###0.20,184###0.19,176###0.18,58###0.17,99###0.17,192###0.17,175###0.16,205###0.16,196###0.15:How do I find matching/nesting anything?  EOL EOL:This isn't something that can be done in one regular expression, no matter how complicated. To find something between two single characters, a pattern like /x([^x]*)x/ will get the intervening bits in $1. For multiple ones, then something more like /alpha(.*?)omega/ would be needed. But none of these deals with nested patterns, nor can they. For that you'll have to write a parser. EOL EOLIf you are serious about writing a parser, there are a number of modules or oddities that will make your life a lot easier. There are the CPAN modules Parse!:!:RecDescent, Parse!:!:Yapp, and Text!:!:Balanced; and the byacc program. EOL EOLOne simple destructive, inside-out approach that you might try is to pull out the smallest nesting parts one at a time!: EOL EOL    while (s/BEGIN((?!:(?!!BEGIN)(?!!END).)*)END//gs) { EOL# do something with $1 EOL    }   EOL EOLA more complicated and sneaky approach is to make Perl's regular expression engine do it for you. This is courtesy Dean Inada, and rather has the nature of an Obfuscated Perl Contest entry, but it really does work!: EOL EOL    # $_ contains the string to parse EOL    # BEGIN and END are the opening and closing markers for the EOL    # nested text. EOL EOL    @( = ('(',''); EOL    @) = (')',''); EOL    ($re=$_)=~s/((BEGIN)|(END)|.)/$)[!!$3]\Q$1\E$([!!$2]/gs; EOL    @$ = (eval{/$re/},$@!!~/unmatched/); EOL    print join("\n",@$[0..$#$]) if( $$[-1] );  EOL EOL::how###1.00000:how do###1.00000:eol###0.032___parse###0.031___begin###0.026___something###0.024___complicated###0.022___nested###0.022___parser###0.019___expression###0.015___approach###0.014___nature###0.014___inada###0.014___nesting###0.014___inside-out###0.014___oddities###0.014___omega###0.014___one_at_a_time###0.014___recdescent###0.014___s/begin###0.014___smallest###0.014___byacc###0.014___sneaky###0.014___unmatched###0.014___deals###0.014___yapp###0.014___markers###0.014___dean###0.014___matching/nesting###0.014___regular###0.013___find###0.013___text###0.013___intervening###0.012___destructive###0.012___life###0.012___no_matter###0.012___modules###0.012___balanced###0.011___obfuscated###0.011___eolone###0.011___closing###0.011___contest###0.011___alpha###0.011___none###0.011___engine###0.011___pull_out###0.011___join###0.011___entry###0.010___opening###0.010___patterns###0.010___rather###0.010___bits###0.010___multiple###0.010___parts###0.010___needed###0.010___courtesy###0.010___serious###0.009___easier###0.009___eval###0.009___anything###0.008___ones###0.008___eola###0.008___single###0.008___do_it###0.008___writing###0.008___a_lot###0.008___pattern###0.008___done###0.007___contains###0.007___you_are###0.007___perl's###0.007___characters###0.007___simple###0.007___try###0.006___isn't###0.006___you'll###0.006___really###0.006___number###0.006___two###0.006___work###0.006___write###0.006___string###0.005___print###0.005___program###0.005___eolif###0.004___cpan###0.004___one###0.004___perl###0.002___
87:120###0.27,149###0.27,85###0.19,95###0.19,183###0.17,92###0.15,214###0.14,102###0.13,100###0.12,198###0.12:How do I reverse a string?  EOL EOL:Use reverse() in scalar context, as documented in perlfunc/reverse. EOL EOL    $reversed = reverse $string;  EOL EOL:pattern###0.01163___bond###0.01163___consequence###0.01163___twine###0.09302___business###0.01163___piece_of_cloth###0.01163___aftermath###0.01163___shore###0.01163___ligament###0.01163___chain###0.09302___hamper###0.01163___business_organization###0.01163___cord###0.01163___line###0.01163___linear_unit###0.01163___series###0.01163___fibre###0.01163___wheelwork###0.01163___biochemist###0.01163___public_transport###0.01163___business_concern###0.01163___strand###0.09302___building_block###0.01163___shape###0.01163___concern###0.01163___train###0.09302___string###0.18605___unit###0.01163___shackle###0.01163___constraint###0.01163___geological_formation###0.01163___procession###0.01163___form###0.01163___piece_of_material###0.01163___restraint###0.01163___fiber###0.01163___formation###0.01163___geology###0.01163___trammel###0.01163___street###0.01163___trammels###0.01163___necklace###0.01163___business_organisation###0.01163:how###1.00000:how do###1.00000:reverse###0.313___perlfunc/reverse###0.139___reversed###0.124___string###0.108___eol###0.091___context###0.082___documented###0.070___scalar###0.069___
88:99###0.28,85###0.20,96###0.19,183###0.17,94###0.16,95###0.15,178###0.15,221###0.14,101###0.13,89###0.13:How do I expand tabs in a string?  EOL EOL:You can do it yourself!: EOL EOL    1 while $string =~ s/\t+/' ' x (length($&) * 8 - length($`) % 8)/e;  EOL EOLOr you can just use the Text!:!:Tabs module (part of the standard Perl distribution). EOL EOL    use Text!:!:Tabs; EOL    @expanded_lines = expand(@lines_with_tabs);  EOL EOL:pattern###0.00676___bond###0.00676___blemish###0.00676___obstruction###0.00676___weave###0.00676___consequence###0.00676___twine###0.05405___inactiveness###0.00676___inaction###0.00676___business###0.00676___piece_of_cloth###0.00676___aftermath###0.00676___order_of_payment###0.00676___shore###0.00676___tab###0.05405___inactivity###0.00676___ligament###0.00676___scrutiny###0.00676___chain###0.05405___business_organization###0.00676___hamper###0.00676___account###0.00676___cord###0.00676___appraisal###0.00676___line###0.00676___invoice###0.00676___linear_unit###0.00676___series###0.00676___fibre###0.00676___wheelwork###0.00676___biochemist###0.00676___examination###0.00676___public_transport###0.00676___business_concern###0.00676___bill###0.00676___strand###0.05405___building_block###0.00676___chit###0.05405___shape###0.00676___concern###0.00676___train###0.05405___string###0.10811___unit###0.00676___mark###0.00676___chess_move###0.00676___shackle###0.00676___proof###0.00676___constraint###0.00676___procession###0.00676___geological_formation###0.00676___form###0.00676___piece_of_material###0.00676___restraint###0.00676___difficulty###0.00676___fiber###0.00676___formation###0.00676___geology###0.00676___cogent_evidence###0.00676___trammel###0.00676___draft###0.00676___tabs###0.10811___street###0.00676___defect###0.00676___trammels###0.00676___necklace###0.00676___bill_of_exchange###0.00676___assessment###0.00676___business_organisation###0.00676___check###0.05405:how###1.00000:how do###1.00000:tabs###0.214___expand###0.102___length###0.091___eol###0.077___expanded_lines###0.071___lines_with_tabs###0.071___text###0.069___string###0.055___do_it###0.042___yourself###0.041___eolor###0.033___part###0.032___distribution###0.030___standard###0.029___module###0.022___perl###0.014___
89:164###0.20,99###0.19,94###0.15,221###0.15,96###0.14,88###0.13,176###0.13,92###0.11,175###0.11,58###0.11:How do I reformat a paragraph?  EOL EOL:Use Text!:!:Wrap (part of the standard Perl distribution)!: EOL EOL    use Text!:!:Wrap; EOL    print wrap("\t", '  ', @paragraphs);  EOL EOLThe paragraphs you give to Text!:!:Wrap should not contain embedded newlines. Text!:!:Wrap doesn't justify the lines (flush- right). EOL EOL:paragraph###1.00000:how###1.00000:how do###1.00000:wrap###0.226___text###0.098___paragraphs###0.083___justify###0.050___reformat###0.045___eol###0.044___should_not###0.041___flush###0.041___contain###0.037___paragraph###0.036___newlines###0.036___embedded###0.035___give###0.030___right###0.029___lines###0.026___part###0.023___distribution###0.022___standard###0.021___eolthe###0.020___doesn't###0.019___print###0.018___perl###0.010___
90:178###0.35,183###0.18,196###0.17,95###0.16,188###0.16,97###0.15,175###0.14,210###0.14,92###0.13,205###0.13:How can I access/change the first N letters of a string?  EOL EOL:There are many ways. If you just want to grab a copy, use substr()!: EOL EOL    $first_byte = substr($a, 0, 1);  EOL EOLIf you want to modify part of a string, the simplest way is often to use substr() as an lvalue!: EOL EOL    substr($a, 0, 3) = "Tom";  EOL EOLAlthough those with a pattern matching kind of thought process will likely prefer EOL EOL    $a =~ s/^.../Tom/;  EOL EOL:n###1.00000:how###1.00000:how can###1.00000:substr###0.133___tom###0.069___eol###0.062___first_byte###0.048___access/change###0.048___lvalue###0.042___thought###0.042___letters###0.039___eolalthough###0.037___string###0.037___grab###0.036___modify###0.034___kind_of###0.033___simplest###0.033___copy###0.033___likely###0.033___matching###0.032___prefer###0.030___ways###0.028___pattern###0.027___process###0.027___often###0.026___part###0.022___first###0.021___eolif###0.016___
91:92###0.31,187###0.20,106###0.17,183###0.16,142###0.16,210###0.14,99###0.14,177###0.13,38###0.13,175###0.13:How do I change the Nth occurrence of something?  EOL EOL:You have to keep track of N yourself. For example, let's say you want to change the fifth occurrence of "whoever" or "whomever" into "whosoever" or "whomsoever", case insensitively. These all assume that $_ contains the string to be altered. EOL EOL    $count = 0; EOL    s{((whom?)ever)}{ EOL++$count == 5   # is it the 5th? EOL    ? "${2}soever"# yes, swap EOL    !: $1# renege and leave it there EOL    }ige;  EOL EOLIn the more general case, you can use the /g modifier in a while loop, keeping count of matches. EOL EOL    $WANT = 3; EOL    $count = 0; EOL    $_ = "One fish two fish red fish blue fish"; EOL    while (/(\w+)\s+fish\b/gi) { EOL        if (++$count == $WANT) { EOL            print "The third fish is a $1 one.\n"; EOL        } EOL    }  EOL EOLThat prints out!: "The third fish is a red one." You can also use a repetition count and repeated pattern like this!: EOL EOL    /(?!:\w+\s+fish\s+){2}(\w+)\s+fish/i;  EOL EOL:happening###0.24242___natural_event###0.24242___occurrence###0.48485___event###0.03030:how###1.00000:how do###1.00000:fish###0.109___count###0.068___eol###0.047___s+fish###0.036___occurrence###0.036___third###0.030___red###0.028___case###0.020___change###0.019___track###0.018___whoever###0.018___whomever###0.018___whomsoever###0.018___ige###0.018___altered###0.018___whosoever###0.018___nth###0.018___repetition###0.018___s+fish/i###0.018___soever###0.018___one###0.017___fifth###0.016___renege###0.016___insensitively###0.016___b/gi###0.016___keeping###0.015___whom###0.015___swap###0.015___blue###0.015___repeated###0.014___leave###0.013___modifier###0.013___prints###0.013___matches###0.013___let's###0.013___loop###0.013___ever###0.013___assume###0.013___eolthat###0.012___keep###0.012___general###0.011___yourself###0.010___pattern###0.010___say###0.010___contains###0.010___eolin###0.009___two###0.008___for_example###0.008___something###0.008___you_have###0.007___string###0.007___print###0.006___
92:91###0.31,187###0.25,106###0.22,95###0.19,142###0.19,70###0.18,183###0.18,175###0.16,87###0.15,100###0.15:How can I count the number of occurrences of a substring within a string?  EOL EOL:There are a number of ways, with varying efficiency. If you want a count of a certain single character (X) within a string, you can use the tr/// function like so!: EOL EOL    $string = "ThisXlineXhasXsomeXx'sXinXit"; EOL    $count = ($string =~ tr/X//); EOL    print "There are $count X characters in the string";  EOL EOLThis is fine if you are just looking for a single character. However, if you are trying to count multiple character substrings within a larger string, tr/// won't work. What you can do is wrap a while() loop around a global pattern match. For example, let's count negative integers!: EOL EOL    $string = "-9 55 48 -2 23 -76 4 14 -44"; EOL    while ($string =~ /-\d+/g) { $count++ } EOL    print "There are $count negative numbers in the string";  EOL EOL:case###0.00472___instrument###0.00472___rotation###0.00472___physical_structure###0.00472___happening###0.03774___effect###0.00472___numeral###0.03774___process###0.00472___change_of_direction###0.00472___software_system###0.00472___favour###0.00472___presence###0.00472___personage###0.00472___fragment###0.00472___routine###0.03774___act###0.03774___manifestation###0.00472___provisions###0.00472___provision###0.00472___opening###0.00472___unit_of_measurement###0.00472___relative###0.00472___perception###0.00472___reflexion###0.00472___beginning###0.00472___legal_document###0.00472___movement###0.00472___natural_event###0.03774___periodical###0.00472___shift###0.00472___occurrences###0.07547___occurrence###0.03774___influential_person###0.00472___relation###0.00472___bit###0.03774___time###0.00472___rhetorical_device###0.00472___printing###0.00472___change_of_course###0.00472___maneuver###0.00472___manoeuvre###0.00472___walk###0.00472___public_presentation###0.00472___example###0.00472___curved_shape###0.00472___official_document###0.00472___organic_structure###0.00472___dramatic_composition###0.00472___shape###0.00472___sum###0.00472___curve###0.00472___software_package###0.00472___package###0.00472___supplies###0.00472___work_shift###0.00472___motion###0.00472___symbol###0.00472___procedure###0.00472___reflection###0.00472___activity###0.00472___sum_of_money###0.00472___unit###0.00472___instance###0.00472___cognitive_content###0.00472___legal_instrument###0.00472___reorientation###0.00472___stores###0.00472___cutting_implement###0.00472___impression###0.00472___saddlery###0.00472___period_of_play###0.00472___form###0.00472___favor###0.00472___small_indefinite_amount###0.00472___income###0.00472___number###0.07547___mental_object###0.00472___figure###0.03774___whole_number###0.00472___software###0.00472___perceptual_experience###0.00472___turn###0.03774___simulation###0.00472___dramatic_work###0.00472___integer###0.00472___phenomenon###0.00472___illustration###0.00472___decoration###0.00472___event###0.00472___stable_gear###0.00472___development###0.00472___body###0.00472___important_person###0.00472___performance###0.00472___percept###0.00472___playing_period###0.00472___supply###0.00472___issue###0.03774___duty_period###0.00472___mouthful###0.00472___expression###0.00472___taste###0.00472___supplying###0.00472___amount###0.00472___play###0.00472___model###0.00472___tack###0.00472___amount_of_money###0.00472___small_indefinite_quantity###0.00472___content###0.00472___ornamentation###0.00472___ornament###0.00472:how###1.00000:how can###1.00000:count###0.124___string###0.086___within###0.053___character###0.042___negative###0.038___eol###0.035___single###0.030___you_are###0.026___tr/x###0.024___thisxlinexhasxsomexx'sxinxit###0.024___substrings###0.024___number###0.022___larger###0.022___substring###0.022___wrap###0.022___occurrences###0.020___varying###0.020___efficiency###0.019___integers###0.018___print###0.017___certain###0.017___fine###0.017___let's###0.017___loop###0.017___multiple###0.017___looking_for###0.017___trying###0.017___around###0.017___global###0.016___numbers###0.015___however###0.014___ways###0.014___match###0.014___pattern###0.014___won't###0.013___characters###0.012___work###0.011___for_example###0.011___eolthis###0.011___function###0.009___
93:175###0.27,186###0.25,189###0.23,177###0.23,183###0.20,101###0.19,141###0.19,187###0.19,173###0.18,149###0.18:How do I capitalize all the words on one line?  EOL EOL:To make the first letter of each word upper case!: EOL EOL        $line =~ s/\b(\w)/\U$1/g;  EOL EOLThis has the strange effect of turning "don't do it" into "Don'T Do It". Sometimes you might want this. Other times you might need a more thorough solution (Suggested by brian d. foy)!: EOL EOL    $string =~ s/ ( EOL                 (^\w)    #at the beginning of the line EOL                   |      # or EOL                 (\s\w)   #preceded by whitespace EOL                   ) EOL                /\U$1/xg; EOL    $string =~ /([\w']+)/\u\L$1/g;  EOL EOLTo make the whole line upper case!: EOL EOL        $line = uc($line);  EOL EOLTo force each word to be lower case, with the first letter upper case!: EOL EOL        $line =~ s/(\w+)/\u\L$1/g;  EOL EOLYou can (and probably should) enable locale awareness of those characters by placing a use locale pragma in your program. See perllocale for endless details on locales. EOL EOLThis is sometimes referred to as putting something into "title case", but that's not quite accurate. Consider the proper capitalization of the movie Dr. Strangelove or!: How I Learned to Stop Worrying and Love the Bomb, for example. EOL EOL:successiveness###0.00183___change_of_location###0.00183___filiation###0.00183___humor###0.00183___depression###0.00183___run-in###0.01468___playacting###0.00183___object###0.00183___boundary###0.00183___family_relationship###0.00183___visual_perception###0.00183___conductor###0.00183___application###0.00183___paper_currency###0.00183___scope###0.00183___verse_form###0.00183___period_of_time###0.00183___communication###0.00183___homicide###0.00183___beholding###0.00183___wrangle###0.01468___ancestry###0.01468___aura###0.00183___communication_channel###0.01468___layer###0.00183___headache###0.00183___occupation###0.01468___production###0.00183___business###0.01468___nutriment###0.00183___tune###0.01468___telegram###0.00183___water###0.00183___melodic_phrase###0.01468___origin###0.01468___nutrition###0.00183___speech_production###0.00183___marketing###0.00183___reasoning###0.00183___passageway###0.00183___stratum###0.00183___comparison###0.00183___job###0.01468___bargaining###0.00183___bodily_fluid###0.00183___book###0.00183___applications_programme###0.00183___time_period###0.00183___performing###0.00183___chronological_succession###0.00183___reach###0.00183___angular_shape###0.00183___gas###0.00183___workplace###0.00183___inheritance###0.00183___logical_argument###0.01468___blood###0.01468___television_station###0.00183___beginning###0.00183___vexation###0.00183___movement###0.00183___lyric###0.01468___quality###0.00183___crease###0.01468___quarrel###0.01468___aliment###0.00183___variety###0.00183___course###0.01468___differentiation###0.00183___joint###0.00183___education###0.00183___hereditary_pattern###0.00183___wire###0.00183___robbery###0.00183___genealogy###0.00183___telecasting###0.00183___mental_faculty###0.00183___folding_money###0.00183___hero###0.00183___text###0.00183___conflict###0.00183___difference###0.00183___educational_activity###0.00183___row###0.01468___musical_perception###0.00183___disposition###0.00183___sport###0.00183___acting###0.00183___dustup###0.01468___strip###0.00183___expressive_style###0.00183___discussion###0.00183___line###0.02936___comment###0.00183___linear_unit###0.00183___murder###0.00183___region###0.00183___medium###0.00183___stock###0.00183___difference_of_opinion###0.00183___series###0.00183___commerce###0.00183___side###0.00183___high_status###0.00183___victuals###0.00183___pedigree###0.01468___derivation###0.00183___incline###0.00183___angularity###0.00183___style###0.00183___way###0.00183___pedagogy###0.00183___auditory_communication###0.00183___humour###0.00183___target###0.00183___nourishment###0.00183___obligation###0.00183___distinction###0.00183___lineage###0.00183___abstract_thought###0.00183___trench###0.00183___dispute###0.00183___adulthood###0.00183___give-and-take###0.00183___seam###0.01468___sector###0.00183___paper_money###0.00183___rounder###0.00183___concern###0.00183___module###0.00183___actor's_line###0.01468___higher_cognitive_process###0.00183___commercial_activity###0.00183___relationship###0.00183___move###0.00183___action###0.00183___installation###0.00183___body_of_water###0.00183___language###0.01468___commercialism###0.00183___instruction###0.00183___libertine###0.00183___motion###0.00183___alimentation###0.00183___kinship###0.00183___speech###0.01468___rope###0.00183___reprimand###0.00183___slaying###0.00183___sequence###0.00183___temperament###0.00183___seeing###0.00183___orbit###0.00183___activity###0.00183___poem###0.00183___personal_letter###0.00183___textual_matter###0.00183___business_activity###0.00183___traveling###0.00183___playing###0.00183___melody###0.01468___rebuke###0.00183___sustenance###0.00183___commentary###0.00183___word###0.00183___television###0.00183___breed###0.00183___impression###0.00183___unfortunate_person###0.00183___argumentation###0.01468___objective###0.00183___written_account###0.00183___cable###0.01468___work###0.00183___written_record###0.00183___acquiring###0.00183___logical_thinking###0.00183___imprint###0.00183___atmosphere###0.00183___range###0.00183___faculty###0.00183___speaking###0.00183___teaching###0.00183___tone_of_voice###0.00183___responsibility###0.00183___difficulty###0.00183___bound###0.00183___mercantilism###0.00183___getting###0.00183___debauchee###0.00183___contrast###0.01468___crinkle###0.01468___reproof###0.00183___oppositeness###0.00183___parentage###0.01468___duty###0.00183___enterprise###0.00183___tv_station###0.00183___travel###0.00183___compass###0.00183___athletics###0.00183___liquid_body_substance###0.00183___wind###0.00183___family_tree###0.00183___wrinkle###0.01468___video###0.00183___body_fluid###0.00183___arrow###0.00183___musical_notation###0.00183___tone###0.00183___speech_act###0.00183___direction###0.00183___unfortunate###0.00183___element###0.00183___reprehension###0.00183___reproval###0.00183___worry###0.00183___music###0.00183___strain###0.00183___furrow###0.01468___travelling###0.00183___comparing###0.00183___channel###0.01468___utterance###0.00183___succession###0.00183___short_letter###0.01468___execution###0.00183___transmission###0.00183___bounds###0.00183___tv###0.00183___application_program###0.00183___opposition###0.00183___communicating###0.00183___product###0.00183___point###0.00183___part###0.00183___certificate_of_indebtedness###0.00183___aim###0.00183___television_system###0.00183___demarcation###0.01468___array###0.00183___passage###0.00183___air###0.01468___words###0.02936___period###0.00183___slope###0.00183___vocalization###0.00183___social_control###0.00183___ambit###0.00183___people###0.00183___debt_instrument###0.00183___descent###0.01468___chronological_sequence###0.00183___facility###0.00183___intersection###0.00183___note###0.01468:how###1.00000:how do###1.00000:line###0.053___upper_case###0.050___eol###0.041___letter###0.026___locale###0.024___word###0.020___do_it###0.019___sometimes###0.018___eolto###0.018___turning###0.016___dr.###0.016___foy###0.016___capitalization###0.016___capitalize###0.016___bomb###0.016___locales###0.016___awareness###0.016___love###0.016___lower_case###0.016___movie###0.016___placing###0.016___accurate###0.016___brian###0.016___endless###0.016___referred###0.016___strangelove###0.016___thorough###0.016___preceded###0.014___learned###0.014___enable###0.014___title###0.014___effect###0.014___worrying###0.014___eolthis###0.014___first###0.014___putting###0.013___strange###0.013___suggested###0.013___beginning###0.013___string###0.012___don't###0.012___stop###0.012___force###0.012___pragma###0.012___whitespace###0.012___perllocale###0.012___words###0.011___quite###0.011___whole###0.010___consider###0.010___proper###0.010___all_the###0.010___times###0.009___case###0.009___solution###0.009___that's###0.008___eolyou###0.008___characters###0.008___details###0.008___for_example###0.007___something###0.007___probably###0.006___need###0.006___program###0.005___one###0.005___
94:99###0.25,178###0.18,175###0.17,96###0.16,88###0.16,221###0.16,183###0.16,89###0.15,176###0.15,141###0.14:How can I split a [character] delimited string except when inside [character]? (Comma-separated files)  EOL EOL:Take the example case of trying to split a string that is comma-separated into its different fields. (We'll pretend you said comma-separated, not comma-delimited, which is different and almost never what you mean.) You can't use split(/,/) because you shouldn't split if the comma is inside quotes. For example, take a data line like this!: EOL EOL    SAR001,"","Cimetrix, Inc","Bob Smith","CAM",N,8,1,0,7,"Error, Core Dumped"  EOL EOLDue to the restriction of the quotes, this is a fairly complex problem. Thankfully, we have Jeffrey Friedl, author of a highly recommended book on regular expressions, to handle these for us. He suggests (assuming your string is contained in $text)!: EOL EOL     @new = (); EOL     push(@new, $+) while $text =~ m{ EOL         "([^\"\\]*(?!:\\.[^\"\\]*)*)",?  # groups the phrase inside the quotes EOL       | ([^,]+),? EOL       | , EOL     }gx; EOL     push(@new, undef) if substr($text,-1,1) eq ',';  EOL EOLIf you want to represent quotation marks inside a quotation-mark-delimited field, escape them with backslashes (eg, "like \"this\"". Unescaping them is a task addressed earlier in this section. EOL EOLAlternatively, the Text!:!:ParseWords module (part of the standard Perl distribution) lets you say!: EOL EOL    use Text!:!:ParseWords; EOL    @new = quotewords(",", 0, $text);  EOL EOLThere's also a Text!:!:CSV (Comma-Separated Values) module on CPAN. EOL EOL:state_of_mind###0.00313___textile###0.00313___pattern###0.00313___bond###0.00313___natural_covering###0.00313___case###0.02500___object###0.00313___recommendation###0.00313___consequence###0.00313___happening###0.00313___twine###0.02500___stuff###0.00313___grapheme###0.02500___appearance###0.00313___personation###0.00313___utility###0.00313___tune###0.00313___business###0.00313___attribute###0.00313___piece_of_cloth###0.00313___problem###0.00313___melodic_phrase###0.00313___aftermath###0.00313___human###0.00313___shore###0.00313___book###0.00313___cloth###0.00313___taxon###0.00313___property###0.00313___assets###0.00313___grammatical_category###0.00313___reference###0.02500___written_symbol###0.00313___proceeding###0.00313___annotation###0.00313___frame###0.00313___cover###0.00313___ligament###0.00313___concept###0.00313___quality###0.02500___covering###0.00313___remark###0.00313___grownup###0.00313___fact###0.00313___chain###0.02500___natural_event###0.00313___framing###0.00313___variety###0.00313___business_organization###0.00313___hamper###0.00313___framework###0.00313___proceedings###0.00313___grade###0.00313___occurrence###0.00313___cord###0.00313___fabric###0.00313___indicator###0.00313___relation###0.00313___containerful###0.00313___testimonial###0.00313___frame_of_mind###0.00313___line###0.00313___comment###0.00313___linear_unit###0.00313___series###0.00313___mortal###0.00313___printed_symbol###0.00313___fibre###0.02500___wheelwork###0.00313___biochemist###0.00313___public_transport###0.00313___business_concern###0.00313___strand###0.02500___building_block###0.00313___shape###0.00313___concern###0.00313___somebody###0.00313___someone###0.00313___train###0.02500___action###0.00313___try###0.00313___sound_property###0.00313___trait###0.00313___symbol###0.00313___construct###0.00313___string###0.05000___location###0.00313___activity###0.00313___unit###0.00313___unusual_person###0.00313___statement###0.00313___kind###0.00313___persona###0.02500___melody###0.00313___shackle###0.00313___graphic_symbol###0.02500___constraint###0.00313___characterization###0.00313___sort###0.00313___physical_thing###0.00313___geological_formation###0.00313___procession###0.00313___good_word###0.00313___form###0.00313___publication###0.00313___argument###0.00313___block###0.00313___attempt###0.00313___enactment###0.00313___piece_of_material###0.00313___endeavor###0.00313___substance###0.00313___restraint###0.00313___bed_linen###0.00313___theatrical_role###0.02500___portrayal###0.00313___character###0.05000___fiber###0.02500___formation###0.00313___geology###0.00313___dimension###0.00313___duty###0.00313___entity###0.00313___trammel###0.00313___individual###0.00313___social_status###0.00313___legal_proceeding###0.00313___usefulness###0.00313___conception###0.00313___adult###0.00313___circumstance###0.00313___melodic_line###0.00313___physical_object###0.00313___strain###0.00313___person###0.00313___housing###0.00313___street###0.00313___rank###0.00313___degree###0.00313___anomaly###0.00313___taxonomic_group###0.00313___notation###0.00313___visual_aspect###0.00313___part###0.02500___social_station###0.00313___lineament###0.02500___meaning###0.00313___social_rank###0.00313___material###0.00313___effort###0.00313___trammels###0.00313___type###0.02500___air###0.00313___body_part###0.00313___necklace###0.00313___eccentric###0.02500___level###0.00313___syntactic_category###0.00313___container###0.00313___endeavour###0.00313___business_organisation###0.00313___soul###0.00313___role###0.02500___note###0.00313:when###0.50000___how###0.50000:when inside###0.50000___how can###0.50000:comma-separated###0.047___text###0.040___inside###0.035___split###0.033___quotes###0.029___eol###0.027___parsewords###0.023___new###0.019___push###0.015___string###0.013___character###0.013___different###0.012___cam###0.011___quotewords###0.011___quotation-mark-delimited###0.011___quotation###0.011___recommended###0.011___restriction###0.011___sar001###0.011___smith###0.011___suggests###0.011___phrase###0.011___backslashes###0.011___addressed###0.011___thankfully###0.011___unescaping###0.011___comma-delimited###0.011___eoldue###0.011___cimetrix###0.011___dumped###0.011___marks###0.011___bob###0.011___csv###0.011___delimited###0.010___field###0.010___contained###0.010___eolthere's###0.009___we_have###0.009___pretend###0.009___fairly###0.009___author###0.009___represent###0.009___task###0.009___eolalternatively###0.009___groups###0.009___lets###0.009___fields###0.009___highly###0.009___comma###0.009___inc###0.009___core###0.008___except###0.008___escape###0.008___we'll###0.008___earlier###0.008___complex###0.008___trying###0.008___substr###0.008___jeffrey###0.008___friedl###0.008___almost###0.007___assuming###0.007___book###0.007___shouldn't###0.007___module###0.007___section###0.007___error###0.007___in_this###0.007___expressions###0.006___mean###0.006___say###0.006___handle###0.006___case###0.006___that_is###0.006___undef###0.006___problem###0.006___data###0.005___regular###0.005___files###0.005___values###0.005___example###0.005___line###0.005___part###0.005___for_example###0.005___distribution###0.005___standard###0.004___can't###0.004___eolif###0.004___cpan###0.004___perl###0.002___
95:183###0.28,121###0.24,122###0.24,105###0.24,126###0.21,101###0.21,111###0.21,103###0.21,118###0.20,100###0.20:How do I strip blank space from the beginning/end of a string?  EOL EOL:Although the simplest approach would seem to be EOL EOL    $string =~ s/^\s*(.*?)\s*$/$1/;  EOL EOLnot only is this unnecessarily slow and destructive, it also fails with embedded newlines. It is much faster to do this operation in two steps!: EOL EOL    $string =~ s/^\s+//; EOL    $string =~ s/\s+$//;  EOL EOLOr more nicely written as!: EOL EOL    for ($string) { EOLs/^\s+//; EOLs/\s+$//; EOL    }  EOL EOLThis idiom takes advantage of the foreach loop's aliasing behavior to factor out common code. You can do this on several strings at once, or arrays, or even the values of a hash if you use a slice!: EOL EOL    # trim whitespace in the scalar, the array, EOL    # and all the values in the hash EOL    foreach ($scalar, @array, @hash{keys %hash}) { EOL        s/^\s+//; EOL        s/\s+$//; EOL    }  EOL EOL:geographic_region###0.00493___young_person###0.00493___point_in_time###0.00493___noesis###0.00493___slide###0.00493___cartridge###0.00493___grapheme###0.00493___quad###0.03941___deaf-and-dumb_person###0.00493___occupation###0.00493___crack###0.00493___business###0.00493___blooper###0.00493___item###0.00493___stalk###0.00493___locality###0.00493___job###0.00493___sibling###0.00493___boo-boo###0.00493___gap###0.00493___area###0.00493___simple###0.00493___potter's_clay###0.00493___abstraction###0.00493___position###0.00493___vicinity###0.00493___slip###0.03941___misadventure###0.00493___anchorage###0.00493___lacuna###0.03941___spacing###0.00493___size###0.00493___interval###0.00493___knowledge###0.00493___blunder###0.00493___strip###0.07882___line###0.00493___region###0.00493___extensor###0.00493___time_interval###0.00493___geographic_area###0.00493___fuckup###0.00493___line_of_work###0.00493___public_square###0.00493___bungle###0.00493___expanse###0.00493___mistake###0.00493___smoothness###0.00493___square###0.00493___spring_chicken###0.00493___spatial_arrangement###0.00493___residence###0.00493___indifference###0.00493___undergarment###0.00493___office###0.00493___anchorage_ground###0.00493___mute###0.00493___condition###0.00493___location###0.00493___mischance###0.00493___surface_area###0.00493___graphic_symbol###0.00493___sheet###0.00493___country###0.00493___flight_maneuver###0.00493___simpleton###0.00493___piece_of_paper###0.00493___artefact###0.00493___distance###0.03941___figure###0.00493___potter's_earth###0.00493___neighbourhood###0.00493___bed_linen###0.00493___neighborhood###0.00493___dummy###0.03941___character###0.00493___blank###0.07882___function###0.00493___youth###0.00493___artifact###0.00493___younker###0.00493___airplane_maneuver###0.00493___social_status###0.00493___amorphous_shape###0.00493___status###0.00493___glide###0.00493___stem###0.00493___geographical_area###0.00493___deaf-mute###0.00493___flub###0.00493___sib###0.00493___abode###0.00493___error###0.00493___boner###0.00493___space###0.07882___fault###0.00493___rank###0.00493___botch###0.00493___geographical_region###0.00493___panel###0.00493___mishap###0.00493___point###0.00493___part###0.00493___social_station###0.00493___social_rank###0.00493___passage###0.00493___type###0.00493___sheet_of_paper###0.00493___foul-up###0.00493___evasion###0.00493___bloomer###0.00493___situation###0.00493___cognition###0.00493___place###0.03941___extensor_muscle###0.00493___role###0.00493:how###1.00000:how do###1.00000:eol###0.057___string###0.046___hash###0.043___eols###0.040___foreach###0.030___factor_out###0.024___blank_space###0.024___loop's###0.024___eolnot###0.024___beginning/end###0.024___aliasing###0.024___unnecessarily###0.024___scalar###0.024___array###0.023___values###0.023___destructive###0.021___idiom###0.021___seem###0.021___trim###0.021___strip###0.020___slice###0.020___advantage###0.020___nicely###0.018___steps###0.018___newlines###0.017___at_once###0.017___whitespace###0.017___simplest###0.016___fails###0.016___slow###0.016___embedded###0.016___common###0.016___behavior###0.015___although###0.015___takes###0.015___operation###0.014___all_the###0.014___faster###0.014___arrays###0.013___several###0.013___keys###0.013___strings###0.012___approach###0.012___written###0.012___even###0.011___eolor###0.011___two###0.011___eolthis###0.010___code###0.009___
96:99###0.20,88###0.19,94###0.16,89###0.14,92###0.12,178###0.11,221###0.11,100###0.10,190###0.10,183###0.10:How do I pad a string with blanks or pad a number with zeroes?  EOL EOL:(This answer contributed by Uri Guttman, with kibitzing from Bart Lateur.) EOL EOLIn the following examples, $pad_len is the length to which you wish to pad the string, $text or $num contains the string to be padded, and $pad_char contains the padding character. You can use a single character string constant instead of the $pad_char variable if you know what it is in advance. And in the same way you can use an integer in place of $pad_len if you know the pad length in advance. EOL EOLThe simplest method uses the sprintf function. It can pad on the left or right with blanks and on the left with zeroes and it will not truncate the result. The pack function can only pad strings on the right with blanks and it will truncate the result to a maximum length of $pad_len. EOL EOL    # Left padding a string with blanks (no truncation)!: EOL    $padded = sprintf("%${pad_len}s", $text); EOL EOL    # Right padding a string with blanks (no truncation)!: EOL    $padded = sprintf("%-${pad_len}s", $text); EOL EOL    # Left padding a number with 0 (no truncation)!: EOL    $padded = sprintf("%0${pad_len}d", $num); EOL EOL    # Right padding a string with blanks using pack (will truncate)!: EOL    $padded = pack("A$pad_len",$text);  EOL EOLIf you need to pad with a character other than blank or zero you can use one of the following methods. They all generate a pad string with the x operator and combine that with $text. These methods do not truncate $text. EOL EOLLeft and right padding with any character, creating a new string!: EOL EOL    $padded = $pad_char x ( $pad_len - length( $text ) ) . $text; EOL    $padded = $text . $pad_char x ( $pad_len - length( $text ) );  EOL EOLLeft and right padding with any character, modifying $text directly!: EOL EOL    substr( $text, 0, 0 ) = $pad_char x ( $pad_len - length( $text ) ); EOL    $text .= $pad_char x ( $pad_len - length( $text ) );  EOL EOL:pattern###0.00641___bond###0.00641___consequence###0.00641___twine###0.05128___platform###0.00641___diggings###0.05128___tablet###0.05128___business###0.00641___piece_of_cloth###0.00641___slab###0.00641___aftermath###0.00641___shore###0.00641___dose###0.00641___ligament###0.00641___chain###0.05128___domiciliation###0.05128___hamper###0.00641___business_organization###0.00641___cord###0.00641___line###0.00641___digs###0.05128___linear_unit###0.00641___series###0.00641___fibre###0.00641___wheelwork###0.00641___biochemist###0.00641___public_transport###0.00641___business_concern###0.00641___strand###0.05128___building_block###0.00641___shape###0.00641___concern###0.00641___train###0.05128___launch_area###0.05128___lodgings###0.05128___string###0.10256___unit###0.00641___shackle###0.00641___constraint###0.00641___pad###0.10256___procession###0.00641___geological_formation###0.00641___form###0.00641___piece_of_material###0.00641___restraint###0.00641___paper###0.00641___fiber###0.00641___formation###0.00641___geology###0.00641___living_quarters###0.00641___trammel###0.00641___quarters###0.00641___street###0.00641___trammels###0.00641___necklace###0.00641___business_organisation###0.00641:how###1.00000:how do###1.00000:pad_len###0.088___pad###0.064___text###0.058___padded###0.056___padding###0.056___pad_char###0.048___blanks###0.037___length###0.036___string###0.028___right###0.027___truncate###0.025___truncation###0.024___eol###0.023___character###0.022___sprintf###0.021___left###0.020___zeroes###0.016___eolleft###0.016___in_advance###0.016___pack###0.015___num###0.013___result###0.012___it_will###0.010___methods###0.010___know###0.009___contains###0.008___lateur###0.008___maximum###0.008___kibitzing###0.008___combine###0.008___bart###0.008___guttman###0.008___following###0.007___number###0.007___zero###0.007___in_place###0.007___contributed###0.007___blank###0.006___uri###0.006___other_than###0.006___modifying###0.006___integer###0.006___function###0.006___constant###0.006___generate###0.006___creating###0.005___simplest###0.005___substr###0.005___wish###0.005___do_not###0.005___directly###0.005___single###0.004___examples###0.004___answer###0.004___operator###0.004___uses###0.004___method###0.004___instead_of###0.004___eolin###0.004___strings###0.004___variable###0.003___need###0.003___eolthe###0.003___new###0.003___using###0.002___eolif###0.002___one###0.002___
97:69###0.16,51###0.15,90###0.15,178###0.14,205###0.13,183###0.13,100###0.11,210###0.11,221###0.11,165###0.11:How do I extract selected columns from a string?  EOL EOL:Use substr() or unpack(), both documented in perlfunc. If you prefer thinking in terms of columns instead of widths, you can use this kind of thing!: EOL EOL    # determine the unpack format needed to split Linux ps output EOL    # arguments are cut columns EOL    my $fmt = cut2fmt(8, 14, 20, 26, 30, 34, 41, 47, 59, 63, 67, 72); EOL EOL    sub cut2fmt { EOLmy(@positions) = @_; EOLmy $template  = ''; EOLmy $lastpos   = 1; EOLfor my $place (@positions) { EOL    $template .= "A" . ($place - $lastpos) . " "; EOL    $lastpos   = $place; EOL} EOL$template .= "A*"; EOLreturn $template; EOL    }  EOL EOL:pattern###0.00588___bond###0.00588___indian_file###0.00588___consequence###0.00588___structure###0.00588___twine###0.04706___principle###0.00588___business###0.00588___editorial###0.04706___piece_of_cloth###0.00588___aftermath###0.00588___shore###0.00588___tower###0.04706___ligament###0.00588___single_file###0.00588___upright###0.00588___chain###0.04706___business_organization###0.00588___hamper###0.00588___columns###0.09412___cord###0.00588___rule###0.00588___vertical###0.00588___boat###0.00588___line###0.00588___linear_unit###0.00588___series###0.00588___fibre###0.00588___wheelwork###0.00588___biochemist###0.00588___construction###0.00588___supporter###0.00588___booster###0.00588___public_transport###0.00588___business_concern###0.00588___strand###0.04706___building_block###0.00588___shape###0.00588___article###0.00588___concern###0.00588___tubing###0.00588___file###0.00588___train###0.04706___tube###0.00588___string###0.09412___unit###0.00588___champion###0.00588___shackle###0.00588___constraint###0.00588___procession###0.00588___geological_formation###0.00588___form###0.00588___piece_of_material###0.00588___restraint###0.00588___fiber###0.00588___formation###0.00588___geology###0.00588___trammel###0.00588___column###0.04706___pillar###0.04706___chromatography_column###0.04706___newspaper_column###0.04706___street###0.00588___friend###0.00588___admirer###0.00588___trammels###0.00588___array###0.00588___necklace###0.00588___protagonist###0.00588___business_organisation###0.00588:how###1.00000:how do###1.00000:template###0.086___lastpos###0.082___columns###0.073___cut2fmt###0.055___place###0.049___eolmy###0.047___eol###0.044___positions###0.043___unpack###0.037___widths###0.027___fmt###0.027___selected###0.027___thinking###0.024___in_terms_of###0.024___cut###0.024___extract###0.022___linux###0.021___needed###0.019___split###0.019___kind_of###0.019___substr###0.019___determine###0.018___arguments###0.017___prefer###0.017___eolreturn###0.017___format###0.016___perlfunc###0.016___thing###0.015___output###0.015___instead_of###0.014___eolfor###0.014___documented###0.013___sub###0.012___string###0.010___
98:188###0.13,190###0.10,99###0.09,94###0.07,92###0.07,88###0.07,132###0.07,183###0.06,96###0.06,95###0.06:How do I find the soundex value of a string?  EOL EOL:Use the standard Text!:!:Soundex module distributed with Perl. Before you do so, you may want to determine whether `soundex' is in fact what you think it is. Knuth's soundex algorithm compresses words into a small space, and so it does not necessarily distinguish between two words which you might want to appear separately. For example, the last names `Knuth' and `Kant' are both mapped to the soundex code K530. If Text!:!:Soundex does not do what you are looking for, you might want to consider the String!:!:Approx module available at CPAN. EOL EOL:value###1.00000:how###1.00000:how do###1.00000:soundex###0.173___words###0.038___does_not###0.033___kant###0.028___mapped###0.028___compresses###0.028___knuth's###0.028___knuth###0.028___k530###0.028___text###0.027___approx###0.025___necessarily###0.025___distinguish###0.025___and_so###0.023___separately###0.023___string###0.022___think###0.021___names###0.020___looking_for###0.020___algorithm###0.019___in_fact###0.019___appear###0.019___distributed###0.018___determine###0.018___space###0.018___module###0.018___consider###0.018___small###0.018___last###0.016___you_are###0.015___value###0.014___find###0.014___whether###0.013___two###0.013___for_example###0.012___eol###0.012___available###0.012___standard###0.011___may###0.011___code###0.010___cpan###0.009___perl###0.005___
99:85###0.30,88###0.28,94###0.25,183###0.24,221###0.22,176###0.21,101###0.20,96###0.20,95###0.19,274###0.19:How can I expand variables in text strings?  EOL EOL:Let's assume that you have a string like!: EOL EOL    $text = 'this has a $foo in it and a $bar';  EOL EOLIf those were both global variables, then this would suffice!: EOL EOL    $text =~ s/\$(\w+)/${$1}/g;  # no /e needed  EOL EOLBut since they are probably lexicals, or at least, they could be, you'd have to do this!: EOL EOL    $text =~ s/(\$\w+)/$1/eeg; EOL    die if $@;# needed /ee, not /e  EOL EOLIt's probably better in the general case to treat those variables as entries in some special hash. For example!: EOL EOL    %user_defs = ( EOLfoo  => 23, EOLbar  => 19, EOL    ); EOL    $text =~ s/\$(\w+)/$user_defs{$1}/g;  EOL EOLSee also ``How do I expand function calls in a string?'' in this section of the FAQ. EOL EOL:schoolbook###0.11429___book###0.01429___star###0.01429___variables###0.22857___text###0.22857___variable_quantity###0.11429___symbol###0.01429___quantity###0.01429___physical_thing###0.01429___variable###0.11429___entity###0.01429___variable_star###0.11429:how###1.00000:how can###1.00000:text###0.073___eol###0.062___user_defs###0.060___variables###0.049___needed###0.043___expand###0.043___eolfoo###0.030___eolbar###0.030___eolit's###0.027___probably###0.024___lexicals###0.023___bar###0.023___string###0.023___treat###0.022___suffice###0.022___entries###0.022___assume###0.021___let's###0.021___at_least###0.020___they_are###0.020___special###0.019___global###0.019___you'd###0.019___eolbut###0.019___general###0.018___foo###0.018___section###0.018___calls###0.017___in_this###0.017___faq###0.017___eolsee###0.017___better###0.016___case###0.016___strings###0.015___hash###0.013___die###0.013___for_example###0.013___you_have###0.013___function###0.011___eolif###0.010___
100:210###0.27,183###0.23,51###0.22,134###0.20,95###0.20,174###0.20,178###0.19,146###0.19,58###0.19,175###0.18:What's wrong with always quoting "$vars"?  EOL EOL:The problem is that those double-quotes force stringification-- coercing numbers and references into strings--even when you don't want them to be strings. Think of it this way!: double-quote expansion is used to produce new strings. If you already have a string, why do you need more? EOL EOLIf you get used to writing odd things like these!: EOL EOL    print "$var";   # BAD EOL    $new = "$old";   # BAD EOL    somefunc("$var");# BAD  EOL EOLYou'll be in trouble. Those should (in 99.8% of the cases) be the simpler and more direct!: EOL EOL    print $var; EOL    $new = $old; EOL    somefunc($var);  EOL EOLOtherwise, besides slowing you down, you're going to break code when the thing in the scalar is actually neither a string nor a number, but a reference!: EOL EOL    func(\@array); EOL    sub func { EOLmy $aref = shift; EOLmy $oref = "$aref";  # WRONG EOL    }  EOL EOLYou can also get into subtle problems on those few operations in Perl that actually do care about the difference between a string and a number, such as the magical ++ autoincrement operator or the syscall() function. EOL EOLStringification also destroys arrays. EOL EOL    @lines = `command`; EOL    print "@lines";# WRONG - extra blanks EOL    print @lines;# right  EOL EOL::what###1.00000:what's wrong###1.00000:eol###0.039___aref###0.029___somefunc###0.026___bad###0.025___wrong###0.024___func###0.024___strings###0.023___lines###0.022___print###0.021___used_to###0.019___actually###0.017___new###0.017___string###0.017___eolmy###0.016___oref###0.014___coercing###0.014___slowing###0.014___stringification###0.014___autoincrement###0.014___double-quote###0.014___get_into###0.014___destroys###0.014___magical###0.014___double-quotes###0.014___odd###0.014___in_trouble###0.014___eolstringification###0.014___number###0.013___besides###0.013___simpler###0.013___subtle###0.013___expansion###0.013___produce###0.013___eolotherwise###0.013___break###0.012___blanks###0.011___quoting###0.011___think_of###0.011___syscall###0.011___down###0.011___force###0.011___even_when###0.011___eolyou'll###0.010___direct###0.010___going###0.010___extra###0.009___operations###0.009___care###0.009___neither###0.009___numbers###0.009___problems###0.008___references###0.008___writing###0.008___command###0.008___thing###0.008___such_as###0.008___operator###0.008___reference###0.008___right###0.008___already###0.008___what's###0.008___difference###0.008___shift###0.008___arrays###0.008___cases###0.008___always###0.007___eolyou###0.007___problem###0.007___things###0.007___scalar###0.007___array###0.007___sub###0.006___why###0.006___need###0.005___don't###0.005___function###0.005___code###0.005___you're###0.005___eolif###0.004___perl###0.003___
101:183###0.27,205###0.23,51###0.22,210###0.22,175###0.21,95###0.21,149###0.21,165###0.20,221###0.20,99###0.20:Why don't my <<HERE documents work?  EOL EOL:Check for these three things!: EOL EOL1. There must be no space after the << part. EOL EOL2. There (probably) should be a semicolon at the end. EOL EOL3. You can't (easily) have any space in front of the tag. EOL EOL EOLIf you want to indent the text in the here document, you can do this!: EOL EOL    # all in one EOL    ($VAR = <<HERE_TARGET) =~ s/^\s+//gm; EOL        your text EOL        goes here EOL    HERE_TARGET  EOL EOLBut the HERE_TARGET must still be flush against the margin. If you want that indented also, you'll have to quote in the indentation. EOL EOL    ($quote = <<'    FINIS') =~ s/^\s+//gm; EOL            ...we will have peace, when you and all your works have EOL            perished--and the works of your dark master to whom you EOL            would deliver us. You are a liar, Saruman, and a corrupter EOL            of men's hearts.  --Theoden in /usr/src/perl/taint.c EOL        FINIS EOL    $quote =~ s/\s*--/\n--/;  EOL EOLA nice general-purpose fixer-upper function for indented here documents follows. It expects to be called with a here document as its argument. It looks to see whether each line begins with a common substring, and if so, strips that substring off. Otherwise, it takes the amount of leading whitespace found on the first line and removes that much off each subsequent line. EOL EOL    sub fix { EOL        local $_ = shift; EOL        my ($white, $leader);  # common whitespace and common leading string EOL        if (/^\s*(?!:([^\w\s]+)(\s*).*\n)(?!:\s*\1\2?.*\n)+$/) { EOL            ($white, $leader) = ($2, quotemeta($1)); EOL        } else { EOL            ($white, $leader) = (/^(\s+)/, ''); EOL        } EOL        s/^\s*?$leader(?!:$white)?//gm; EOL        return $_; EOL    }  EOL EOLThis works with leading special strings, dynamically determined!: EOL EOL    $remember_the_main = fix<<'    MAIN_INTERPRETER_LOOP'; EOL@@@ int EOL@@@ runops() { EOL@@@     SAVEI32(runlevel); EOL@@@     runlevel++; EOL@@@     while ( op = (*op->op_ppaddr)() ); EOL@@@     TAINT_NOT; EOL@@@     return 0; EOL@@@ } EOL    MAIN_INTERPRETER_LOOP  EOL EOLOr with a fixed amount of leading whitespace, with remaining indentation correctly preserved!: EOL EOL    $poem = fix<<EVER_ON_AND_ON; EOL       Now far ahead the Road has gone, EOL  And I must follow, if I can, EOL       Pursuing it with eager feet, EOL  Until it joins some larger way EOL       Where many paths and errands meet. EOL  And whither then? I cannot say. EOL--Bilbo in /usr/src/perl/pp_ctl.c EOL    EVER_ON_AND_ON  EOL EOL:communication###0.00763___learning###0.00763___knowledge_base###0.00763___memorizer###0.00763___occupation###0.00763___knowledge_domain###0.00763___thoughtfulness###0.00763___business###0.00763___job###0.00763___information###0.00763___composition###0.00763___state###0.00763___contemplation###0.00763___musing###0.00763___written_document###0.06107___reflexion###0.00763___scrutiny###0.00763___piece###0.00763___papers###0.06107___acquisition###0.00763___opus###0.00763___line###0.00763___memoriser###0.00763___text_file###0.06107___documents###0.12214___employment###0.06107___rumination###0.00763___line_of_work###0.00763___examination###0.00763___computer_file###0.00763___room###0.00763___concentration###0.00763___written_material###0.00763___output###0.00763___action###0.00763___reflection###0.00763___activity###0.00763___immersion###0.00763___drawing###0.00763___work###0.12214___document###0.06107___absorption###0.00763___end_product###0.00763___oeuvre###0.06107___piece_of_music###0.00763___musical_composition###0.00763___study###0.06107___writing###0.00763___engrossment###0.00763___piece_of_writing###0.00763___representation###0.00763___info###0.00763:why###1.00000:why don't###1.00000:eol###0.048___leader###0.030___white###0.030___here_target###0.022___leading###0.021___quote###0.018___fix###0.016___whitespace###0.016___common###0.015___runlevel###0.015___indented###0.015___main_interpreter_loop###0.015___ever_on_and_on###0.015___finis###0.015___indentation###0.013___substring###0.013___amount###0.013___works###0.012___document###0.012___documents###0.011___line###0.010___space###0.009___saruman###0.007___road###0.007___savei32###0.007___strips###0.007___eager###0.007___remember_the_main###0.007___begins###0.007___taint_not###0.007___that_much###0.007___theoden###0.007___usr/src/perl/pp_ctl###0.007___quotemeta###0.007___liar###0.007___usr/src/perl/taint###0.007___ahead###0.007___pursuing###0.007___fixer-upper###0.007___preserved###0.007___peace###0.007___poem###0.007___meet###0.007___whither###0.007___perished###0.007___bilbo###0.007___determined###0.007___feet###0.007___joins###0.007___errands###0.007___general-purpose###0.007___margin###0.007___corrupter###0.007___deliver###0.007___in_front_of###0.007___hearts###0.007___men's###0.007___op_ppaddr###0.007___dark###0.007___runops###0.007___text###0.007___return###0.007___subsequent###0.006___we_will###0.006___remaining###0.006___larger###0.006___eol2###0.006___eol3###0.006___indent###0.006___expects###0.006___master###0.006___all_in###0.006___semicolon###0.006___gone###0.006___whom###0.006___removes###0.006___eol1###0.006___flush###0.006___tag###0.006___dynamically###0.005___paths###0.005___follows###0.005___looks###0.005___nice###0.005___otherwise###0.005___easily###0.005___goes###0.005___fixed###0.005___three###0.005___against###0.005___until###0.005___int###0.005___follow###0.005___cannot###0.004___correctly###0.004___special###0.004___eolbut###0.004___argument###0.004___takes###0.004___eola###0.004___say###0.004___shift###0.004___called###0.004___you_are###0.004___check###0.003___found###0.003___local###0.003___strings###0.003___things###0.003___eolor###0.003___you'll###0.003___whether###0.003___part###0.003___work###0.003___eolthis###0.003___sub###0.003___first###0.003___why###0.003___probably###0.003___can't###0.003___string###0.002___don't###0.002___function###0.002___eolif###0.002___one###0.002___
102:103###0.33,110###0.28,85###0.24,214###0.23,198###0.22,111###0.21,109###0.21,194###0.20,117###0.19,95###0.19:What is the difference between a list and an array?  EOL EOL:An array has a changeable length. A list does not. An array is something you can push or pop, while a list is a set of values. Some people make the distinction that a list is a value while an array is a variable. Subroutines are passed and return lists, you put things into list context, you initialize arrays with lists, and you foreach() across a list. @ variables are arrays, anonymous arrays are arrays, arrays in scalar context behave like the number of elements in them, subroutines access their arguments through the array @_, and push/pop/shift only work on arrays. EOL EOLAs a side note, there's no such thing as a list in scalar context. When you say EOL EOL    $scalar = (2, 5, 7, 9);  EOL EOLyou're using the comma operator in scalar context, so it uses the scalar comma operator. There never was a list there at all!! This causes the last value to be returned!: 9. EOL EOL:component###0.00585___pitch###0.00585___list###0.09357___remainder###0.04678___lean###0.04678___motility###0.00585___piece_of_cloth###0.00585___disagreement###0.00585___act###0.00585___mental_attitude###0.00585___state###0.00585___portion###0.00585___position###0.00585___fluctuation###0.00585___movement###0.00585___variation###0.00585___pitching###0.00585___decease###0.00585___struggle###0.00585___leaning###0.04678___tilt###0.04678___erroneousness###0.00585___interval###0.00585___partiality###0.00585___human_activity###0.00585___conflict###0.04678___statistic###0.00585___difference###0.09357___disposition###0.00585___deviation###0.04678___series###0.00585___difference_of_opinion###0.00585___lurch###0.00585___resistance###0.00585___ambivalence###0.00585___turning###0.00585___dispute###0.04678___component_part###0.00585___deed###0.00585___partisanship###0.00585___separation###0.00585___action###0.00585___move###0.00585___motion###0.00585___spatial_relation###0.00585___ambivalency###0.00585___feat###0.00585___human_action###0.00585___attitude###0.00585___military_action###0.00585___group_action###0.00585___number###0.00585___piece_of_material###0.00585___death###0.00585___battle###0.00585___turn###0.00585___abnormality###0.00585___irregularity###0.00585___oppositeness###0.00585___departure###0.04678___error###0.00585___tendency###0.00585___divergence###0.04678___opposition###0.00585___part###0.00585___effort###0.00585___liking###0.00585___incompatibility###0.00585___inclination###0.04678___exploit###0.00585___angle###0.00585:what###1.00000:what is###1.00000:list###0.074___arrays###0.068___scalar###0.051___array###0.050___context###0.048___comma###0.032___lists###0.028___subroutines###0.028___operator###0.023___value###0.020___push/pop/shift###0.020___eolyou're###0.020___changeable###0.020___initialize###0.018___distinction###0.018___behave###0.018___eol###0.018___pop###0.017___eolas###0.017___side###0.017___causes###0.017___passed###0.017___at_all###0.015___across###0.015___returned###0.014___anonymous###0.014___work_on###0.014___elements###0.014___arguments###0.013___length###0.013___push###0.013___note###0.013___foreach###0.013___does_not###0.012___access###0.011___thing###0.011___people###0.011___difference###0.011___uses###0.011___say###0.011___there's###0.011___last###0.011___variables###0.011___set###0.010___things###0.010___values###0.010___return###0.009___variable###0.009___number###0.009___something###0.009___using###0.007___
103:102###0.33,111###0.21,95###0.21,120###0.19,108###0.19,100###0.17,163###0.17,110###0.17,105###0.17,109###0.17:What is the difference between $array[1] and @array[1]?  EOL EOL:The former is a scalar value; the latter an array slice, making it a list with one (scalar) value. You should use $ when you want a scalar value (most of the time) and @ when you want a list with one scalar value in it (very, very rarely; nearly never, in fact). EOL EOLSometimes it doesn't make a difference, but sometimes it does. For example, compare!: EOL EOL    $good[0] = `some program that outputs several lines`;  EOL EOLwith EOL EOL    @bad[0]  = `same program that outputs several lines`;  EOL EOLThe use warnings pragma and the -w flag will warn you about these matters. EOL EOL:component###0.00667___remainder###0.05333___piece_of_cloth###0.00667___disagreement###0.00667___state###0.00667___portion###0.00667___paraphernalia###0.00667___fluctuation###0.00667___variation###0.00667___decease###0.00667___wearing_apparel###0.00667___gear###0.00667___erroneousness###0.00667___interval###0.00667___regalia###0.05333___conflict###0.05333___statistic###0.00667___difference###0.10667___deviation###0.05333___apparel###0.00667___series###0.00667___clothing###0.00667___vesture###0.00667___resistance###0.00667___ambivalence###0.00667___turning###0.00667___dispute###0.05333___component_part###0.00667___appurtenances###0.00667___deed###0.00667___separation###0.00667___raiment###0.05333___action###0.00667___clothes###0.00667___ambivalency###0.00667___feat###0.00667___wear###0.00667___military_action###0.00667___group_action###0.00667___number###0.00667___piece_of_material###0.00667___death###0.00667___turn###0.00667___abnormality###0.00667___irregularity###0.00667___oppositeness###0.00667___article_of_clothing###0.00667___departure###0.05333___error###0.00667___divergence###0.05333___opposition###0.00667___part###0.00667___finery###0.05333___effort###0.00667___array###0.10667___incompatibility###0.00667___exploit###0.00667:what###1.00000:what is###1.00000:value###0.068___outputs###0.068___scalar###0.067___array###0.050___eol###0.040___difference###0.038___several###0.037___lines###0.035___list###0.030___eolsometimes###0.030___former###0.030___latter###0.030___rarely###0.028___slice###0.028___flag###0.026___compare###0.026___warn###0.026___eolwith###0.026___making###0.025___matters###0.025___nearly###0.025___pragma###0.024___program###0.024___in_fact###0.023___warnings###0.023___one###0.022___bad###0.020___sometimes###0.019___good###0.019___for_example###0.015___time###0.014___eolthe###0.013___doesn't###0.013___
104:105###0.26,251###0.25,124###0.23,183###0.19,108###0.19,118###0.19,115###0.18,122###0.18,72###0.17,200###0.17:How can I remove duplicate elements from a list or array?  EOL EOL:There are several possible ways, depending on whether the array is ordered and whether you wish to preserve the ordering. EOL EOLa) EOL EOLIf @in is sorted, and you want @out to be sorted!: (this assumes all true values in the array) EOL EOL    $prev = "not equal to $in[0]"; EOL    @out = grep($_ ne $prev && ($prev = $_, 1), @in);  EOL EOLThis is nice in that it doesn't use much extra memory, simulating uniq(1)'s behavior of removing only adjacent duplicates. The ", 1" guarantees that the expression is true (so that grep picks it up) even if the $_ is 0, "", or undef. EOL EOLb) EOL EOLIf you don't know whether @in is sorted!: EOL EOL    undef %saw; EOL    @out = grep(!!$saw{$_}++, @in);  EOL EOLc) EOL EOLLike (b), but @in contains only small integers!: EOL EOL    @out = grep(!!$saw[$_]++, @in);  EOL EOLd) EOL EOLA way to do (b) without any loops or greps!: EOL EOL    undef %saw; EOL    @saw{@in} = (); EOL    @out = sort keys %saw;  # remove sort if undesired  EOL EOLe) EOL EOLLike (d), but @in contains only small positive integers!: EOL EOL    undef @ary; EOL    @ary[@in] = @in; EOL    @out = grep {defined} @ary;  EOL EOLBut perhaps you should have been using a hash all along, eh? EOL EOL:elements###0.17778___pitch###0.01111___list###0.17778___lean###0.08889___motility###0.01111___act###0.01111___mental_attitude###0.01111___position###0.01111___movement###0.01111___pitching###0.01111___struggle###0.01111___leaning###0.08889___tilt###0.08889___partiality###0.01111___human_activity###0.01111___conflict###0.01111___difference###0.01111___disposition###0.01111___difference_of_opinion###0.01111___lurch###0.01111___dispute###0.01111___partisanship###0.01111___move###0.01111___motion###0.01111___spatial_relation###0.01111___human_action###0.01111___attitude###0.01111___battle###0.01111___tendency###0.01111___liking###0.01111___inclination###0.08889___angle###0.01111:how###1.00000:how can###1.00000:saw###0.072___grep###0.050___eol###0.047___prev###0.040___ary###0.036___undef###0.029___sorted###0.028___eollike###0.027___integers###0.020___array###0.019___sort###0.018___whether###0.018___remove###0.017___true###0.016___small###0.016___eola###0.016___contains###0.015___preserve###0.013___eolc###0.013___eold###0.013___greps###0.013___ordering###0.013___picks###0.013___simulating###0.013___eolb###0.013___undesired###0.013___loops###0.013___all_along###0.013___eole###0.013___duplicates###0.012___equal_to###0.012___ordered###0.012___uniq###0.012___adjacent###0.012___depending_on###0.012___removing###0.011___guarantees###0.011___positive###0.010___out_to###0.010___duplicate###0.010___nice###0.010___in_that###0.009___eolif###0.009___elements###0.009___extra###0.009___assumes###0.009___even_if###0.009___wish###0.008___perhaps###0.008___eolbut###0.008___behavior###0.008___memory###0.008___so_that###0.008___possible###0.008___ways###0.008___know###0.007___expression###0.007___several###0.007___defined###0.007___keys###0.007___without###0.006___values###0.006___hash###0.006___list###0.006___eolthis###0.006___doesn't###0.005___don't###0.005___using###0.004___
105:108###0.31,111###0.28,104###0.26,95###0.24,110###0.22,72###0.21,113###0.20,102###0.18,183###0.18,200###0.17:How can I tell whether a list or array contains a certain element?  EOL EOL:Hearing the word "in" is an indication that you probably should have used a hash, not a list or array, to store your data. Hashes are designed to answer this question quickly and efficiently. Arrays aren't. EOL EOLThat being said, there are several ways to approach this. If you are going to make this query many times over arbitrary string values, the fastest way is probably to invert the original array and keep an associative array lying about whose keys are the first array's values. EOL EOL    @blues = qw/azure cerulean teal turquoise lapis-lazuli/; EOL    undef %is_blue; EOL    for (@blues) { $is_blue{$_} = 1 }  EOL EOLNow you can check whether $is_blue{$some_color}. It might have been a good idea to keep the blues all in a hash in the first place. EOL EOLIf the values are all small integers, you could use a simple indexed array. This kind of an array will take up less space!: EOL EOL    @primes = (2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31); EOL    undef @is_tiny_prime; EOL    for (@primes) { $is_tiny_prime[$_] = 1 } EOL    # or simply  @istiny_prime[@primes] = (1) x @primes;  EOL EOLNow you check whether $is_tiny_prime[$some_number]. EOL EOLIf the values in question are integers instead of strings, you can save quite a lot of space by using bit strings instead!: EOL EOL    @articles = ( 1..10, 150..2000, 2017 ); EOL    undef $read; EOL    for (@articles) { vec($read,$_,1) = 1 }  EOL EOLNow check whether vec($read,$n,1) is true for some $n. EOL EOLPlease do not use EOL EOL    ($is_there) = grep $_ eq $whatever, @array;  EOL EOLor worse yet EOL EOL    ($is_there) = grep /$whatever/, @array;  EOL EOLThese are slow (checks every element even if the first matches), inefficient (same reason), and potentially buggy (what if there are regex characters in $whatever?). If you're only testing once, then use!: EOL EOL    $is_there = 0; EOL    foreach $elt (@array) { EOLif ($elt eq $elt_to_find) { EOL    $is_there = 1; EOL    last; EOL} EOL    } EOL    if ($is_there) { ... }  EOL EOL:pitch###0.00806___list###0.12903___lean###0.06452___motility###0.00806___act###0.00806___mental_attitude###0.00806___paraphernalia###0.00806___position###0.00806___movement###0.00806___pitching###0.00806___wearing_apparel###0.00806___struggle###0.00806___leaning###0.06452___tilt###0.06452___gear###0.00806___partiality###0.00806___human_activity###0.00806___regalia###0.06452___conflict###0.00806___difference###0.00806___disposition###0.00806___apparel###0.00806___difference_of_opinion###0.00806___clothing###0.00806___lurch###0.00806___vesture###0.00806___dispute###0.00806___appurtenances###0.00806___partisanship###0.00806___raiment###0.06452___move###0.00806___clothes###0.00806___motion###0.00806___spatial_relation###0.00806___wear###0.00806___human_action###0.00806___attitude###0.00806___battle###0.00806___article_of_clothing###0.00806___tendency###0.00806___finery###0.06452___array###0.12903___liking###0.00806___inclination###0.06452___angle###0.00806:how###1.00000:how can###1.00000:is_there###0.042___array###0.037___eol###0.034___primes###0.030___blues###0.025___is_tiny_prime###0.025___is_blue###0.025___elt###0.016___eolnow###0.016___values###0.016___whatever###0.016___whether###0.015___articles###0.013___vec###0.013___undef###0.013___check###0.013___integers###0.012___grep###0.012___keep###0.011___space###0.010___read###0.010___element###0.009___strings###0.008___eolif###0.008___elt_to_find###0.008___array's###0.008___turquoise###0.008___cerulean###0.008___istiny_prime###0.008___hearing###0.008___teal###0.008___take_up###0.008___invert###0.008___lapis-lazuli###0.008___in_the_first_place###0.008___some_number###0.008___some_color###0.008___buggy###0.008___qw/azure###0.008___eolthese###0.008___lying###0.008___indexed###0.008___lot###0.008___hash###0.007___list###0.007___inefficient###0.007___all_in###0.007___indication###0.007___in_question###0.007___quite_a###0.007___testing###0.007___worse###0.007___eolplease###0.007___first###0.007___associative###0.006___query###0.006___fastest###0.006___efficiently###0.006___probably###0.006___potentially###0.006___quickly###0.006___designed###0.006___checks###0.006___matches###0.006___reason###0.006___whose###0.006___idea###0.006___save###0.006___certain###0.006___eolthat###0.005___arbitrary###0.005___going###0.005___slow###0.005___kind_of###0.005___store###0.005___even_if###0.005___original###0.005___simply###0.005___every###0.005___regex###0.005___tell###0.005___do_not###0.005___foreach###0.005___true###0.005___small###0.005___aren't###0.005___bit###0.005___word###0.005___once###0.005___less###0.005___ways###0.005___hashes###0.004___answer###0.004___times###0.004___good###0.004___last###0.004___contains###0.004___several###0.004___arrays###0.004___question###0.004___you_are###0.004___instead_of###0.004___keys###0.004___characters###0.004___instead###0.004___approach###0.004___simple###0.004___data###0.004___eolor###0.003___used###0.003___string###0.003___you're###0.003___using###0.002___
106:92###0.22,111###0.18,113###0.18,108###0.17,91###0.17,187###0.16,130###0.15,127###0.15,95###0.15,112###0.14:How do I compute the difference of two arrays? How do I compute the intersection of two arrays?  EOL EOL:Use a hash. Here's code to do both and more. It assumes that each element is unique in a given array!: EOL EOL    @union = @intersection = @difference = (); EOL    %count = (); EOL    foreach $element (@array1, @array2) { $count{$element}++ } EOL    foreach $element (keys %count) { EOLpush @union, $element; EOLpush @{ $count{$element} > 1 ? \@intersection !: \@difference }, $element; EOL    }  EOL EOLNote that this is the symmetric difference, that is, all elements in either A or in B but not in both. Think of it as an xor operation. EOL EOL:component###0.00621___remainder###0.04969___piece_of_cloth###0.00621___disagreement###0.00621___state###0.00621___portion###0.00621___paraphernalia###0.00621___fluctuation###0.00621___variation###0.00621___decease###0.00621___wearing_apparel###0.00621___arrays###0.09938___gear###0.00621___erroneousness###0.00621___interval###0.00621___regalia###0.04969___conflict###0.04969___statistic###0.00621___difference###0.09938___deviation###0.04969___apparel###0.00621___series###0.00621___clothing###0.00621___vesture###0.00621___resistance###0.00621___ambivalence###0.00621___turning###0.00621___dispute###0.04969___component_part###0.00621___appurtenances###0.00621___deed###0.00621___raiment###0.04969___separation###0.00621___directional_antenna###0.00621___action###0.00621___clothes###0.00621___ambivalency###0.00621___arrangement###0.00621___display###0.00621___feat###0.00621___wear###0.00621___military_action###0.00621___group_action###0.00621___number###0.00621___piece_of_material###0.00621___death###0.00621___turn###0.00621___abnormality###0.00621___irregularity###0.00621___oppositeness###0.00621___article_of_clothing###0.00621___departure###0.04969___error###0.00621___divergence###0.04969___opposition###0.00621___part###0.00621___finery###0.04969___effort###0.00621___array###0.04969___incompatibility###0.00621___exploit###0.00621:how###1.00000:how do###1.00000:element###0.122___intersection###0.089___count###0.074___difference###0.067___union###0.059___compute###0.049___eolpush###0.046___foreach###0.037___eol###0.035___arrays###0.032___array1###0.029___array2###0.029___symmetric###0.029___two###0.027___xor###0.024___unique###0.023___think_of###0.022___assumes###0.020___elements###0.020___operation###0.018___eolnote###0.017___given###0.016___that_is###0.016___keys###0.016___here's###0.015___either###0.015___array###0.014___hash###0.013___code###0.011___
107:117###0.26,205###0.20,51###0.19,183###0.18,177###0.18,165###0.17,101###0.17,210###0.16,221###0.16,274###0.16:How do I test whether two arrays or hashes are equal?  EOL EOL:The following code works for single-level arrays. It uses a stringwise comparison, and does not distinguish defined versus undefined empty strings. Modify if you have other needs. EOL EOL    $are_equal = compare_arrays(\@frogs, \@toads); EOL EOL    sub compare_arrays { EOLmy ($first, $second) = @_; EOLno warnings;  # silence spurious -w undef complaints EOLreturn 0 unless @$first == @$second; EOLfor (my $i = 0; $i < @$first; $i++) { EOL    return 0 if $first->[$i] ne $second->[$i]; EOL} EOLreturn 1; EOL    }  EOL EOLFor multilevel structures, you may wish to use an approach more like this one. It uses the CPAN module FreezeThaw!: EOL EOL    use FreezeThaw qw(cmpStr); EOL    @a = @b = ( "this", "that", [ "more", "stuff" ] ); EOL EOL    printf "a and b contain %s arrays\n", EOL        cmpStr(\@a, \@b) == 0 EOL    ? "the same" EOL    !: "different";  EOL EOLThis approach also works for comparing hashes. Here we'll demonstrate two different answers!: EOL EOL    use FreezeThaw qw(cmpStr cmpStrHard); EOL EOL    %a = %b = ( "this" => "that", "extra" => [ "more", "stuff" ] ); EOL    $a{EXTRA} = \%b; EOL    $b{EXTRA} = \%a;                    EOL EOL    printf "a and b contain %s hashes\n", EOLcmpStr(\%a, \%b) == 0 ? "the same" !: "different"; EOL EOL    printf "a and b contain %s hashes\n", EOLcmpStrHard(\%a, \%b) == 0 ? "the same" !: "different";  EOL EOLThe first reports that both those the hashes contain the same data, while the second reports that they do not. Which you prefer is left as an exercise to the reader. EOL EOL:experimentation###0.00585___communication###0.00585___investigating###0.00585___assay###0.00585___watercourse###0.00585___run###0.04678___exam###0.04678___damage###0.00585___experiment###0.00585___flow###0.00585___proceeding###0.00585___paraphernalia###0.00585___self-contemplation###0.00585___investigation###0.00585___wearing_apparel###0.00585___arrays###0.09357___gear###0.00585___proceedings###0.00585___trial_run###0.04678___flowing###0.00585___regalia###0.04678___stream###0.00585___score###0.00585___trip###0.00585___apparel###0.00585___affliction###0.00585___race###0.00585___clothing###0.00585___vesture###0.00585___examination###0.04678___appurtenances###0.00585___questioning###0.00585___raiment###0.04678___directional_antenna###0.00585___try###0.00585___clothes###0.00585___arrangement###0.00585___trial###0.04678___display###0.00585___wear###0.00585___competition###0.00585___tryout###0.04678___impairment###0.00585___diagnostic_assay###0.04678___contest###0.00585___self-examination###0.00585___test###0.09357___attempt###0.00585___football_play###0.00585___endeavor###0.00585___introspection###0.00585___locomotion###0.00585___harm###0.00585___travel###0.00585___article_of_clothing###0.00585___legal_proceeding###0.00585___inquiring###0.00585___succession###0.00585___communicating###0.00585___finery###0.04678___effort###0.00585___array###0.04678___endeavour###0.00585___check###0.00585:how###1.00000:how do###1.00000:eol###0.045___cmpstr###0.039___contain###0.039___hashes###0.037___freezethaw###0.035___second###0.032___first###0.028___printf###0.027___different###0.026___extra###0.026___compare_arrays###0.026___arrays###0.021___reports###0.018___stuff###0.017___eolreturn###0.016___uses###0.014___works###0.014___eolfor###0.013___approach###0.013___stringwise###0.013___toads###0.013___are_equal###0.013___frogs###0.013___cmpstrhard###0.013___complaints###0.013___silence###0.013___single-level###0.013___equal###0.013___eolcmpstr###0.013___comparing###0.013___spurious###0.013___eolcmpstrhard###0.013___two###0.012___demonstrate###0.011___distinguish###0.011___multilevel###0.011___needs###0.010___versus###0.010___eolno###0.010___undefined###0.010___answers###0.010___empty###0.009___comparison###0.009___we'll###0.009___reader###0.009___modify###0.009___test###0.009___exercise###0.009___warnings###0.008___structures###0.008___wish###0.008___prefer###0.008___do_not###0.008___left###0.008___unless###0.007___does_not###0.007___eolmy###0.007___undef###0.007___defined###0.007___strings###0.006___data###0.006___following###0.006___return###0.006___whether###0.006___eolthis###0.005___sub###0.005___you_have###0.005___eolthe###0.005___may###0.005___code###0.004___cpan###0.004___one###0.004___module###0.004___
108:111###0.35,105###0.31,113###0.30,110###0.30,72###0.23,124###0.21,183###0.20,95###0.20,51###0.20,205###0.19:How do I find the first array element for which a condition is true?   EOL EOL:You can use this if you care about the index!: EOL EOL    for ($i= 0; $i < @array; $i++) { EOL        if ($array[$i] eq "Waldo") { EOL    $found_index = $i; EOL            last; EOL        } EOL    }  EOL EOLNow $found_index has what you want. EOL EOL:ingredient###0.06897___component###0.06897___elector###0.00862___section###0.00862___syntagma###0.00862___portion###0.00862___paraphernalia###0.00862___wearing_apparel###0.00862___gear###0.00862___regalia###0.06897___relation###0.00862___protein_molecule###0.00862___apparel###0.00862___clothing###0.00862___vesture###0.00862___appurtenances###0.00862___raiment###0.06897___businessperson###0.00862___clothes###0.00862___wear###0.00862___voter###0.00862___number###0.00862___whole_number###0.00862___constituent###0.06897___bourgeois###0.00862___integer###0.00862___factor###0.06897___article_of_clothing###0.00862___element###0.13793___food_product###0.00862___division###0.00862___syntagm###0.00862___part###0.00862___finery###0.06897___foodstuff###0.00862___cause###0.00862___array###0.13793:how###0.50000___which###0.50000:which a###0.50000___how do###0.50000:found_index###0.176___array###0.129___eol###0.115___waldo###0.088___condition###0.073___index###0.061___care###0.058___eolnow###0.058___true###0.055___element###0.051___last###0.049___find###0.043___first###0.038___
109:102###0.21,103###0.17,120###0.15,51###0.15,28###0.14,183###0.14,210###0.13,85###0.13,110###0.12,205###0.12:How do I handle linked lists?  EOL EOL:In general, you usually don't need a linked list in Perl, since with regular arrays, you can push and pop or shift and unshift at either end, or you can use splice to add and/or remove arbitrary number of elements at arbitrary points. Both pop and shift are both O(1) operations on Perl's dynamic arrays. In the absence of shifts and pops, push in general needs to reallocate on the order every log(N) times, and unshift will need to copy pointers each time. EOL EOLIf you really, really wanted, you could use structures as described in perldsc or perltoot and do just what the algorithm book tells you to do. For example, imagine a list node like this!: EOL EOL    $node = { EOL        VALUE => 42, EOL        LINK  => undef, EOL    };  EOL EOLYou could walk the list this way!: EOL EOL    print "List!: "; EOL    for ($node = $head;  $node; $node = $node->{LINK}) { EOL        print $node->{VALUE}, " "; EOL    } EOL    print "\n";  EOL EOLYou could add to the list this way!: EOL EOL    my ($head, $tail); EOL    $tail = append($head, 1);       # grow a new head EOL    for $value ( 2 .. 10 ) { EOL        $tail = append($tail, $value); EOL    } EOL EOL    sub append { EOL        my($list, $value) = @_; EOL        my $node = { VALUE => $value }; EOL        if ($list) { EOL            $node->{LINK} = $list->{LINK}; EOL            $list->{LINK} = $node; EOL        } else { EOL            $_[0] = $node;      # replace caller's version EOL        } EOL        return $node; EOL    }  EOL EOLBut again, Perl's built-in are virtually always good enough. EOL EOL:organisation###0.01075___pitch###0.01075___list###0.08602___database###0.01075___lean###0.08602___motility###0.01075___act###0.01075___mental_attitude###0.01075___position###0.01075___movement###0.01075___pitching###0.01075___struggle###0.01075___leaning###0.08602___tilt###0.08602___partiality###0.01075___listing###0.08602___human_activity###0.01075___conflict###0.01075___difference###0.01075___disposition###0.01075___organization###0.01075___difference_of_opinion###0.01075___lurch###0.01075___dispute###0.01075___partisanship###0.01075___move###0.01075___motion###0.01075___spatial_relation###0.01075___human_action###0.01075___attitude###0.01075___battle###0.01075___tendency###0.01075___lists###0.17204___liking###0.01075___inclination###0.08602___angle###0.01075:how###1.00000:how do###1.00000:node###0.133___list###0.044___eol###0.044___link###0.041___tail###0.039___value###0.039___head###0.036___append###0.029___unshift###0.018___pop###0.018___linked###0.017___arbitrary###0.015___push###0.014___in_general###0.013___shift###0.012___arrays###0.012___print###0.012___perl's###0.011___eolyou###0.011___grow###0.011___walk###0.011___absence###0.011___good_enough###0.011___pops###0.011___shifts###0.011___reallocate###0.011___really###0.010___add_to###0.009___imagine###0.009___pointers###0.009___points###0.009___needs###0.009___caller's###0.009___replace###0.009___built-in###0.009___splice###0.009___virtually###0.009___need###0.009___log###0.008___perldsc###0.008___and/or###0.008___tells###0.008___again###0.008___dynamic###0.008___order###0.007___copy###0.007___elements###0.007___algorithm###0.007___operations###0.007___lists###0.007___every###0.007___structures###0.007___perltoot###0.007___wanted###0.007___remove###0.007___book###0.007___eolbut###0.007___described###0.006___handle###0.006___usually###0.006___times###0.006___undef###0.006___always###0.005___either###0.005___version###0.005___regular###0.005___return###0.005___number###0.005___for_example###0.004___sub###0.004___time###0.004___new###0.004___don't###0.004___eolif###0.003___perl###0.002___
110:111###0.32,108###0.30,102###0.28,105###0.22,29###0.20,113###0.19,72###0.19,103###0.17,95###0.14,109###0.12:How do I handle circular lists?  EOL EOL:Circular lists could be handled in the traditional fashion with linked lists, or you could just do something like this with an array!: EOL EOL    unshift(@array, pop(@array));  # the last shall be first EOL    push(@array, shift(@array));   # and vice versa  EOL EOL:organisation###0.01075___pitch###0.01075___list###0.08602___database###0.01075___lean###0.08602___motility###0.01075___act###0.01075___mental_attitude###0.01075___position###0.01075___movement###0.01075___pitching###0.01075___struggle###0.01075___leaning###0.08602___tilt###0.08602___partiality###0.01075___listing###0.08602___human_activity###0.01075___conflict###0.01075___difference###0.01075___disposition###0.01075___organization###0.01075___difference_of_opinion###0.01075___lurch###0.01075___dispute###0.01075___partisanship###0.01075___move###0.01075___motion###0.01075___spatial_relation###0.01075___human_action###0.01075___attitude###0.01075___battle###0.01075___tendency###0.01075___lists###0.17204___liking###0.01075___inclination###0.08602___angle###0.01075:how###1.00000:how do###1.00000:array###0.139___lists###0.115___circular###0.113___shall###0.056___handled###0.056___vice_versa###0.056___fashion###0.050___pop###0.047___unshift###0.047___traditional###0.047___linked###0.044___eol###0.043___push###0.036___handle###0.032___shift###0.031___last###0.031___something###0.024___first###0.024___
111:113###0.37,108###0.35,110###0.32,105###0.28,72###0.24,102###0.21,95###0.21,103###0.21,106###0.18,183###0.17:How do I shuffle an array randomly?  EOL EOL:Use this!: EOL EOL    # fisher_yates_shuffle( \@array ) !: EOL    # generate a random permutation of @array in place EOL    sub fisher_yates_shuffle { EOL        my $array = shift; EOL        my $i; EOL        for ($i = @$array; --$i; ) { EOL            my $j = int rand ($i+1); EOL            @$array[$i,$j] = @$array[$j,$i]; EOL        } EOL    } EOL EOL    fisher_yates_shuffle( \@array );    # permutes @array in place  EOL EOLYou've probably seen shuffling algorithms that work using splice, randomly picking another element to swap the current element with EOL EOL    srand; EOL    @new = (); EOL    @old = 1 .. 10;  # just a demo EOL    while (@old) { EOLpush(@new, splice(@old, rand @old, 1)); EOL    }  EOL EOLThis is bad because splice is already O(N), and since you do it N times, you just invented a quadratic algorithm; that is, O(N**2). This does not scale, although Perl is so efficient that you probably won't notice this until you have rather largish arrays. EOL EOL:paraphernalia###0.02000___wearing_apparel###0.02000___gear###0.02000___regalia###0.16000___apparel###0.02000___clothing###0.02000___vesture###0.02000___appurtenances###0.02000___raiment###0.16000___clothes###0.02000___wear###0.02000___article_of_clothing###0.02000___finery###0.16000___array###0.32000:how###1.00000:how do###1.00000:array###0.087___fisher_yates_shuffle###0.059___eol###0.054___splice###0.049___in_place###0.035___randomly###0.035___rand###0.029___element###0.023___permutes###0.019___shuffling###0.019___invented###0.019___shuffle###0.019___permutation###0.019___largish###0.019___eolyou've###0.019___quadratic###0.019___i+1###0.019___picking###0.017___scale###0.017___demo###0.016___swap###0.016___probably###0.016___new###0.015___seen###0.015___algorithms###0.015___srand###0.015___eolpush###0.015___generate###0.014___notice###0.014___rather###0.014___random###0.013___efficient###0.013___int###0.013___algorithm###0.013___until###0.013___although###0.012___do_it###0.011___does_not###0.011___bad###0.011___already###0.011___times###0.011___shift###0.011___that_is###0.010___arrays###0.010___won't###0.010___current###0.010___work###0.008___eolthis###0.008___sub###0.008___you_have###0.008___using###0.006___perl###0.004___
112:95###0.19,183###0.17,186###0.16,111###0.16,108###0.16,105###0.16,205###0.16,210###0.15,187###0.15,165###0.14:How do I process/modify each element of an array?  EOL EOL:Use for/foreach!: EOL EOL    for (@lines) { EOLs/foo/bar/;# change that word EOLy/XZ/ZX/;# swap those letters EOL    }  EOL EOLHere's another; let's compute spherical volumes!: EOL EOL    for (@volumes = @radii) {   # @volumes has changed parts EOL$_ **= 3; EOL$_ *= (4/3) * 3.14159;  # this will be constant folded EOL    }  EOL EOLIf you want to do the same thing to modify the values of the hash, you may not use the values function, oddly enough. You need a slice!: EOL EOL    for $orbit ( @orbits{keys %orbits} ) { EOL($orbit **= 3) *= (4/3) * 3.14159; EOL    }  EOL EOL:ingredient###0.12121___component###0.12121___elector###0.01515___section###0.01515___syntagma###0.01515___portion###0.01515___relation###0.01515___protein_molecule###0.01515___businessperson###0.01515___voter###0.01515___number###0.01515___whole_number###0.01515___constituent###0.12121___bourgeois###0.01515___integer###0.01515___factor###0.12121___element###0.24242___food_product###0.01515___division###0.01515___syntagm###0.01515___part###0.01515___foodstuff###0.01515___cause###0.01515:how###1.00000:how do###1.00000:volumes###0.095___orbit###0.063___orbits###0.063___eol###0.061___oddly_enough###0.031___spherical###0.031___eols/foo/bar###0.031___radii###0.031___process/modify###0.031___for/foreach###0.031___folded###0.031___eoly/xz/zx###0.031___values###0.030___swap###0.026___compute###0.026___slice###0.026___letters###0.026___changed###0.026___constant###0.023___parts###0.022___let's###0.022___modify###0.022___may_not###0.019___word###0.019___element###0.018___thing###0.018___eolhere's###0.017___keys###0.017___change###0.016___lines###0.016___array###0.015___hash###0.014___need###0.012___function###0.011___eolif###0.010___
113:111###0.37,74###0.31,108###0.30,173###0.24,72###0.21,105###0.20,110###0.19,106###0.18,183###0.15,103###0.15:How do I select a random element from an array?  EOL EOL:Use the rand() function (see perlfunc/rand)!: EOL EOL    # at the top of the program!: EOL    srand;# not needed for 5.004 and later EOL EOL    # then later on EOL    $index   = rand @array; EOL    $element = $array[$index];  EOL EOLMake sure you only call srand once per program, if then. If you are calling it more than once (such as before each call to rand), you're almost certainly doing something wrong. EOL EOL:ingredient###0.06897___component###0.06897___elector###0.00862___section###0.00862___syntagma###0.00862___portion###0.00862___paraphernalia###0.00862___wearing_apparel###0.00862___gear###0.00862___regalia###0.06897___relation###0.00862___protein_molecule###0.00862___apparel###0.00862___clothing###0.00862___vesture###0.00862___appurtenances###0.00862___raiment###0.06897___businessperson###0.00862___clothes###0.00862___wear###0.00862___voter###0.00862___number###0.00862___whole_number###0.00862___constituent###0.06897___bourgeois###0.00862___integer###0.00862___factor###0.06897___article_of_clothing###0.00862___element###0.13793___food_product###0.00862___division###0.00862___syntagm###0.00862___part###0.00862___finery###0.06897___foodstuff###0.00862___cause###0.00862___array###0.13793:how###1.00000:how do###1.00000:rand###0.089___srand###0.062___array###0.058___index###0.055___eol###0.051___once###0.048___element###0.046___call###0.041___perlfunc/rand###0.039___later_on###0.035___top###0.031___eolmake###0.031___needed###0.028___calling###0.028___program###0.028___certainly###0.027___random###0.027___almost###0.026___select###0.026___doing###0.025___sure###0.025___more_than###0.024___later###0.024___such_as###0.022___wrong###0.022___you_are###0.021___something###0.017___function###0.015___you're###0.014___
114:149###0.15,186###0.13,183###0.13,205###0.12,163###0.12,51###0.12,210###0.11,165###0.11,101###0.11,229###0.11:How do I permute N elements of a list?  EOL EOL:Here's a little program that generates all permutations of all the words on each line of input. The algorithm embodied in the permute() function should work on any list!: EOL EOL    #!!/usr/bin/perl -n EOL    # tsc-permute!: permute each word of input EOL    permute([split], []); EOL    sub permute { EOL        my @items = @{ $_[0] }; EOL        my @perms = @{ $_[1] }; EOL        unless (@items) { EOL            print "@perms\n"; EOL} else { EOL            my(@newitems,@newperms,$i); EOL            foreach $i (0 .. $#items) { EOL                @newitems = @items; EOL                @newperms = @perms; EOL                unshift(@newperms, splice(@newitems, $i, 1)); EOL                permute([@newitems], [@newperms]); EOL    } EOL} EOL    }  EOL EOL:elements###0.50000___n###0.50000:how###1.00000:how do###1.00000:permute###0.148___newperms###0.099___newitems###0.099___items###0.088___perms###0.074___eol###0.061___input###0.029___embodied###0.024___permutations###0.024___tsc-permute###0.024___list###0.022___splice###0.020___unshift###0.020___generates###0.019___a_little###0.017___usr/bin/perl###0.017___split###0.017___work_on###0.017___algorithm###0.016___words###0.016___elements###0.016___foreach###0.015___word###0.015___all_the###0.015___unless###0.014___here's###0.012___line###0.011___sub###0.010___function###0.009___print###0.008___program###0.008___
115:122###0.46,292###0.23,104###0.18,187###0.15,118###0.15,183###0.13,214###0.12,145###0.12,107###0.12,72###0.12:How do I sort an array by (anything)?  EOL EOL:Supply a comparison function to sort() (described in perlfunc/sort)!: EOL EOL    @list = sort { $a <=> $b } @list;  EOL EOLThe default sort function is cmp, string comparison, which would sort (1, 2, 10) into (1, 10, 2). <=>, used above, is the numerical comparison operator. EOL EOLIf you have a complicated function needed to pull out the part you want to sort on, then don't do it inside the sort function. Pull it out first, because the sort BLOCK can be called many times for the same element. Here's an example of how to pull out the first word after the first number on each item, and then sort those words case-insensitively. EOL EOL    @idx = (); EOL    for (@data) { EOL($item) = /\d+\s*(\S+)/; EOLpush @idx, uc($item); EOL    } EOL    @sorted = @data[ sort { $idx[$a] cmp $idx[$b] } 0 .. $#idx ];  EOL EOLwhich could also be written this way, using a trick that's come to be known as the Schwartzian Transform!: EOL EOL    @sorted = map  { $_->[0] } EOL      sort { $a->[1] cmp $b->[1] } EOL      map  { [ $_, uc( (/\d+\s*(\S+)/)[0]) ] } @data;  EOL EOLIf you need to sort on several fields, the following paradigm is useful. EOL EOL    @sorted = sort { field1($a) <=> field1($b) || EOL                     field2($a) cmp field2($b) || EOL                     field3($a) cmp field3($b) EOL                   }     @data;  EOL EOLThis can be conveniently combined with precalculation of keys as given above. EOL EOLSee http!://www.perl.com/CPAN/doc/FMTEYEWTK/sort.html for more about this approach. EOL EOLSee also the question below on sorting hashes. EOL EOL:physical_structure###0.00763___heterogeneousness###0.00763___structure###0.00763___appearance###0.00763___cast###0.00763___mode###0.00763___collection###0.00763___attribute###0.00763___mold###0.00763___taxon###0.00763___fashion###0.00763___accumulation###0.00763___state###0.00763___paraphernalia###0.00763___written_document###0.00763___genre###0.00763___state_of_matter###0.00763___writing_style###0.00763___papers###0.00763___wearing_apparel###0.00763___animal_group###0.00763___variety###0.06107___gear###0.00763___spatiality###0.00763___regalia###0.06107___difference###0.00763___heterogeneity###0.00763___apparel###0.00763___spatial_property###0.00763___clothing###0.00763___vesture###0.00763___style###0.00763___mould###0.00763___way###0.00763___aggregation###0.00763___literary_genre###0.00763___appurtenances###0.00763___organic_structure###0.00763___raiment###0.06107___clothes###0.00763___show###0.00763___wear###0.00763___kind###0.06107___word###0.00763___sort###0.12214___form###0.06107___assemblage###0.00763___document###0.00763___dummy###0.00763___article_of_clothing###0.00763___body###0.00763___manner###0.00763___category###0.00763___ability###0.00763___taxonomic_group###0.00763___visual_aspect###0.00763___finery###0.06107___array###0.12214___gathering###0.00763:how###1.00000:how do###1.00000:sort###0.106___idx###0.059___cmp###0.048___eol###0.035___item###0.031___comparison###0.026___sorted###0.024___field2###0.023___field1###0.023___field3###0.023___data###0.023___pull_out###0.018___function###0.017___map###0.017___first###0.015___eolsee###0.013___above###0.012___precalculation###0.011___case-insensitively###0.011___perlfunc/sort###0.011___conveniently###0.011___combined###0.011___come_to###0.011___schwartzian###0.011___http!://www.perl.com/cpan/doc/fmteyewtk/sort.html###0.011___pull###0.011___transform###0.011___list###0.010___numerical###0.010___sorting###0.010___eolwhich###0.010___known_as###0.009___paradigm###0.009___supply###0.009___fields###0.009___complicated###0.009___eolpush###0.009___inside###0.008___trick###0.008___needed###0.008___default###0.008___eolif###0.008___words###0.007___below###0.007___useful###0.007___anything###0.007___word###0.007___described###0.007___block###0.007___do_it###0.007___and_then###0.007___element###0.006___operator###0.006___hashes###0.006___times###0.006___given###0.006___several###0.006___called###0.006___that's###0.006___question###0.006___keys###0.006___here's###0.006___approach###0.006___written###0.005___following###0.005___array###0.005___example###0.005___used###0.005___number###0.005___part###0.005___eolthis###0.005___you_have###0.005___need###0.004___eolthe###0.004___string###0.004___don't###0.004___using###0.004___
116:69###0.17,105###0.14,50###0.11,51###0.11,183###0.09,210###0.09,247###0.09,165###0.09,205###0.08,111###0.08:How do I manipulate arrays of bits?  EOL EOL:Use pack() and unpack(), or else vec() and the bitwise operations. EOL EOLFor example, this sets $vec to have bit N set if $ints[N] was set!: EOL EOL    $vec = ''; EOL    foreach(@ints) { vec($vec,$_,1) = 1 }  EOL EOLAnd here's how, given a vector in $vec, you can get those bits into your @ints array!: EOL EOL    sub bitvec_to_list { EOLmy $vec = shift; EOLmy @ints; EOL# Find null-byte density then select best algorithm EOLif ($vec =~ tr/\0// / length $vec > 0.95) { EOL    use integer; EOL    my $i; EOL    # This method is faster with mostly null-bytes EOL    while($vec =~ /[^\0]/g ) { EOL$i = -9 + 8 * pos $vec; EOLpush @ints, $i if vec($vec, ++$i, 1); EOLpush @ints, $i if vec($vec, ++$i, 1); EOLpush @ints, $i if vec($vec, ++$i, 1); EOLpush @ints, $i if vec($vec, ++$i, 1); EOLpush @ints, $i if vec($vec, ++$i, 1); EOLpush @ints, $i if vec($vec, ++$i, 1); EOLpush @ints, $i if vec($vec, ++$i, 1); EOLpush @ints, $i if vec($vec, ++$i, 1); EOL    } EOL} else { EOL    # This method is a fast general algorithm EOL    use integer; EOL    my $bits = unpack "b*", $vec; EOL    push @ints, 0 if $bits =~ s/^(\d)// && $1; EOL    push @ints, pos $bits while($bits =~ /1/g); EOL} EOLreturn \@ints; EOL    }  EOL EOLThis method gets faster the more sparse the bit vector is. (Courtesy of Tim Bunce and Winfried Koenig.) EOL EOLHere's a demo on how to use vec()!: EOL EOL    # vec demo EOL    $vector = "\xff\x0f\xef\xfe"; EOL    print "Ilya's string \\xff\\x0f\\xef\\xfe represents the number ", EOLunpack("N", $vector), "\n"; EOL    $is_set = vec($vector, 23, 1); EOL    print "Its 23rd bit is ", $is_set ? "set" !: "clear", ".\n"; EOL    pvec($vector); EOL EOL    set_vec(1,1,1); EOL    set_vec(3,1,1); EOL    set_vec(23,1,1); EOL EOL    set_vec(3,1,3); EOL    set_vec(3,2,3); EOL    set_vec(3,4,3); EOL    set_vec(3,4,7); EOL    set_vec(3,8,3); EOL    set_vec(3,8,7); EOL EOL    set_vec(0,32,17); EOL    set_vec(1,32,17); EOL EOL    sub set_vec { EOLmy ($offset, $width, $value) = @_; EOLmy $vector = ''; EOLvec($vector, $offset, $width) = $value; EOLprint "offset=$offset width=$width value=$value\n"; EOLpvec($vector); EOL    } EOL EOL    sub pvec { EOLmy $vector = shift; EOLmy $bits = unpack("b*", $vector); EOLmy $i = 0; EOLmy $BASE = 8; EOL EOLprint "vector length in bytes!: ", length($vector), "\n"; EOL@bytes = unpack("A8" x length($vector), $bits); EOLprint "bits are!: @bytes\n\n"; EOL    }   EOL EOL:point_in_time###0.00270___blemish###0.00270___case###0.00270___instrument###0.00270___rotation###0.00270___process###0.00270___change_of_direction###0.00270___injury###0.00270___unit_of_time###0.00270___software_system###0.00270___approach###0.00270___occupation###0.00270___business###0.00270___break###0.00270___touch###0.00270___favour###0.00270___company###0.00270___definite_quantity###0.00270___piece_of_cloth###0.00270___section###0.00270___angular_unit###0.00270___fragment###0.00270___item###0.00270___routine###0.02156___act###0.02156___helping###0.00270___job###0.00270___lesion###0.00270___lamp###0.00270___manifestation###0.00270___force###0.00270___semiconductor_device###0.00270___business_establishment###0.00270___touching###0.00270___grammatical_category###0.00270___portion###0.00270___unit_of_measurement###0.00270___paraphernalia###0.00270___weightlifting###0.00270___position###0.00270___reflexion###0.00270___movement###0.00270___playing_card###0.00270___legal_document###0.00270___piece###0.02156___wearing_apparel###0.00270___scrap###0.02156___arrays###0.04313___periodical###0.00270___tender###0.00270___shift###0.00270___gear###0.00270___size###0.00270___female_genitals###0.00270___regalia###0.02156___place_of_business###0.00270___characteristic###0.00270___muck###0.00270___statistic###0.00270___bit###0.02156___time###0.00270___second###0.02156___seizure###0.00270___merchandise###0.00270___line###0.00270___wares###0.00270___flake###0.02156___snack_food###0.00270___apparel###0.00270___wound###0.00270___attack###0.00270___clothing###0.00270___change_of_course###0.00270___eating###0.00270___trauma###0.00270___sculpture###0.00270___signal###0.00270___vesture###0.00270___line_of_work###0.00270___walk###0.00270___example###0.00270___public_presentation###0.00270___curved_shape###0.00270___official_document###0.00270___chip###0.02156___mistake###0.00270___appurtenances###0.00270___dramatic_composition###0.00270___droppings###0.00270___curve###0.00270___raiment###0.02156___software_package###0.00270___percentage###0.00270___package###0.00270___bite###0.02156___directional_antenna###0.00270___attender###0.00270___moment###0.02156___work_shift###0.00270___spicery###0.00270___float###0.00270___clothes###0.00270___morsel###0.02156___motion###0.00270___arrangement###0.00270___hurt###0.00270___gear_mechanism###0.00270___display###0.00270___symbol###0.00270___reflection###0.00270___creation###0.00270___serving###0.00270___procedure###0.00270___bits###0.04313___wear###0.00270___activity###0.00270___unit###0.00270___instance###0.00270___minute###0.02156___mark###0.00270___legal_instrument###0.00270___capture###0.00270___reorientation###0.00270___nowadays###0.00270___marking###0.00270___spot###0.02156___cutting_implement###0.00270___subdivision###0.00270___semiconductor_unit###0.00270___physical_thing###0.00270___approach_shot###0.00270___saddlery###0.00270___significance###0.00270___period_of_play###0.00270___favor###0.00270___agreement###0.00270___small_indefinite_amount###0.00270___number###0.02156___distance###0.00270___piece_of_material###0.00270___marker###0.00270___software###0.00270___turn###0.02156___dramatic_work###0.00270___repast###0.00270___snatch###0.02156___share###0.00270___harm###0.00270___stable_gear###0.00270___development###0.00270___article_of_clothing###0.00270___entity###0.00270___feeding###0.00270___game_equipment###0.00270___performance###0.00270___playing_period###0.00270___sign###0.00270___duty_period###0.00270___mouthful###0.00270___gun###0.00270___error###0.00270___attendant###0.00270___expression###0.00270___fault###0.00270___female_genital_organ###0.00270___meal###0.00270___fleck###0.02156___rank###0.00270___dung###0.00270___taste###0.00270___counter###0.00270___defect###0.00270___amount###0.00270___spiciness###0.00270___part###0.00270___product###0.00270___signaling###0.00270___point###0.00270___finery###0.02156___play###0.00270___identification###0.00270___crystal###0.00270___breakage###0.00270___array###0.02156___tack###0.00270___time_unit###0.00270___semiconductor###0.00270___breaking###0.00270___spice###0.00270___present###0.00270___syntactic_category###0.00270___small_indefinite_quantity###0.00270___female_genitalia###0.00270___note###0.00270:how###1.00000:how do###1.00000:vec###0.153___ints###0.080___vector###0.074___set_vec###0.071___bits###0.038___eolpush###0.037___eol###0.037___eolmy###0.027___offset###0.023___width###0.021___unpack###0.016___length###0.015___bytes###0.012___value###0.012___x0f###0.011___xfe###0.011___xef###0.011___xff###0.011___pvec###0.011___is_set###0.011___bit###0.010___eolprint###0.010___pos###0.010___method###0.010___demo###0.009___integer###0.009___set###0.009___algorithm###0.008___sub###0.007___push###0.007___faster###0.007___shift###0.006___sparse###0.005___bitvec_to_list###0.005___winfried###0.005___eolpvec###0.005___density###0.005___bunce###0.005___ilya's###0.005___koenig###0.005___null-byte###0.005___null-bytes###0.005___represents###0.005___bitwise###0.005___eolunpack###0.005___tim###0.005___eolvec###0.005___fast###0.004___base###0.004___sets###0.004___manipulate###0.004___mostly###0.004___print###0.004___courtesy###0.004___clear###0.004___or_else###0.004___operations###0.004___eoland###0.004___pack###0.003___select###0.003___gets###0.003___foreach###0.003___general###0.003___eolreturn###0.003___eolhere's###0.003___given###0.003___best###0.003___arrays###0.003___eolfor###0.003___here's###0.003___array###0.002___find###0.002___example###0.002___number###0.002___eolthis###0.002___string###0.002___eolif###0.002___
117:107###0.26,125###0.22,102###0.19,198###0.15,124###0.15,50###0.14,131###0.13,127###0.12,223###0.10,105###0.09:Why does defined() return true on empty arrays and hashes?  EOL EOL:The short story is that you should probably only use defined on scalars or functions, not on aggregates (arrays and hashes). See perlfunc/defined in the 5.004 release or later of Perl for more detail. EOL EOLData!: Hashes (Associative Arrays)  EOL EOL:paraphernalia###0.01053___wearing_apparel###0.01053___arrays###0.16842___gear###0.01053___regalia###0.08421___apparel###0.01053___clothing###0.01053___vesture###0.01053___appurtenances###0.01053___raiment###0.08421___directional_antenna###0.01053___clothes###0.01053___arrangement###0.01053___display###0.01053___wear###0.01053___soft_drug###0.01053___article_of_clothing###0.01053___hashes###0.16842___hash###0.08421___dish###0.01053___finery###0.08421___array###0.08421___hashish###0.08421:why###1.00000:why does###1.00000:hashes###0.108___arrays###0.102___defined###0.067___perlfunc/defined###0.062___aggregates###0.062___short_story###0.062___detail###0.062___eoldata###0.055___associative###0.051___empty###0.046___scalars###0.045___true###0.039___later###0.038___eol###0.034___release###0.033___functions###0.030___return###0.029___why###0.027___probably###0.025___perl###0.012___
118:120###0.38,122###0.35,124###0.25,130###0.23,132###0.22,127###0.22,121###0.21,95###0.20,228###0.20,187###0.19:How do I process an entire hash?  EOL EOL:Use the each() function (see perlfunc/each) if you don't care whether it's sorted!: EOL EOL    while ( ($key, $value) = each %hash) { EOLprint "$key = $value\n"; EOL    }  EOL EOLIf you want it sorted, you'll have to use foreach() on the result of sorting the keys as shown in an earlier question. EOL EOL:hash###1.00000:how###1.00000:how do###1.00000:sorted###0.085___key###0.075___value###0.062___perlfunc/each###0.061___hash###0.055___sorting###0.055___eol###0.053___shown###0.048___result###0.046___entire###0.044___earlier###0.044___care###0.040___foreach###0.038___eolprint###0.036___process###0.034___keys###0.033___question###0.033___you'll###0.029___whether###0.028___it's###0.023___don't###0.023___function###0.023___eolif###0.020___
119:121###0.37,126###0.30,122###0.26,127###0.16,95###0.15,124###0.14,118###0.14,129###0.13,223###0.11,120###0.10:What happens if I add or remove keys from a hash while iterating over it?  EOL EOL:Don't do that. !:-) EOL EOL[lwall] In Perl 4, you were not allowed to modify a hash at all while iterating over it. In Perl 5 you can delete from it, but you still can't add to it, because that might cause a doubling of the hash table, in which half the entries get copied up to the new top half of the table, at which point you've totally bamboozled the iterator code. Even if the table doesn't double, there's no telling whether your new entry will be inserted before or after the current iterator position. EOL EOLEither treasure up your changes and make them after the iterator finishes or use keys to fetch all the old keys at once, and iterate over the list of keys. EOL EOL:lawyer###0.00840___winder###0.06723___pitch###0.00840___list###0.00840___attorney###0.00840___tonality###0.06723___listing###0.00840___key###0.06723___kilo###0.06723___metric_weight_unit###0.00840___worker###0.00840___weight_unit###0.00840___keys###0.13445___poet###0.00840___device###0.00840___kg###0.06723___kilogram###0.06723___cay###0.06723___Francis_Scott_Key###0.06723___explanation###0.00840___musical_notation###0.00840___hash###0.13445___coral_reef###0.00840___mechanical_device###0.00840___Key###0.06723___lever###0.00840:what###1.00000:what happens###1.00000:iterator###0.051___table###0.049___keys###0.049___half###0.040___iterating###0.040___hash###0.031___inserted###0.022___lwall###0.022___bamboozled###0.022___treasure###0.022___telling###0.022___were_not###0.022___doubling###0.022___add_to###0.020___totally###0.020___finishes###0.020___iterate###0.020___allowed###0.020___eoleither###0.018___new###0.018___up_to###0.017___copied###0.017___top###0.017___position###0.017___eol###0.017___entry###0.017___fetch###0.017___entries###0.017___at_all###0.017___changes###0.017___cause###0.016___point###0.016___at_once###0.016___happens###0.016___modify###0.016___double###0.015___even_if###0.015___delete###0.015___remove###0.015___you've###0.014___all_the###0.013___there's###0.012___current###0.011___whether###0.010___list###0.010___perl###0.009___can't###0.009___doesn't###0.008___don't###0.008___code###0.008___
120:118###0.38,122###0.35,130###0.27,87###0.27,124###0.26,132###0.25,127###0.21,228###0.20,126###0.19,103###0.19:How do I look up a hash element by value?  EOL EOL:Create a reverse hash!: EOL EOL    %by_value = reverse %by_key; EOL    $key = $by_value{$value};  EOL EOLThat's not particularly efficient. It would be more space-efficient to use!: EOL EOL    while (($key, $value) = each %by_key) { EOL$by_value{$value} = $key; EOL    }  EOL EOLIf your hash could have repeated values, the methods above will only find one of the associated keys. This may or may not worry you. If it does worry you, you can always reverse the hash into a hash of arrays instead!: EOL EOL     while (($key, $value) = each %by_key) { EOL push @{$key_list_by_value{$value}}, $key; EOL     }  EOL EOL:ingredient###0.09756___component###0.09756___elector###0.01220___section###0.01220___syntagma###0.01220___portion###0.01220___relation###0.01220___protein_molecule###0.01220___businessperson###0.01220___voter###0.01220___number###0.01220___whole_number###0.01220___constituent###0.09756___bourgeois###0.01220___integer###0.01220___factor###0.09756___element###0.19512___food_product###0.01220___hash###0.19512___division###0.01220___syntagm###0.01220___part###0.01220___foodstuff###0.01220___cause###0.01220:how###1.00000:how do###1.00000:key###0.088___value###0.087___by_key###0.086___by_value###0.086___hash###0.065___reverse###0.064___eol###0.053___worry###0.047___key_list_by_value###0.028___space-efficient###0.028___associated###0.025___look_up###0.025___eolthat's###0.023___repeated###0.022___efficient###0.019___particularly###0.019___methods###0.018___push###0.018___may_not###0.017___element###0.016___arrays###0.015___keys###0.015___above###0.015___create###0.015___always###0.015___instead###0.014___find###0.014___values###0.014___may###0.011___eolif###0.009___one###0.009___
121:122###0.44,126###0.43,119###0.37,127###0.27,95###0.24,118###0.21,129###0.21,120###0.17,124###0.16,214###0.15:How can I know how many entries are in a hash?  EOL EOL:If you mean how many keys, then all you have to do is take the scalar sense of the keys() function!: EOL EOL    $num_keys = scalar keys %hash;  EOL EOLThe keys() function also resets the iterator, which in void context is faster for tied hashes than would be iterating through the whole hash, one key-value pair at a time. EOL EOL:change_of_location###0.00585___making_known###0.00585___presentation###0.00585___entranceway###0.04678___humility###0.00585___schoolbook###0.00585___approach###0.00585___section###0.00585___understanding###0.00585___actuation###0.00585___text_edition###0.00585___entree###0.04678___beginning###0.00585___movement###0.00585___debut###0.04678___ingress###0.00585___course###0.00585___right###0.00585___commencement###0.00585___text###0.00585___contention###0.00585___school_text###0.00585___submission###0.04678___access###0.00585___entryway###0.04678___unveiling###0.04678___accounting_system###0.00585___launching###0.04678___first_appearance###0.04678___method_of_accounting###0.00585___condition###0.00585___message###0.00585___incoming###0.00585___propulsion###0.00585___group_action###0.00585___subdivision###0.00585___agreement###0.00585___proposal###0.00585___substance###0.00585___accounting###0.00585___ledger_entry###0.04678___travel###0.00585___status###0.00585___informing###0.00585___entrance###0.04678___textbook###0.00585___entries###0.09357___written_agreement###0.00585___arrival###0.00585___entering###0.04678___hash###0.09357___humbleness###0.00585___subject_matter###0.00585___introduction###0.04678___content###0.00585___entry###0.00585___start###0.00585:how###1.00000:how many###0.50000___how can###0.50000:keys###0.107___hash###0.067___num_keys###0.049___scalar###0.049___tied###0.044___key-value###0.044___iterating###0.044___pair###0.044___resets###0.041___at_a_time###0.041___sense###0.039___void###0.039___eol###0.037___function###0.037___entries###0.037___iterator###0.037___whole###0.032___faster###0.029___context###0.029___hashes###0.028___mean###0.028___know###0.028___you_have###0.021___eolthe###0.020___one###0.016___
122:115###0.46,121###0.44,118###0.35,120###0.35,127###0.32,126###0.32,119###0.26,124###0.25,95###0.24,129###0.23:How do I sort a hash (optionally by value instead of key)?  EOL EOL:Internally, hashes are stored in a way that prevents you from imposing an order on key-value pairs. Instead, you have to sort a list of the keys or values!: EOL EOL    @keys = sort keys %hash;# sorted by key EOL    @keys = sort { EOL    $hash{$a} cmp $hash{$b} EOL    } keys %hash; # and by value  EOL EOLHere we'll do a reverse numeric sort by value, and if two keys are identical, sort by length of key, or if that fails, by straight ASCII comparison of the keys (well, possibly modified by your locale--see perllocale). EOL EOL    @keys = sort { EOL$hash{$b} <=> $hash{$a} EOL  || EOLlength($b) <=> length($a) EOL  || EOL      $a cmp $b EOL    } keys %hash;  EOL EOL:physical_structure###0.01031___heterogeneousness###0.01031___structure###0.01031___appearance###0.01031___cast###0.01031___mode###0.01031___collection###0.01031___attribute###0.01031___mold###0.01031___taxon###0.01031___fashion###0.01031___accumulation###0.01031___state###0.01031___written_document###0.01031___genre###0.01031___state_of_matter###0.01031___writing_style###0.01031___papers###0.01031___animal_group###0.01031___variety###0.08247___spatiality###0.01031___difference###0.01031___heterogeneity###0.01031___spatial_property###0.01031___style###0.01031___mould###0.01031___way###0.01031___aggregation###0.01031___literary_genre###0.01031___organic_structure###0.01031___show###0.01031___kind###0.08247___word###0.01031___sort###0.16495___form###0.08247___assemblage###0.01031___document###0.01031___dummy###0.01031___body###0.01031___manner###0.01031___category###0.01031___hash###0.16495___ability###0.01031___taxonomic_group###0.01031___visual_aspect###0.01031___gathering###0.01031:how###1.00000:how do###1.00000:sort###0.110___keys###0.110___hash###0.082___eol###0.041___key###0.041___cmp###0.037___value###0.034___length###0.029___imposing###0.022___identical###0.022___eollength###0.022___straight###0.022___key-value###0.020___internally###0.018___stored###0.018___optionally###0.018___in_a_way###0.017___pairs###0.017___modified###0.017___locale###0.017___numeric###0.017___prevents###0.017___reverse###0.017___comparison###0.017___perllocale###0.016___we'll###0.016___eolhere###0.016___possibly###0.015___fails###0.015___order###0.015___sorted###0.015___ascii###0.014___hashes###0.013___instead_of###0.012___instead###0.011___values###0.011___two###0.010___list###0.010___you_have###0.009___
123:129###0.40,132###0.27,118###0.16,50###0.16,279###0.15,126###0.14,122###0.13,128###0.12,135###0.12,163###0.12:How can I always keep my hash sorted?  EOL EOL:You can look into using the DB_File module and tie() using the $DB_BTREE hash bindings as documented in DB_File/"In Memory Databases". The Tie!:!:IxHash module from CPAN might also be instructive. EOL EOL:hash###1.00000:how###1.00000:how can###1.00000:tie###0.105___db_file###0.105___db_btree###0.070___instructive###0.070___hash###0.063___ixhash###0.062___bindings###0.058___databases###0.052___look_into###0.052___sorted###0.048___using###0.048___keep###0.047___module###0.044___memory###0.043___always###0.037___documented###0.035___eol###0.030___cpan###0.023___
124:120###0.26,127###0.25,122###0.25,118###0.25,104###0.23,228###0.21,108###0.21,165###0.21,130###0.19,132###0.19:What's the difference between "delete" and "undef" with hashes?  EOL EOL:Hashes are pairs of scalars!: the first is the key, the second is the value. The key will be coerced to a string, although the value can be any kind of scalar!: string, number, or reference. If a key $key is present in the array, exists($key) will return true. The value for a given key can be undef, in which case $array{$key} will be undef while $exists{$key} will return true. This corresponds to ($key, undef) being in the hash. EOL EOLPictures help... here's the %ary table!: EOL EOL  keys  values EOL+------+------+ EOL|  a   |  3   | EOL|  x   |  7   | EOL|  d   |  0   | EOL|  e   |  2   | EOL+------+------+  EOL EOLAnd these conditions hold EOL EOL$ary{'a'}                       is true EOL$ary{'d'}                       is false EOLdefined $ary{'d'}               is true EOLdefined $ary{'a'}               is true EOLexists $ary{'a'}                is true (Perl5 only) EOLgrep ($_ eq 'a', keys %ary)     is true  EOL EOLIf you now say EOL EOLundef $ary{'a'}  EOL EOLyour table now reads!: EOL EOL  keys  values EOL+------+------+ EOL|  a   | undef| EOL|  x   |  7   | EOL|  d   |  0   | EOL|  e   |  2   | EOL+------+------+  EOL EOLand these conditions now hold; changes in caps!: EOL EOL$ary{'a'}                       is FALSE EOL$ary{'d'}                       is false EOLdefined $ary{'d'}               is true EOLdefined $ary{'a'}               is FALSE EOLexists $ary{'a'}                is true (Perl5 only) EOLgrep ($_ eq 'a', keys %ary)     is true  EOL EOLNotice the last two!: you have an undef value, but a defined key!! EOL EOLNow, consider this!: EOL EOLdelete $ary{'a'}  EOL EOLyour table now reads!: EOL EOL  keys  values EOL+------+------+ EOL|  x   |  7   | EOL|  d   |  0   | EOL|  e   |  2   | EOL+------+------+  EOL EOLand these conditions now hold; changes in caps!: EOL EOL$ary{'a'}                       is false EOL$ary{'d'}                       is false EOLdefined $ary{'d'}               is true EOLdefined $ary{'a'}               is false EOLexists $ary{'a'}                is FALSE (Perl5 only) EOLgrep ($_ eq 'a', keys %ary)     is FALSE  EOL EOLSee, the whole entry is gone!! EOL EOL:component###0.01000___remainder###0.08000___piece_of_cloth###0.01000___disagreement###0.01000___state###0.01000___portion###0.01000___fluctuation###0.01000___variation###0.01000___decease###0.01000___erroneousness###0.01000___interval###0.01000___conflict###0.08000___statistic###0.01000___difference###0.16000___deviation###0.08000___series###0.01000___resistance###0.01000___ambivalence###0.01000___turning###0.01000___dispute###0.08000___component_part###0.01000___deed###0.01000___separation###0.01000___action###0.01000___ambivalency###0.01000___feat###0.01000___military_action###0.01000___group_action###0.01000___number###0.01000___piece_of_material###0.01000___death###0.01000___turn###0.01000___abnormality###0.01000___irregularity###0.01000___oppositeness###0.01000___departure###0.08000___error###0.01000___divergence###0.08000___opposition###0.01000___part###0.01000___effort###0.01000___incompatibility###0.01000___exploit###0.01000:what###1.00000:what's the###1.00000:false###0.081___true###0.069___key###0.061___eoldefined###0.060___eol###0.052___ary###0.036___undef###0.033___keys###0.032___conditions###0.030___eolgrep###0.030___eolexists###0.030___hold###0.027___table###0.021___eoland###0.020___value###0.020___caps###0.020___perl5###0.018___eolyour###0.018___changes###0.015___reads###0.015___values###0.014___exists###0.014___hashes###0.011___eolpictures###0.010___eolundef###0.010___corresponds###0.010___eoldelete###0.010___coerced###0.010___array###0.009___return###0.009___gone###0.009___present###0.008___pairs###0.007___eolnotice###0.007___string###0.007___entry###0.007___scalars###0.007___kind_of###0.007___delete###0.006___eolnow###0.006___whole###0.006___consider###0.006___second###0.006___although###0.006___reference###0.005___eolsee###0.005___difference###0.005___what's###0.005___say###0.005___help###0.005___case###0.005___last###0.005___given###0.005___defined###0.005___here's###0.005___scalar###0.005___number###0.004___two###0.004___hash###0.004___first###0.004___you_have###0.004___eolif###0.003___
125:117###0.22,121###0.15,107###0.15,72###0.10,127###0.10,124###0.09,156###0.09,198###0.09,50###0.08,223###0.08:Why don't my tied hashes make the defined/exists distinction?  EOL EOL:They may or may not implement the EXISTS() and DEFINED() methods differently. For example, there isn't the concept of undef with hashes that are tied to DBM* files. This means the true/false tables above will give different results when used on such a hash. It also means that exists and defined do the same thing with a DBM* file, and what they end up doing is not what they do with ordinary hashes. EOL EOL:soft_drug###0.02941___hashes###0.47059___hash###0.23529___dish###0.02941___hashish###0.23529:why###1.00000:why don't###1.00000:tied###0.064___hashes###0.062___dbm###0.056___exists###0.052___means###0.040___defined###0.038___end_up###0.036___ordinary###0.036___differently###0.036___the_true###0.036___defined/exists###0.036___tables###0.036___concept###0.036___distinction###0.032___implement###0.028___results###0.027___methods###0.023___doing###0.023___may_not###0.022___give###0.022___thing###0.020___undef###0.019___above###0.019___different###0.018___is_not###0.018___files###0.017___isn't###0.017___used###0.016___hash###0.016___for_example###0.016___eol###0.015___why###0.015___don't###0.013___may###0.013___file###0.012___
126:121###0.43,122###0.32,119###0.30,95###0.21,120###0.19,118###0.17,227###0.15,123###0.14,127###0.13,129###0.13:How do I reset an each() operation part-way through?  EOL EOL:Using keys %hash in scalar context returns the number of keys in the hash and resets the iterator associated with the hash. You may need to do this if you use last to exit a loop early so that when you re-enter it, the hash iterator has been reset. EOL EOL:noesis###0.00870___presentation###0.00870___surgical_process###0.06957___operation###0.13913___achievement###0.00870___process###0.00870___medical_science###0.00870___software_system###0.00870___proceeding###0.00870___mathematical_process###0.06957___proceedings###0.00870___knowledge###0.00870___surgical_procedure###0.06957___presentment###0.00870___room###0.00870___hospital_room###0.00870___software_package###0.00870___surgery###0.06957___package###0.00870___action###0.00870___show###0.00870___procedure###0.06957___accomplishment###0.00870___activity###0.00870___work###0.00870___software###0.00870___cognitive_process###0.06957___functioning###0.06957___mental_process###0.06957___computing###0.00870___legal_proceeding###0.00870___performance###0.06957___demonstration###0.00870___computation###0.00870___calculation###0.00870___medical_procedure###0.00870___cognition###0.00870:how###1.00000:how do###1.00000:hash###0.103___reset###0.089___iterator###0.085___keys###0.061___re-enter###0.057___part-way###0.057___early###0.050___associated###0.050___resets###0.047___returns###0.041___loop###0.041___so_that###0.035___operation###0.034___exit###0.034___context###0.033___last###0.031___scalar###0.028___number###0.026___eol###0.024___need###0.023___may###0.021___using###0.019___
127:187###0.35,122###0.32,121###0.27,124###0.25,199###0.22,118###0.22,120###0.21,129###0.18,165###0.18,228###0.18:How can I get the unique keys from two hashes?  EOL EOL:First you extract the keys from the hashes into lists, then solve the "removing duplicates" problem described above. For example!: EOL EOL    %seen = (); EOL    for $element (keys(%foo), keys(%bar)) { EOL$seen{$element}++; EOL    } EOL    @uniq = keys %seen;  EOL EOLOr more succinctly!: EOL EOL    @uniq = keys %{{%foo,%bar}};  EOL EOLOr if you really want to save space!: EOL EOL    %seen = (); EOL    while (defined ($key = each %foo)) { EOL        $seen{$key}++; EOL    } EOL    while (defined ($key = each %bar)) { EOL        $seen{$key}++; EOL    } EOL    @uniq = keys %seen;  EOL EOL:lawyer###0.00730___winder###0.05839___pitch###0.00730___list###0.00730___attorney###0.00730___tonality###0.05839___listing###0.00730___key###0.05839___kilo###0.05839___metric_weight_unit###0.00730___worker###0.00730___weight_unit###0.00730___keys###0.11679___soft_drug###0.00730___poet###0.00730___device###0.00730___kg###0.05839___kilogram###0.05839___cay###0.05839___Francis_Scott_Key###0.05839___explanation###0.00730___hashes###0.11679___musical_notation###0.00730___hash###0.05839___dish###0.00730___coral_reef###0.00730___mechanical_device###0.00730___Key###0.05839___hashish###0.05839___lever###0.00730:how###1.00000:how can###1.00000:seen###0.152___keys###0.104___uniq###0.074___eol###0.069___key###0.067___bar###0.065___foo###0.050___element###0.032___hashes###0.031___defined###0.029___eolor###0.026___solve###0.024___duplicates###0.024___succinctly###0.024___removing###0.022___extract###0.022___unique###0.021___save###0.019___lists###0.018___space###0.017___described###0.016___above###0.014___problem###0.014___really###0.012___two###0.012___for_example###0.012___first###0.012___
128:123###0.12,163###0.12,135###0.12,111###0.11,108###0.10,105###0.09,110###0.09,141###0.09,175###0.08,125###0.08:How can I store a multidimensional array in a DBM file?  EOL EOL:Either stringify the structure yourself (no fun), or else get the MLDBM (which uses Data!:!:Dumper) module from CPAN and layer it on top of either DB_File or GDBM_File. EOL EOL:commercial_enterprise###0.00476___soup###0.00476___memory_device###0.00476___station###0.00476___computer_storage###0.03810___cognitive_psychology###0.00476___deposit###0.00476___storage###0.03810___business###0.00476___stalk###0.00476___computer_operation###0.00476___hardware###0.00476___basic_cognitive_process###0.00476___accumulation###0.00476___workplace###0.00476___paraphernalia###0.00476___memory###0.03810___placental_mammal###0.00476___keeping###0.00476___placental###0.00476___wearing_apparel###0.00476___animal_group###0.00476___certificate###0.00476___plant_part###0.00476___working_capital###0.00476___handle###0.00476___internal_representation###0.00476___mercantile_establishment###0.00476___gear###0.00476___entrepot###0.03810___genealogy###0.00476___memory_board###0.03810___mental_faculty###0.00476___computer_hardware###0.00476___regalia###0.03810___port###0.00476___security###0.00476___store###0.07619___hold###0.00476___merchandise###0.00476___wares###0.00476___stock###0.03810___apparel###0.00476___grip###0.00476___clothing###0.00476___fund###0.03810___vesture###0.00476___retention###0.00476___appurtenances###0.00476___depository###0.00476___module###0.00476___raiment###0.03810___shop###0.03810___retail_store###0.00476___clothes###0.00476___repute###0.00476___wear###0.00476___mental_representation###0.00476___capital###0.00476___work###0.00476___reputation###0.00476___faculty###0.00476___support###0.00476___flower###0.00476___deposition###0.00476___handgrip###0.00476___article_of_clothing###0.00476___computer_memory###0.03810___repository###0.00476___family_tree###0.00476___eutherian_mammal###0.00476___outlet###0.00476___stem###0.00476___timber###0.00476___storage_device###0.00476___depot###0.03810___lumber###0.00476___eutherian###0.00476___money###0.00476___machine_operation###0.00476___sales_outlet###0.00476___product###0.00476___finery###0.03810___representation###0.00476___array###0.07619___holding###0.00476___business_enterprise###0.00476___nondepository_financial_institution###0.00476___cravat###0.00476:how###1.00000:how can###1.00000:either###0.062___layer###0.062___stringify###0.062___multidimensional###0.062___gdbm_file###0.062___mldbm###0.062___on_top_of###0.062___dumper###0.055___fun###0.051___dbm###0.048___structure###0.048___db_file###0.046___store###0.043___or_else###0.043___yourself###0.035___uses###0.035___data###0.030___array###0.030___eol###0.027___file###0.022___cpan###0.021___module###0.019___
129:123###0.40,132###0.28,122###0.23,121###0.21,127###0.18,126###0.13,119###0.13,95###0.13,183###0.13,124###0.12:How can I make my hash remember the order I put elements into it?   EOL EOL:Use the Tie!:!:IxHash from CPAN. EOL EOL    use Tie!:!:IxHash; EOL    tie(%myhash, Tie!:!:IxHash); EOL    for ($i=0; $i<20; $i++) { EOL        $myhash{$i} = 2*$i; EOL    } EOL    @keys = keys %myhash; EOL    # @keys = (0,1,2,3,...)  EOL EOL:domicile###0.00578___dwelling###0.00578___ordination###0.04624___announcement###0.00578___stick###0.00578___edict###0.04624___proclamation###0.00578___fiat###0.04624___designation###0.00578___building###0.00578___gatehouse###0.00578___naming###0.00578___act###0.00578___friendly_relationship###0.00578___position###0.00578___playing_card###0.00578___reply###0.00578___gild###0.04624___response###0.00578___rule###0.00578___baseball_team###0.00578___edifice###0.00578___elite###0.00578___dwelling_house###0.00578___social_group###0.00578___assignment###0.00578___written_material###0.00578___home###0.00578___arrangement###0.00578___revising###0.00578___club###0.04624___rewriting###0.00578___spot###0.00578___golf_equipment###0.00578___habitation###0.00578___appointment###0.00578___enactment###0.00578___parliamentary_procedure###0.04624___annunciation###0.00578___parliamentary_law###0.04624___association###0.00578___prescript###0.00578___guild###0.04624___rescript###0.04624___hotel###0.00578___status###0.00578___order###0.09249___declaration###0.00578___answer###0.00578___decree###0.04624___abode###0.00578___society###0.04624___hash###0.09249___writing###0.00578___piece_of_writing###0.00578___lodge###0.04624___friendship###0.00578___physicist###0.00578___house###0.00578:how###1.00000:how can###1.00000:myhash###0.207___tie###0.207___ixhash###0.185___keys###0.111___eol###0.090___order###0.048___remember###0.048___elements###0.046___hash###0.031___cpan###0.023___
130:120###0.27,118###0.23,132###0.21,124###0.19,122###0.17,228###0.16,127###0.16,165###0.16,106###0.15,100###0.14:Why does passing a subroutine an undefined element in a hash create it?  EOL EOL:If you say something like!: EOL EOL    somefunc($hash{"nonesuch key here"});  EOL EOLThen that element "autovivifies"; that is, it springs into existence whether you store something there or not. That's because functions get scalars passed in by reference. If somefunc() modifies $_[0], it has to be ready to write it back into the caller's version. EOL EOLThis has been fixed as of Perl5.004. EOL EOLNormally, merely accessing a key's value for a nonexistent key does not cause that key to be forever there. This is different than awk's behavior. EOL EOL:ingredient###0.06015___component###0.06015___process###0.00752___elector###0.00752___software_system###0.00752___utility###0.00752___section###0.00752___social_event###0.00752___routine###0.06015___syntagma###0.00752___portion###0.00752___proceeding###0.00752___subroutine###0.12030___proceedings###0.00752___social_gathering###0.00752___relation###0.00752___protein_molecule###0.00752___public_presentation###0.00752___software_package###0.00752___package###0.00752___businessperson###0.00752___procedure###0.06015___activity###0.00752___voter###0.00752___work###0.00752___number###0.00752___whole_number###0.00752___mathematical_relation###0.00752___software###0.00752___constituent###0.06015___bourgeois###0.00752___integer###0.00752___factor###0.06015___social_affair###0.00752___function###0.06015___duty###0.00752___performance###0.00752___legal_proceeding###0.00752___usefulness###0.00752___element###0.12030___subprogram###0.06015___food_product###0.00752___division###0.00752___syntagm###0.00752___part###0.00752___foodstuff###0.00752___cause###0.00752:why###1.00000:why does###1.00000:key###0.050___somefunc###0.049___element###0.032___modifies###0.027___autovivifies###0.027___existence###0.027___forever###0.027___nonesuch###0.027___nonexistent###0.027___key's###0.027___awk's###0.027___springs###0.027___eol###0.027___hash###0.025___eolnormally###0.024___something###0.024___caller's###0.022___ready###0.022___passed###0.022___undefined###0.022___accessing###0.021___eolthen###0.020___cause###0.019___scalars###0.019___passing###0.019___store###0.019___fixed###0.019___merely###0.018___back###0.018___behavior###0.017___perl5###0.017___subroutine###0.016___does_not###0.016___reference###0.015___say###0.015___that_is###0.015___that's###0.014___create###0.014___different###0.014___value###0.013___version###0.013___functions###0.013___whether###0.012___eolthis###0.012___why###0.012___write###0.012___
131:204###0.17,183###0.15,107###0.15,95###0.15,205###0.14,111###0.14,108###0.14,206###0.14,51###0.14,210###0.14:How can I make the Perl equivalent of a C structure/C++ class/hash or array of hashes or arrays?  EOL EOL:Usually a hash ref, perhaps like this!: EOL EOL    $record = { EOL        NAME   => "Jason", EOL        EMPNO  => 132, EOL        TITLE  => "deputy peon", EOL        AGE    => 23, EOL        SALARY => 37_000, EOL        PALS   => [ "Norbert", "Rhys", "Phineas"], EOL    };  EOL EOLReferences are documented in perlref and the upcoming perlreftut. Examples of complex data structures are given in perldsc and perllol. Examples of structures and object-oriented classes are in perltoot. EOL EOL:relative_atomic_mass###0.02941___combining_weight###0.23529___equivalent###0.47059___eq###0.23529___atomic_weight###0.02941:how###1.00000:how can###1.00000:eol###0.046___structures###0.040___examples###0.035___structure/c###0.030___deputy###0.030___salary###0.030___rhys###0.030___phineas###0.030___peon###0.030___jason###0.030___class/hash###0.030___empno###0.030___pals###0.030___norbert###0.030___perlreftut###0.027___eolreferences###0.027___perllol###0.027___title###0.027___upcoming###0.027___age###0.025___classes###0.025___object-oriented###0.024___perldsc###0.024___perlref###0.022___complex###0.022___record###0.021___ref###0.021___perhaps###0.020___equivalent###0.020___perltoot###0.020___hashes###0.017___usually###0.017___given###0.017___arrays###0.016___name###0.016___documented###0.015___data###0.015___array###0.015___hash###0.013___perl###0.006___
132:129###0.28,123###0.27,120###0.25,118###0.22,130###0.21,228###0.20,122###0.20,124###0.19,165###0.18,95###0.16:How can I use a reference as a hash key?  EOL EOL:You can't do this directly, but you could use the standard Tie!:!:Refhash module distributed with Perl. EOL EOL EOL:pattern###0.00467___recommendation###0.00467___summons###0.00467___achievement###0.00467___process###0.00467___wait###0.00467___attainment###0.00467___personation###0.00467___imaginary_being###0.00467___quotation###0.03738___naming###0.00467___attribute###0.00467___conference###0.00467___book_of_facts###0.03738___citation###0.03738___credit###0.03738___commendation###0.00467___time_lag###0.00467___book###0.00467___stretching###0.00467___mention###0.03738___property###0.00467___assets###0.00467___reference###0.07477___written_symbol###0.00467___annotation###0.00467___excerpt###0.00467___written_document###0.00467___imaginary_creature###0.00467___acceptance###0.00467___remark###0.00467___papers###0.00467___grownup###0.00467___inspiration###0.00467___postponement###0.00467___education###0.00467___title###0.00467___educational_activity###0.00467___hold###0.00467___testimonial###0.00467___comment###0.00467___award###0.00467___laurels###0.00467___dissemination###0.00467___printed_symbol###0.00467___denotation###0.03738___communicator###0.00467___pedagogy###0.00467___airing###0.00467___extract###0.00467___delay###0.00467___longness###0.00467___payment###0.00467___action###0.00467___installation###0.00467___instruction###0.00467___repute###0.00467___source###0.03738___trait###0.00467___accomplishment###0.00467___honour###0.00467___thoroughbred###0.00467___message###0.00467___statement###0.00467___spreading###0.00467___consultation###0.03738___addition###0.00467___expansion###0.00467___characterization###0.00467___group_discussion###0.00467___good_word###0.00467___publication###0.00467___reputation###0.00467___enactment###0.00467___substance###0.00467___teaching###0.00467___document###0.00467___portrayal###0.00467___character###0.03738___acknowledgment###0.03738___dimension###0.00467___ledger_entry###0.00467___practice###0.00467___selection###0.00467___telephone###0.00467___speech_act###0.00467___phone###0.00467___extension###0.03738___honor###0.00467___adult###0.00467___improver###0.00467___public_exposure###0.00467___hash###0.07477___shaper###0.00467___point###0.00467___notation###0.00467___meaning###0.00467___enlargement###0.00467___subject_matter###0.00467___maker###0.00467___accolade###0.00467___approval###0.00467___telephone_set###0.00467___entry###0.00467___content###0.00467___facility###0.00467___note###0.00467:how###1.00000:how can###1.00000:refhash###0.152___tie###0.114___distributed###0.100___directly###0.095___key###0.093___reference###0.087___eol###0.082___hash###0.069___standard###0.063___can't###0.061___module###0.047___perl###0.031___
133:207###0.12,99###0.11,94###0.11,69###0.11,18###0.11,245###0.11,45###0.11,274###0.10,17###0.10,183###0.10:How do I handle binary data correctly?  EOL EOL:Perl is binary clean, so this shouldn't be a problem. For example, this works fine (assuming the files are found)!: EOL EOL    if (`cat /vmunix` =~ /gzip/) { EOLprint "Your kernel is GNU-zip enabled!!\n"; EOL    }  EOL EOLOn less elegant (read!: Byzantine) systems, however, you have to play tedious games with "text" versus "binary" files. See perlfunc/"binmode" or perlopentut. Most of these ancient-thinking systems are curses out of Microsoft, who seem to be committed to putting the backward into backward compatibility. EOL EOLIf you're concerned about 8-bit ASCII data, then see perllocale. EOL EOLIf you want to deal with multibyte characters, however, there are some gotchas. See the section on Regular Expressions. EOL EOL:noesis###0.01587___collection###0.01587___information###0.12698___accumulation###0.01587___star###0.01587___knowledge###0.01587___accusal###0.01587___double_star###0.12698___aggregation###0.01587___accusation###0.01587___message###0.01587___assemblage###0.01587___substance###0.01587___information_measure###0.01587___binary###0.25397___data###0.25397___subject_matter###0.01587___cognition###0.01587___content###0.01587:how###1.00000:how do###1.00000:binary###0.038___backward###0.038___however###0.025___eol###0.023___vmunix###0.021___gzip###0.021___enabled###0.021___binmode###0.021___tedious###0.021___byzantine###0.021___elegant###0.021___gnu-zip###0.021___ancient-thinking###0.021___data###0.021___files###0.021___systems###0.019___seem###0.019___kernel###0.019___play###0.019___multibyte###0.019___concerned###0.019___games###0.019___curses###0.019___putting###0.017___versus###0.017___compatibility###0.017___gotchas###0.017___committed###0.017___clean###0.016___microsoft###0.016___perlopentut###0.016___out_of###0.016___eolon###0.015___perllocale###0.015___fine###0.015___deal###0.014___cat###0.014___eolif###0.014___assuming###0.014___correctly###0.014___ascii###0.014___shouldn't###0.013___less###0.012___section###0.012___eolprint###0.012___perlfunc###0.012___expressions###0.012___handle###0.012___works###0.011___found###0.011___characters###0.011___problem###0.011___regular###0.010___text###0.010___for_example###0.009___you_have###0.009___read###0.008___you're###0.007___perl###0.004___
134:51###0.25,183###0.21,210###0.21,149###0.20,100###0.20,205###0.19,58###0.18,146###0.18,228###0.18,165###0.17:How do I determine whether a scalar is a number/whole/integer/float?   EOL EOL:Assuming that you don't care about IEEE notations like "NaN" or "Infinity", you probably just want to use a regular expression. EOL EOL   if (/\D/)            { print "has nondigits\n" } EOL   if (/^\d+$/)         { print "is a whole number\n" } EOL   if (/^-?\d+$/)       { print "is an integer\n" } EOL   if (/^[+-]?\d+$/)    { print "is a +/- integer\n" } EOL   if (/^-?\d+\.?\d*$/) { print "is a real number\n" } EOL   if (/^-?(?!:\d+(?!:\.\d*)?|\.\d+)$/) { print "is a decimal number" } EOL   if (/^([+-]?)(?=\d|\.\d)\d*(\.\d*)?([Ee]([+-]?\d+))?$/) EOL{ print "a C float" }  EOL EOLIf you're on a POSIX system, Perl's supports the POSIX!:!:strtod function. Its semantics are somewhat cumbersome, so here's a getnum wrapper function for more convenient access. This function takes a string and returns the number it found, or undef for input that isn't a C float. The is_numeric function is a front end to getnum if you just want to say, ``Is this a float?'' EOL EOL    sub getnum { EOL        use POSIX qw(strtod); EOL        my $str = shift; EOL        $str =~ s/^\s+//; EOL        $str =~ s/\s+$//; EOL        $!! = 0; EOL        my($num, $unparsed) = strtod($str); EOL        if (($str eq '') || ($unparsed !!= 0) || $!!) { EOL            return undef; EOL        } else { EOL            return $num; EOL        } EOL    } EOL EOL    sub is_numeric { defined getnum($_[0]) }   EOL EOLOr you could check out the String!:!:Scanf module on CPAN instead. The POSIX module (part of the standard Perl distribution) provides the strtod and strtol for converting strings to double and longs, respectively. EOL EOL:scalar###1.00000:who###0.50000___how###0.50000:how do###1.00000:getnum###0.057___strtod###0.057___eol###0.048___float###0.038___print###0.036___posix###0.032___is_numeric###0.028___unparsed###0.028___num###0.023___integer###0.022___function###0.021___undef###0.015___nan###0.014___nondigits###0.014___cumbersome###0.014___number/whole/integer/float###0.014___real_number###0.014___scanf###0.014___strtol###0.014___whole_number###0.014___wrapper###0.014___infinity###0.014___longs###0.014___front_end###0.014___return###0.013___number###0.013___converting###0.012___respectively###0.012___notations###0.012___ieee###0.012___sub###0.012___somewhat###0.011___string###0.011___decimal###0.010___convenient###0.010___semantics###0.010___returns###0.010___double###0.009___assuming###0.009___determine###0.009___care###0.009___check_out###0.009___module###0.009___takes###0.009___input###0.008___access###0.008___provides###0.008___supports###0.008___say###0.008___shift###0.008___expression###0.008___defined###0.007___strings###0.007___found###0.007___perl's###0.007___instead###0.007___here's###0.007___scalar###0.007___regular###0.007___eolor###0.006___isn't###0.006___whether###0.006___part###0.006___distribution###0.006___standard###0.005___probably###0.005___system###0.005___don't###0.005___you're###0.005___eolif###0.004___cpan###0.004___perl###0.002___
135:145###0.28,160###0.16,142###0.16,150###0.15,95###0.14,136###0.13,122###0.13,126###0.13,205###0.12,123###0.12:How do I keep persistent data across program calls?  EOL EOL:For some specific applications, you can use one of the DBM modules. See AnyDBM_File. More generically, you should consult the FreezeThaw, Storable, or Class!:!:Eroot modules from CPAN. Here's one example using Storable's store and retrieve functions!: EOL EOL    use Storable; EOL    store(\%hash, "filename"); EOL EOL    # later on...  EOL    $href = retrieve("filename");        # by ref EOL    %hash = %{ retrieve("filename") };   # direct to hash  EOL EOL:noesis###0.00730___structure###0.00730___organisation###0.00730___platform###0.05839___collection###0.00730___information###0.05839___accumulation###0.00730___adp_system###0.00730___written_document###0.00730___papers###0.00730___education###0.00730___computer_system###0.00730___adps###0.00730___knowledge###0.00730___educational_activity###0.00730___organization###0.00730___accusal###0.00730___political_platform###0.05839___pedagogy###0.00730___construction###0.00730___aggregation###0.00730___syllabus###0.05839___shoe###0.00730___horizontal_surface###0.00730___computing_system###0.00730___accusation###0.00730___instruction###0.00730___arrangement###0.00730___show###0.00730___message###0.00730___drawing###0.00730___broadcast###0.05839___substance###0.00730___assemblage###0.00730___teaching###0.00730___document###0.00730___information_measure###0.00730___program###0.11679___course_of_study###0.05839___curriculum###0.05839___system###0.00730___automatic_data_processing_system###0.00730___thought###0.00730___plan###0.05839___idea###0.00730___data###0.11679___subject_matter###0.00730___info###0.00730___level###0.00730___cognition###0.00730___content###0.00730:how###1.00000:how do###1.00000:retrieve###0.084___filename###0.070___storable###0.060___store###0.047___hash###0.046___eol###0.040___generically###0.034___anydbm_file###0.034___storable's###0.034___eroot###0.034___href###0.030___later_on###0.030___freezethaw###0.030___modules###0.030___persistent###0.028___dbm###0.026___consult###0.026___across###0.025___specific###0.024___direct###0.024___applications###0.024___ref###0.023___keep###0.022___one###0.022___class###0.021___calls###0.019___here's###0.017___data###0.016___functions###0.016___example###0.016___program###0.012___using###0.011___cpan###0.011___
136:135###0.13,51###0.11,183###0.10,134###0.09,107###0.09,266###0.09,131###0.09,205###0.09,95###0.08,128###0.08:How do I print out or copy a recursive data structure?  EOL EOL:The Data!:!:Dumper module on CPAN (or the 5.005 release of Perl) is great for printing out data structures. The Storable module, found on CPAN, provides a function called dclone that recursively copies its argument. EOL EOL    use Storable qw(dclone); EOL    $r2 = dclone($r1);  EOL EOLWhere $r1 can be a reference to any kind of data structure you'd like. It will be deeply copied. Because dclone takes and returns references, you'd have to add extra punctuation if you had a hash of arrays that you wanted to copy. EOL EOL    %newhash = %{ dclone(\%oldhash) };  EOL EOL:commercial_enterprise###0.00671___noesis###0.00671___structure###0.10738___operation###0.00671___thinking###0.00671___business###0.00671___collection###0.00671___copy###0.10738___information###0.05369___accumulation###0.00671___grammatical_constituent###0.00671___social_organization###0.05369___intellection###0.00671___mathematical_process###0.00671___text###0.00671___knowledge###0.00671___accusal###0.00671___written_matter###0.05369___complex_body_part###0.05369___construction###0.05369___aggregation###0.00671___accusation###0.00671___message###0.00671___textual_matter###0.00671___interpretation###0.00671___written_account###0.00671___artefact###0.00671___written_record###0.00671___constituent###0.00671___transcript###0.05369___substance###0.00671___assemblage###0.00671___mathematical_operation###0.00671___artifact###0.00671___information_measure###0.00671___social_system###0.05369___system###0.00671___thought###0.00671___mentation###0.00671___cerebration###0.00671___creating_from_raw_materials###0.00671___data###0.10738___social_organisation###0.05369___body_part###0.00671___subject_matter###0.00671___business_enterprise###0.00671___cognition###0.00671___content###0.00671:how###1.00000:how do###1.00000:dclone###0.137___storable###0.049___data_structure###0.049___copy###0.038___you'd###0.036___eol###0.029___oldhash###0.027___newhash###0.027___recursive###0.027___eolwhere###0.027___recursively###0.027___data###0.027___great###0.024___dumper###0.024___deeply###0.024___printing###0.024___punctuation###0.022___copies###0.021___copied###0.021___reference_to###0.020___returns###0.019___kind_of###0.019___extra###0.018___cpan###0.018___it_will###0.018___structures###0.018___wanted###0.018___argument###0.017___module###0.017___takes###0.017___references###0.016___provides###0.015___arrays###0.015___called###0.014___release###0.014___found###0.014___hash###0.012___function###0.010___print###0.009___perl###0.005___
137:210###0.12,218###0.10,206###0.10,183###0.09,220###0.09,205###0.08,215###0.08,165###0.08,101###0.08,51###0.08:How do I define methods for every class/object?  EOL EOL:Use the UNIVERSAL class (see UNIVERSAL). EOL EOL:mode###0.02564___fashion###0.02564___know-how###0.02564___method###0.20513___style###0.02564___way###0.02564___wise###0.20513___methods###0.41026___religious_leader###0.02564___manner###0.02564:how###1.00000:how do###1.00000:universal###0.294___class/object###0.165___define###0.147___every###0.108___methods###0.108___class###0.105___eol###0.071___
138:266###0.13,205###0.12,183###0.11,188###0.10,165###0.10,261###0.09,101###0.09,51###0.09,210###0.09,228###0.09:How do I verify a credit card checksum?  EOL EOL:Get the Business!:!:CreditCard module from CPAN. EOL EOL:pattern###0.00311___request###0.00311___instrument###0.00311___roll###0.00311___recommendation###0.00311___announcement###0.00311___summons###0.00311___paper_currency###0.00311___review_article###0.00311___process###0.00311___list###0.00311___surface###0.00311___savvy###0.00311___printed_circuit###0.00311___quotation###0.02484___remembering###0.00311___understanding###0.00311___humorist###0.00311___credit###0.04969___citation###0.02484___commendation###0.00311___book###0.00311___advertisement###0.00311___mention###0.02484___advert###0.00311___roster###0.00311___fare###0.00311___reference###0.02484___agitation###0.00311___annotation###0.00311___excerpt###0.00311___apprisal###0.00311___memory###0.00311___table###0.00311___legal_document###0.00311___financial_statement###0.00311___acceptance###0.00311___remark###0.00311___notification###0.00311___ad###0.00311___flat_solid###0.00311___listing###0.00311___attention###0.00311___indicator###0.00311___folding_money###0.00311___advertizing###0.00311___posting###0.02484___checksum###0.04969___discernment###0.00311___testimonial###0.00311___wag###0.02484___line###0.00311___comment###0.00311___award###0.00311___laurels###0.00311___poster###0.02484___bill_of_fare###0.02484___worker###0.00311___electrical_device###0.00311___official_document###0.00311___commission###0.00311___extract###0.00311___bill###0.02484___wit###0.02484___advertizement###0.00311___carte_du_jour###0.02484___paper_money###0.00311___promotion###0.00311___mouth###0.00311___payment###0.00311___action###0.00311___board###0.02484___agenda###0.00311___display###0.00311___brim###0.00311___review###0.00311___honour###0.00311___message###0.00311___thoroughbred###0.00311___statement###0.00311___programme###0.00311___legal_instrument###0.00311___sheet###0.00311___menu###0.02484___good_word###0.00311___publication###0.00311___deferred_payment###0.02484___lineup###0.02484___substance###0.00311___critique###0.00311___acknowledgment###0.02484___intelligence###0.00311___recognition###0.02484___critical_review###0.00311___program###0.00311___asking###0.00311___transmitting###0.00311___practice###0.00311___selection###0.00311___notice###0.02484___speech_act###0.00311___honor###0.00311___timber###0.00311___sign###0.00311___horse###0.00311___lumber###0.00311___batting_order###0.02484___saw###0.00311___apprehension###0.00311___circuit_board###0.02484___docket###0.00311___committee###0.00311___transmission###0.00311___card###0.04969___attending###0.00311___carte###0.02484___notation###0.00311___transmittal###0.00311___meaning###0.00311___equus_caballus###0.00311___humourist###0.00311___telling###0.00311___subject_matter###0.00311___accolade###0.00311___advertising###0.00311___approval###0.00311___content###0.00311___promulgation###0.00311___schedule###0.00311___note###0.00311:how###1.00000:how do###1.00000:credit_card###0.170___creditcard###0.170___checksum###0.170___business###0.151___verify###0.151___eol###0.074___cpan###0.057___module###0.053___
139:134###0.15,266###0.13,71###0.13,222###0.11,69###0.11,188###0.10,205###0.10,175###0.09,49###0.09,261###0.09:How do I pack arrays of doubles or floats for XS code?  EOL EOL:The kgbpack.c code in the PGPLOT module on CPAN does just this. If you're doing a lot of float or double processing, consider using the PDL module from CPAN instead--it makes number-crunching easy. EOL EOL:paraphernalia###0.01299___doubles###0.20779___wearing_apparel###0.01299___arrays###0.20779___gear###0.01299___regalia###0.10390___apparel###0.01299___clothing###0.01299___vesture###0.01299___appurtenances###0.01299___raiment###0.10390___directional_antenna###0.01299___clothes###0.01299___arrangement###0.01299___display###0.01299___wear###0.01299___article_of_clothing###0.01299___finery###0.10390___array###0.10390:how###1.00000:how do###1.00000:number-crunching###0.062___pgplot###0.062___floats###0.062___kgbpack###0.062___doubles###0.062___float###0.055___pdl###0.051___code###0.046___processing###0.044___easy###0.041___double###0.041___cpan###0.041___pack###0.040___doing###0.039___module###0.038___consider###0.038___a_lot###0.036___arrays###0.034___makes###0.033___instead###0.032___eol###0.027___you're###0.022___using###0.021___
140:233###0.38,142###0.17,146###0.17,183###0.17,166###0.15,101###0.15,175###0.15,165###0.15,177###0.14,51###0.14:How do I flush/unbuffer an output filehandle? Why must I do this?  EOL EOL:The C standard I/O library (stdio) normally buffers characters sent to devices. This is done for efficiency reasons so that there isn't a system call for each byte. Any time you use print() or write() in Perl, you go though this buffering. syswrite() circumvents stdio and buffering. EOL EOLIn most stdio implementations, the type of output buffering and the size of the buffer varies according to the type of device. Disk files are block buffered, often with a buffer size of more than 2k. Pipes and sockets are often buffered with a buffer size between 1/2 and 2k. Serial devices (e.g. modems, terminals) are normally line-buffered, and stdio sends the entire line when it gets the newline. EOL EOLPerl does not support truly unbuffered output (except insofar as you can syswrite(OUT, $char, 1)). What it does instead support is "command buffering", in which a physical write is performed after every output command. This isn't as hard on your system as unbuffering, but does get the output where you want it when you want it. EOL EOLIf you expect characters to get to your device when you print them there, you'll want to autoflush its handle. Use select() and the $| variable to control autoflushing (see perlvar/$| and perlfunc/select)!: EOL EOL    $old_fh = select(OUTPUT_HANDLE); EOL    $| = 1; EOL    select($old_fh);  EOL EOLOr using the traditional idiom!: EOL EOL    select((select(OUTPUT_HANDLE), $| = 1)[0]);  EOL EOLOr if don't mind slowly loading several thousand lines of module code just because you're afraid of the $| variable!: EOL EOL    use FileHandle; EOL    open(DEV, "+</dev/tty");   # ceci n'est pas une pipe EOL    DEV->autoflush(1);  EOL EOLor the newer IO!:!:* modules!: EOL EOL    use IO!:!:Handle; EOL    open(DEV, ">/dev/printer");   # but is this? EOL    DEV->autoflush(1);  EOL EOLor even this!: EOL EOL    use IO!:!:Socket;  # this one is kinda a pipe? EOL    $sock = IO!:!:Socket!:!:INET->new(PeerAddr => 'www.perl.com', EOL  PeerPort => 'http(80)', EOL  Proto    => 'tcp'); EOL    die "$!!" unless $sock; EOL EOL    $sock->autoflush(); EOL    print $sock "GET / HTTP/1.0" . "\015\012" x 2; EOL    $document = join('', <$sock>); EOL    print "DOC IS!: $document\n";  EOL EOLNote the bizarrely hardcoded carriage return and newline in their octal equivalents. This is the ONLY way (currently) to assure a proper flush on all platforms, including Macintosh. That's the way things work in network programming!: you really should specify the exact bit pattern on the network line terminator. In practice, "\n\n" often works, but this is not portable. EOL EOLSee perlfaq9 for other examples of fetching URLs over the web. EOL EOL:production###0.01818___attendance###0.01818___output###0.29091___outturn###0.14545___income###0.01818___assemblage###0.01818___end_product###0.14545___turnout###0.14545___yield###0.14545___attending###0.01818___product###0.01818___gathering###0.01818:why###0.50000___how###0.50000:how do###0.50000___why must###0.50000:sock###0.030___eol###0.025___buffering###0.021___dev###0.020___autoflush###0.020___select###0.020___stdio###0.019___output###0.017___buffer###0.014___size###0.013___old_fh###0.012___buffered###0.012___output_handle###0.012___eolor###0.011___syswrite###0.010___document###0.010___often###0.010___devices###0.009___newline###0.009___device###0.009___print###0.008___socket###0.008___normally###0.008___pipe###0.008___type###0.007___command###0.007___filehandle###0.006___handle###0.006___support###0.006___characters###0.006___circumvents###0.006___unbuffered###0.006___truly###0.006___terminator###0.006___terminals###0.006___ceci###0.006___bizarrely###0.006___doc###0.006___buffers###0.006___in_practice###0.006___inet###0.006___carriage_return###0.006___modems###0.006___hardcoded###0.006___proto###0.006___dev/printer###0.006___une###0.006___kinda###0.006___line-buffered###0.006___done_for###0.006___unbuffering###0.006___assure###0.006___n'est###0.006___performed###0.006___implementations###0.006___peerport###0.006___peeraddr###0.006___pas###0.006___equivalents###0.006___insofar###0.006___isn't###0.005___variable###0.005___line###0.005___flush/unbuffer###0.005___afraid###0.005___macintosh###0.005___network_programming###0.005___newer###0.005___perlfaq9###0.005___autoflushing###0.005___perlfunc/select###0.005___pipes###0.005___slowly###0.005___specify###0.005___tcp###0.005___varies###0.005___http/1###0.005___idiom###0.005___exact###0.005___fetching###0.005___write###0.005___open###0.005___octal###0.005___traditional###0.005___get_to###0.005___thousand###0.005___according_to###0.005___physical###0.005___disk###0.005___sockets###0.005___network###0.005___flush###0.005___serial###0.005___efficiency###0.004___i/o###0.004___work_in###0.004___sends###0.004___join###0.004___mind###0.004___loading###0.004___system_call###0.004___char###0.004___urls###0.004___except###0.004___sent###0.004___expect###0.004___entire###0.004___e.g.###0.004___platforms###0.004___dev/tty###0.004___http###0.004___eolperl###0.004___perlvar###0.004___gets###0.004___byte###0.004___every###0.004___hard###0.003___control###0.003___reasons###0.003___library###0.003___proper###0.003___currently###0.003___so_that###0.003___block###0.003___portable###0.003___more_than###0.003___bit###0.003___web###0.003___though###0.003___unless###0.003___eolnote###0.003___including###0.003___does_not###0.003___examples###0.003___pattern###0.003___eolsee###0.003___works###0.003___several###0.003___that's###0.003___eolin###0.003___lines###0.003___instead###0.003___is_not###0.003___things###0.003___files###0.003___even###0.002___you'll###0.002___really###0.002___die###0.002___modules###0.002___why###0.002___standard###0.002___time###0.002___system###0.002___new###0.002___don't###0.002___code###0.002___you're###0.002___using###0.002___eolif###0.002___one###0.002___module###0.001___perl###0.001___
141:163###0.39,142###0.37,177###0.33,155###0.31,151###0.28,143###0.25,189###0.23,160###0.23,169###0.22,178###0.22:How do I change one line in a file/delete a line in a file/insert a line in the middle of a file/append to the beginning of a file?  EOL EOL:Those are operations of a text editor. Perl is not a text editor. Perl is a programming language. You have to decompose the problem into low-level calls to read, write, open, close, and seek. EOL EOLAlthough humans have an easy time thinking of a text file as being a sequence of lines that operates much like a stack of playing cards--or punch cards--computers usually see the text file as a sequence of bytes. In general, there's no direct way for Perl to seek to a particular line of a file, insert text into a file, or remove text from a file. EOL EOL(There are exceptions in special circumstances. You can add or remove data at the very end of the file. A sequence of bytes can be replaced with another sequence of the same length. The $DB_RECNO array bindings as documented in DB_File also provide a direct way of modifying a file. Files where all lines are the same length are also easy to alter.) EOL EOLThe general solution is to create a temporary copy of the text file with the changes you want, then copy that over the original. This assumes no locking. EOL EOL    $old = $file; EOL    $new = "$file.tmp.$$"; EOL    $bak = "$file.orig"; EOL EOL    open(OLD, "< $old") or die "can't open $old!: $!!"; EOL    open(NEW, "> $new") or die "can't open $new!: $!!"; EOL EOL    # Correct typos, preserving case EOL    while (<OLD>) { EOLs/\b(p)earl\b/${1}erl/i; EOL(print NEW $_)or die "can't write to $new!: $!!"; EOL    } EOL EOL    close(OLD)or die "can't close $old!: $!!"; EOL    close(NEW) or die "can't close $new!: $!!"; EOL EOL    rename($old, $bak)or die "can't rename $old to $bak!: $!!"; EOL    rename($new, $old)or die "can't rename $new to $old!: $!!";  EOL EOLPerl can do this sort of thing for you automatically with the -i command-line switch or the closely-related $^I variable (see perlrun for more details). Note that -i may require a suffix on some non-Unix systems; see the platform-specific documentation that came with your port. EOL EOL    # Renumber a series of tests from the command line EOL    perl -pi -e 's/(^\s+test\s+)\d+/ $1 . ++$count /e' t/op/taint.t EOL EOL    # form a script EOL    local($^I, @ARGV) = ('.orig', glob("*.c")); EOL    while (<>) { EOLif ($. == 1) { EOL    print "This line should appear at the top of each file\n"; EOL} EOLs/\b(p)earl\b/${1}erl/i;        # Correct typos, preserving case EOLprint; EOLclose ARGV if eof;              # Reset $. EOL    }  EOL EOLIf you need to seek to an arbitrary line of a file that changes infrequently, you could build up an index of byte positions of where the line ends are in the file. If the file is large, an index of every tenth or hundredth line end would allow you to seek and read fairly efficiently. If the file is sorted, try the look.pl library (part of the standard perl distribution). EOL EOLIn the unique case of deleting lines at the end of a file, you can use tell() and truncate(). The following code snippet deletes the last line of a file without making a copy or reading the whole file into memory!: EOL EOLopen (FH, "+< $file"); EOL        while ( <FH> ) { $addr = tell(FH) unless eof(FH) } EOL        truncate(FH, $addr);  EOL EOLError checking is left as an exercise for the reader. EOL EOL:change_of_location###0.00238___filiation###0.00238___depression###0.00238___humor###0.00238___playacting###0.00238___object###0.00238___boundary###0.00238___family_relationship###0.00238___visual_perception###0.00238___paper_currency###0.00238___application###0.00238___conductor###0.00238___scope###0.00238___period_of_time###0.00238___communication###0.00238___homicide###0.00238___beholding###0.00238___aura###0.00238___communication_channel###0.01900___ancestry###0.01900___layer###0.00238___headache###0.00238___occupation###0.01900___production###0.00238___tune###0.01900___nutriment###0.00238___business###0.01900___telegram###0.00238___water###0.00238___nutrition###0.00238___melodic_phrase###0.01900___origin###0.01900___marketing###0.00238___reasoning###0.00238___passageway###0.00238___stratum###0.00238___job###0.01900___comparison###0.00238___bodily_fluid###0.00238___applications_programme###0.00238___book###0.00238___time_period###0.00238___performing###0.00238___reach###0.00238___angular_shape###0.00238___workplace###0.00238___gas###0.00238___inheritance###0.00238___logical_argument###0.01900___blood###0.01900___beginning###0.00238___television_station###0.00238___vexation###0.00238___movement###0.00238___quality###0.00238___crease###0.01900___course###0.01900___aliment###0.00238___variety###0.00238___differentiation###0.00238___joint###0.00238___education###0.00238___hereditary_pattern###0.00238___genealogy###0.00238___wire###0.00238___robbery###0.00238___telecasting###0.00238___folding_money###0.00238___hero###0.00238___educational_activity###0.00238___musical_perception###0.00238___disposition###0.00238___acting###0.00238___discussion###0.00238___line###0.03800___comment###0.00238___linear_unit###0.00238___murder###0.00238___region###0.00238___medium###0.00238___stock###0.00238___series###0.00238___commerce###0.00238___side###0.00238___high_status###0.00238___victuals###0.00238___pedigree###0.01900___incline###0.00238___derivation###0.00238___angularity###0.00238___way###0.00238___pedagogy###0.00238___humour###0.00238___target###0.00238___obligation###0.00238___nourishment###0.00238___distinction###0.00238___lineage###0.00238___trench###0.00238___abstract_thought###0.00238___adulthood###0.00238___seam###0.01900___sector###0.00238___give-and-take###0.00238___paper_money###0.00238___rounder###0.00238___concern###0.00238___relationship###0.00238___commercial_activity###0.00238___move###0.00238___action###0.00238___installation###0.00238___body_of_water###0.00238___commercialism###0.00238___instruction###0.00238___libertine###0.00238___motion###0.00238___alimentation###0.00238___kinship###0.00238___rope###0.00238___slaying###0.00238___temperament###0.00238___seeing###0.00238___orbit###0.00238___activity###0.00238___personal_letter###0.00238___traveling###0.00238___business_activity###0.00238___playing###0.00238___melody###0.01900___commentary###0.00238___sustenance###0.00238___television###0.00238___word###0.00238___breed###0.00238___impression###0.00238___unfortunate_person###0.00238___argumentation###0.01900___written_account###0.00238___objective###0.00238___cable###0.01900___work###0.00238___acquiring###0.00238___written_record###0.00238___imprint###0.00238___logical_thinking###0.00238___atmosphere###0.00238___range###0.00238___teaching###0.00238___tone_of_voice###0.00238___responsibility###0.00238___difficulty###0.00238___bound###0.00238___mercantilism###0.00238___getting###0.00238___debauchee###0.00238___contrast###0.01900___crinkle###0.01900___oppositeness###0.00238___parentage###0.01900___duty###0.00238___enterprise###0.00238___tv_station###0.00238___travel###0.00238___compass###0.00238___liquid_body_substance###0.00238___wind###0.00238___wrinkle###0.01900___video###0.00238___family_tree###0.00238___body_fluid###0.00238___musical_notation###0.00238___tone###0.00238___direction###0.00238___unfortunate###0.00238___element###0.00238___worry###0.00238___music###0.00238___strain###0.00238___furrow###0.01900___travelling###0.00238___comparing###0.00238___channel###0.01900___short_letter###0.01900___execution###0.00238___transmission###0.00238___bounds###0.00238___tv###0.00238___application_program###0.00238___opposition###0.00238___point###0.00238___product###0.00238___communicating###0.00238___part###0.00238___certificate_of_indebtedness###0.00238___demarcation###0.01900___television_system###0.00238___aim###0.00238___passage###0.00238___air###0.01900___period###0.00238___slope###0.00238___social_control###0.00238___ambit###0.00238___people###0.00238___debt_instrument###0.00238___descent###0.01900___intersection###0.00238___facility###0.00238___note###0.01900:how###1.00000:how do###1.00000:file###0.035___eol###0.025___line###0.022___new###0.019___rename###0.019___sequence###0.019___die###0.017___can't###0.015___close###0.015___seek###0.015___bak###0.014___text_file###0.014___open###0.011___copy###0.011___cards###0.010___orig###0.010___earl###0.010___erl/i###0.010___typos###0.009___text_editor###0.009___preserving###0.009___addr###0.009___case###0.009___eols###0.009___argv###0.009___truncate###0.008___lines###0.008___changes###0.008___direct###0.007___eof###0.007___index###0.007___easy###0.007___bytes###0.007___remove###0.007___length###0.007___tell###0.007___correct###0.006___perl###0.005___hundredth###0.005___command-line###0.005___snippet###0.005___deletes###0.005___deleting###0.005___decompose###0.005___sort_of###0.005___build_up###0.005___suffix###0.005___operates###0.005___closely-related###0.005___t/op/taint###0.005___tenth###0.005___file/append###0.005___humans###0.005___exceptions###0.005___file/delete###0.005___computers###0.005___platform-specific###0.005___look.pl###0.005___punch###0.005___new_to###0.005___file/insert###0.005___renumber###0.005___replaced###0.005___s+test###0.005___text###0.005___in_the_middle###0.004___insert###0.004___stack###0.004___tmp###0.004___thinking###0.004___infrequently###0.004___db_recno###0.004___alter###0.004___write###0.004___eolerror###0.004___low-level###0.004___circumstances###0.004___playing###0.004___bindings###0.004___series###0.004___efficiently###0.004___fairly###0.004___read###0.004___switch###0.004___positions###0.004___tests###0.004___top###0.004___eolclose###0.004___unique###0.004___non-unix###0.004___modifying###0.004___beginning###0.004___reset###0.004___perlrun###0.004___eolalthough###0.004___db_file###0.004___ends###0.004___making###0.004___locking###0.004___print###0.003___command_line###0.003___glob###0.003___temporary###0.003___eolopen###0.003___reader###0.003___exercise###0.003___checking###0.003___sorted###0.003___programming_language###0.003___allow###0.003___eolperl###0.003___arbitrary###0.003___eolif###0.003___original###0.003___large###0.003___operations###0.003___appear###0.003___port###0.003___automatically###0.003___assumes###0.003___byte###0.003___special###0.003___particular###0.003___whole###0.003___every###0.003___library###0.003___memory###0.003___note###0.003___general###0.003___count###0.003___left###0.003___provide###0.003___form###0.003___eolprint###0.003___unless###0.003___documentation###0.003___reading###0.003___in_general###0.003___calls###0.003___thing###0.003___require###0.003___usually###0.003___there's###0.003___last###0.003___script###0.003___solution###0.003___change###0.002___create###0.002___eolin###0.002___local###0.002___problem###0.002___without###0.002___documented###0.002___is_not###0.002___following###0.002___data###0.002___array###0.002___details###0.002___files###0.002___try###0.002___variable###0.002___part###0.002___systems###0.002___distribution###0.002___you_have###0.002___standard###0.002___time###0.002___need###0.002___eolthe###0.002___may###0.002___code###0.002___one###0.001___
142:141###0.37,163###0.35,145###0.27,177###0.23,151###0.22,143###0.20,174###0.20,92###0.19,169###0.18,160###0.18:How do I count the number of lines in a file?  EOL EOL:One fairly efficient way is to count newlines in the file. The following program uses a feature of tr///, as documented in perlop. If your text file doesn't end with a newline, then it's not really a proper text file, so this may report one fewer line than you expect. EOL EOL    $lines = 0; EOL    open(FILE, $filename) or die "Can't open `$filename'!: $!!"; EOL    while (sysread FILE, $buffer, 4096) { EOL$lines += ($buffer =~ tr/\n//); EOL    } EOL    close FILE;  EOL EOLThis assumes no funny games with newline translations. EOL EOL:change_of_location###0.00123___depression###0.00123___instrument###0.00123___playacting###0.00123___mechanical_system###0.00123___boundary###0.00123___paper_currency###0.00123___scope###0.00123___personal_line_of_credit###0.00980___line_of_business###0.00980___effect###0.00123___communication###0.00123___homicide###0.00123___assembly_line###0.00980___communication_channel###0.00980___rail_line###0.00980___layer###0.00123___software_system###0.00123___occupation###0.00980___favour###0.00123___personage###0.00123___blood_line###0.00980___water###0.00123___nutrition###0.00123___origin###0.00980___reasoning###0.00123___routine###0.00980___job###0.00980___bodily_fluid###0.00123___provisions###0.00123___applications_programme###0.00123___provision###0.00123___performing###0.00123___time_period###0.00123___angular_shape###0.00123___unit_of_measurement###0.00123___logical_argument###0.00980___relative###0.00123___perception###0.00123___vexation###0.00123___legal_document###0.00123___quality###0.00123___course###0.00980___differentiation###0.00123___shift###0.00123___hereditary_pattern###0.00123___genealogy###0.00123___telecasting###0.00123___hero###0.00123___folding_money###0.00123___line_of_products###0.00980___bloodline###0.00980___bit###0.00980___disposition###0.00123___acting###0.00123___time###0.00123___rhetorical_device###0.00123___line###0.00123___linear_unit###0.00123___medium###0.00123___commerce###0.00123___series###0.00123___side###0.00123___victuals###0.00123___change_of_course###0.00123___connecter###0.00123___angularity###0.00123___maneuver###0.00123___pedagogy###0.00123___humour###0.00123___target###0.00123___obligation###0.00123___manoeuvre###0.00123___lineage###0.00123___example###0.00123___public_presentation###0.00123___curved_shape###0.00123___trench###0.00123___official_document###0.00123___production_line###0.00980___seam###0.00980___sector###0.00123___shape###0.00123___rounder###0.00123___sum###0.00123___connection###0.00123___software_package###0.00123___package###0.00123___supplies###0.00123___move###0.00123___action###0.00123___work_shift###0.00123___body_of_water###0.00123___motion###0.00123___symbol###0.00123___phone_line###0.00980___reflection###0.00123___procedure###0.00123___orbit###0.00123___unit###0.00123___sum_of_money###0.00123___instance###0.00123___traveling###0.00123___business_activity###0.00123___cognitive_content###0.00123___melody###0.00980___stores###0.00123___cutting_implement###0.00123___impression###0.00123___breed###0.00123___unfortunate_person###0.00123___argumentation###0.00980___form###0.00123___written_account###0.00123___favor###0.00123___cable###0.00980___small_indefinite_amount###0.00123___number###0.01961___income###0.00123___mental_object###0.00123___imprint###0.00123___figure###0.00980___whole_number###0.00123___teaching###0.00123___dramatic_work###0.00123___responsibility###0.00123___mercantilism###0.00123___phenomenon###0.00123___debauchee###0.00123___getting###0.00123___contrast###0.00980___illustration###0.00123___crinkle###0.00980___parentage###0.00980___enterprise###0.00123___decoration###0.00123___tv_station###0.00123___stable_gear###0.00123___travel###0.00123___development###0.00123___compass###0.00123___wind###0.00123___video###0.00123___important_person###0.00123___body_fluid###0.00123___transmission_line###0.00980___tone###0.00123___direction###0.00123___element###0.00123___melodic_line###0.00980___supply###0.00123___route###0.00123___music###0.00123___strain###0.00123___furrow###0.00980___travelling###0.00123___comparing###0.00123___execution###0.00123___bank_line###0.00980___bounds###0.00123___opposition###0.00123___point###0.00123___part###0.00123___certificate_of_indebtedness###0.00123___demarcation###0.00980___play###0.00123___passage###0.00123___slope###0.00123___dividing_line###0.00980___ambit###0.00123___amount_of_money###0.00123___debt_instrument###0.00123___descent###0.00980___intersection###0.00123___ornamentation###0.00123___note###0.00980___commercial_enterprise###0.00123___filiation###0.00123___humor###0.00123___case###0.00123___rotation###0.00123___object###0.00123___family_relationship###0.00123___physical_structure###0.00123___visual_perception###0.00123___application###0.00123___conductor###0.00123___period_of_time###0.00123___numeral###0.00980___line_of_descent###0.00980___process###0.00123___change_of_direction###0.00123___beholding###0.00123___telephone_line###0.00980___aura###0.00123___ancestry###0.00980___headache###0.00123___line_of_merchandise###0.00980___production###0.00123___tune###0.00980___business###0.00980___nutriment###0.00123___telegram###0.00123___melodic_phrase###0.00980___marketing###0.00123___product_line###0.00980___fragment###0.00123___passageway###0.00123___credit###0.00123___stratum###0.00123___act###0.00980___comparison###0.00123___personal_credit_line###0.00980___book###0.00123___manifestation###0.00123___opening###0.00123___reach###0.00123___workplace###0.00123___gas###0.00123___inheritance###0.00123___blood###0.00980___reflexion###0.00123___beginning###0.00123___television_station###0.00123___movement###0.00123___pipeline###0.00980___crease###0.00980___periodical###0.00123___variety###0.00123___aliment###0.00123___joint###0.00123___education###0.00123___robbery###0.00123___influential_person###0.00123___wire###0.00123___line_of_reasoning###0.00980___relation###0.00123___educational_activity###0.00123___musical_perception###0.00123___pipage###0.00123___discussion###0.00123___merchandise###0.00123___comment###0.00123___murder###0.00123___wares###0.00123___region###0.00123___stock###0.00123___piping###0.00123___connective###0.00123___high_status###0.00123___pedigree###0.00980___printing###0.00123___incline###0.00123___derivation###0.00123___way###0.00123___line_of_work###0.00980___nourishment###0.00123___walk###0.00123___distinction###0.00123___gossip###0.00123___business_line###0.00980___abstract_thought###0.00123___adulthood###0.00123___organic_structure###0.00123___dramatic_composition###0.00123___give-and-take###0.00123___paper_money###0.00123___concern###0.00123___curve###0.00123___relationship###0.00123___commercial_activity###0.00123___installation###0.00123___agate_line###0.00980___commercialism###0.00123___instruction###0.00123___libertine###0.00123___credit_line###0.00980___alimentation###0.00123___kinship###0.00123___connexion###0.00123___rope###0.00123___road###0.00123___slaying###0.00123___temperament###0.00123___seeing###0.00123___activity###0.00123___personal_letter###0.00123___playing###0.00123___legal_instrument###0.00123___reorientation###0.00123___commentary###0.00123___sustenance###0.00123___word###0.00123___television###0.00123___saddlery###0.00123___period_of_play###0.00123___objective###0.00123___work###0.00123___acquiring###0.00123___written_record###0.00123___logical_thinking###0.00123___atmosphere###0.00123___range###0.00123___software###0.00123___railway_line###0.00980___pipe###0.00123___perceptual_experience###0.00123___turn###0.00980___simulation###0.00123___tone_of_voice###0.00123___difficulty###0.00123___integer###0.00123___bound###0.00123___connector###0.00123___oppositeness###0.00123___duty###0.00123___area_unit###0.00123___line_of_credit###0.00980___scuttlebutt###0.00123___body###0.00123___liquid_body_substance###0.00123___wrinkle###0.00980___performance###0.00123___family_tree###0.00123___musical_notation###0.00123___unfortunate###0.00123___percept###0.00123___playing_period###0.00123___issue###0.00980___worry###0.00123___mouthful###0.00123___duty_period###0.00123___channel###0.00980___expression###0.00123___short_letter###0.00980___taste###0.00123___supplying###0.00123___transmission###0.00123___tv###0.00123___amount###0.00123___application_program###0.00123___square_measure###0.00123___product###0.00123___communicating###0.00123___aim###0.00123___television_system###0.00123___model###0.00123___air###0.00980___tack###0.00123___period###0.00123___social_control###0.00123___people###0.00123___lines###0.01961___business_enterprise###0.00123___small_indefinite_quantity###0.00123___content###0.00123___facility###0.00123___ornament###0.00123___conducting_wire###0.00123:how###1.00000:how do###1.00000:file###0.058___text_file###0.057___buffer###0.050___lines###0.050___newline###0.048___filename###0.045___eol###0.042___count###0.040___translations###0.028___games###0.028___fewer###0.028___funny###0.028___open###0.027___report###0.026___fairly###0.026___sysread###0.024___feature###0.024___newlines###0.023___perlop###0.023___expect###0.023___efficient###0.021___assumes###0.021___one###0.021___proper###0.020___uses###0.018___close###0.018___documented###0.016___following###0.016___really###0.015___number###0.015___line###0.014___die###0.014___eolthis###0.014___can't###0.013___doesn't###0.012___it's###0.012___may###0.012___program###0.011___
143:151###0.30,141###0.25,163###0.22,145###0.22,142###0.20,177###0.20,265###0.19,165###0.18,183###0.18,160###0.18:How do I make a temporary file name?  EOL EOL:Use the new_tmpfile class method from the IO!:!:File module to get a filehandle opened for reading and writing. Use it if you don't need to know the file's name!: EOL EOL    use IO!:!:File; EOL    $fh = IO!:!:File->new_tmpfile() EOLor die "Unable to make new temporary file!: $!!";  EOL EOLIf you do need to know the file's name, you can use the tmpnam function from the POSIX module to get a filename that you then open yourself!: EOL EOL    use Fcntl; EOL    use POSIX qw(tmpnam); EOL EOL    # try new temporary filenames until we get one that didn't already EOL    # exist;  the check should be unnecessary, but you can't be too careful EOL    do { $name = tmpnam() } EOL        until sysopen(FH, $name, O_RDWR|O_CREAT|O_EXCL); EOL EOL    # install atexit-style handler so that when we exit or die, EOL    # we automatically delete this temporary file EOL    END { unlink($name) or die "Couldn't unlink $name !: $!!" } EOL EOL    # now go on to use the file ...  EOL EOLIf you're committed to creating a temporary file by hand, use the process ID and/or the current time-value. If you need to have many temporary files in one process, use a counter!: EOL EOL    BEGIN { EOLuse Fcntl; EOLmy $temp_dir = -d '/tmp' ? '/tmp' !: $ENV{TMP} || $ENV{TEMP}; EOLmy $base_name = sprintf("%s/%d-%d-0000", $temp_dir, $$, time()); EOLsub temp_file { EOL    local *FH; EOL    my $count = 0; EOL    until (defined(fileno(FH)) || $count++ > 100) { EOL$base_name =~ s/-(\d+)$/"-" . (1 + $1)/e; EOLsysopen(FH, $base_name, O_WRONLY|O_EXCL|O_CREAT); EOL    } EOL    if (defined(fileno(FH)) EOLreturn (*FH, $base_name); EOL    } else { EOLreturn (); EOL    } EOL} EOL    }  EOL EOL:phratry###0.01042___effect###0.01042___personage###0.01042___perception###0.01042___characterisation###0.01042___rhetorical_device###0.01042___obloquy###0.01042___hatchet_job###0.01042___maneuver###0.01042___manoeuvre###0.01042___shape###0.01042___sum###0.01042___sept###0.01042___sum_of_money###0.01042___public_figure###0.08333___impression###0.01042___form###0.01042___name###0.16667___kinfolk###0.01042___figure###0.08333___whole_number###0.01042___defamation###0.01042___illustration###0.01042___word-painting###0.01042___calumny###0.01042___decoration###0.01042___important_person###0.01042___epithet###0.08333___play###0.01042___depiction###0.01042___amount_of_money###0.01042___ornamentation###0.01042___gens###0.08333___physical_structure###0.01042___kinsfolk###0.01042___influential_person###0.01042___family_line###0.01042___traducement###0.01042___organic_structure###0.01042___characterization###0.01042___perceptual_experience###0.01042___simulation###0.01042___integer###0.01042___family###0.01042___word_picture###0.01042___body###0.01042___picture###0.01042___percept###0.01042___delineation###0.01042___folk###0.01042___amount###0.01042___model###0.01042___ornament###0.01042:name###0.50000___how###0.50000:how do###1.00000:temporary###0.047___base_name###0.043___eol###0.041___name###0.040___tmpnam###0.032___file###0.031___tmp###0.029___until###0.022___new_tmpfile###0.021___temp_dir###0.021___file's###0.018___unlink###0.018___o_excl###0.018___fileno###0.016___env###0.016___o_creat###0.015___fcntl###0.015___die###0.014___eolreturn###0.013___count###0.013___need###0.013___eolmy###0.012___know###0.012___process###0.012___posix###0.012___defined###0.011___temp_file###0.010___atexit-style###0.010___d-0000###0.010___go_on###0.010___eolsysopen###0.010___time-value###0.010___unnecessary###0.010___unable###0.009___eolsub###0.009___careful###0.009___temp###0.009___committed###0.009___opened###0.009___counter###0.009___by_hand###0.009___exist###0.009___new###0.008___filenames###0.008___o_rdwr###0.008___o_wronly###0.008___and/or###0.008___didn't###0.007___creating###0.007___eoluse###0.007___filename###0.007___handler###0.007___couldn't###0.007___eolif###0.007___automatically###0.007___sysopen###0.007___sprintf###0.007___delete###0.007___one###0.007___class###0.007___module###0.006___so_that###0.006___begin###0.006___install###0.006___exit###0.006___writing###0.006___reading###0.006___yourself###0.006___already###0.006___filehandle###0.006___method###0.006___check###0.005___local###0.005___current###0.005___files###0.005___try###0.005___eolor###0.005___open###0.004___time###0.004___can't###0.004___don't###0.004___function###0.004___you're###0.003___
144:69###0.22,149###0.19,160###0.18,163###0.16,100###0.16,223###0.15,177###0.15,146###0.15,183###0.15,99###0.15:How can I manipulate fixed-record-length files?  EOL EOL:The most efficient way is using pack() and unpack(). This is faster than using substr() when taking many, many strings. It is slower for just a few. EOL EOLHere is a sample chunk of code to break up and put back together again some fixed-format input lines, in this case from the output of a normal, Berkeley-style ps!: EOL EOL    # sample input line!: EOL    #   15158 p5  T      0!:00 perl /home/tchrist/scripts/now-what EOL    $PS_T = 'A6 A4 A7 A5 A*'; EOL    open(PS, "ps|"); EOL    print scalar <PS>; EOL    while (<PS>) { EOL($pid, $tt, $stat, $time, $command) = unpack($PS_T, $_); EOLfor $var (qw!!pid tt stat time command!!) { EOL    print "$var!: <$$var>\n"; EOL} EOLprint 'line=', pack($PS_T, $pid, $tt, $stat, $time, $command), EOL"\n"; EOL    }  EOL EOLWe've used $$var in a way that forbidden by use strict 'refs'. That is, we've promoted a string to a scalar variable reference using symbolic references. This is ok in small programs, but doesn't scale well. It also only works on global variables, not lexicals. EOL EOL:data_file###0.11765___line###0.01471___Indian_file###0.11765___record###0.01471___filing_cabinet###0.11765___single_file###0.11765___hand_tool###0.01471___file###0.11765___files###0.23529___office_furniture###0.01471___file_cabinet###0.11765:how###1.00000:how can###1.00000:ps_t###0.052___pid###0.046___stat###0.039___eol###0.034___command###0.030___sample###0.027___unpack###0.023___pack###0.023___time###0.021___input###0.021___using###0.018___fixed-format###0.017___fixed-record-length###0.017___home/tchrist/scripts/now-what###0.017___promoted###0.017___break_up###0.017___taking###0.017___we've###0.017___put_back###0.017___berkeley-style###0.017___scalar###0.017___line###0.016___eolwe've###0.015___scale###0.015___chunk###0.015___forbidden###0.015___slower###0.014___lexicals###0.013___in_a_way###0.013___manipulate###0.013___together###0.013___refs###0.013___print###0.012___eolhere###0.012___symbolic###0.012___again###0.012___a_few###0.012___substr###0.012___efficient###0.011___global###0.011___strict###0.011___small###0.010___normal###0.010___eolprint###0.010___faster###0.010___references###0.010___in_this###0.010___reference###0.010___output###0.009___case###0.009___works###0.009___variables###0.009___that_is###0.009___strings###0.009___eolfor###0.009___lines###0.009___programs###0.008___files###0.008___used###0.008___variable###0.008___open###0.007___doesn't###0.006___string###0.006___code###0.006___perl###0.003___
145:146###0.32,135###0.28,142###0.27,210###0.25,143###0.22,150###0.21,141###0.20,177###0.20,163###0.19,205###0.17:How can I make a filehandle local to a subroutine? How do I pass filehandles between subroutines? How do I make an array of filehandles?  EOL EOL:The fastest, simplest, and most direct way is to localize the typeglob of the filehandle in question!: EOL EOL    local *TmpHandle;  EOL EOLTypeglobs are fast (especially compared with the alternatives) and reasonably easy to use, but they also have one subtle drawback. If you had, for example, a function named TmpHandle(), or a variable named %TmpHandle, you just hid it from yourself. EOL EOL    sub findme { EOL        local *HostFile; EOLopen(HostFile, "</etc/hosts") or die "no /etc/hosts!: $!!"; EOLlocal $_;# <- VERY IMPORTANT EOL        while (<HostFile>) { EOL    print if /\b127\.(0\.0\.)?1\b/; EOL} EOL# *HostFile automatically closes/disappears here EOL    }  EOL EOLHere's how to use typeglobs in a loop to open and store a bunch of filehandles. We'll use as values of the hash an ordered pair to make it easy to sort the hash in insertion order. EOL EOL    @names = qw(motd termcap passwd hosts); EOL    my $i = 0; EOL    foreach $filename (@names) { EOLlocal *FH; EOLopen(FH, "/etc/$filename") || die "$filename!: $!!"; EOL        $file{$filename} = [ $i++, *FH ]; EOL    } EOL EOL    # Using the filehandles in the array EOL    foreach $name (sort { $file{$a}[0] <=> $file{$b}[0] } keys %file) { EOL        my $fh = $file{$name}[1]; EOL        my $line = <$fh>; EOL        print "$name $. $line"; EOL    }  EOL EOLFor passing filehandles to functions, the easiest way is to preface them with a star, as in func(*STDIN). See perlfaq7/"Passing Filehandles" for details. EOL EOLIf you want to create many anonymous handles, you should check out the Symbol, FileHandle, or IO!:!:Handle (etc.) modules. Here's the equivalent code with Symbol!:!:gensym, which is reasonably light-weight!: EOL EOL    foreach $filename (@names) { EOLuse Symbol; EOLmy $fh = gensym(); EOLopen($fh, "/etc/$filename") || die "open /etc/$filename!: $!!"; EOL        $file{$filename} = [ $i++, $fh ]; EOL    }  EOL EOLHere's using the semi-object-oriented FileHandle module, which certainly isn't light-weight!: EOL EOL    use FileHandle; EOL EOL    foreach $filename (@names) { EOL        my $fh = FileHandle->new("/etc/$filename") or die "$filename!: $!!"; EOL        $file{$filename} = [ $i++, $fh ]; EOL    }  EOL EOLPlease understand that whether the filehandle happens to be a (probably localized) typeglob or an anonymous handle from one of the modules in no way affects the bizarre rules for managing indirect handles. See the next question. EOL EOL:software_system###0.01471___routine###0.11765___proceeding###0.01471___subroutine###0.23529___social_gathering###0.01471___public_presentation###0.01471___software_package###0.01471___package###0.01471___procedure###0.11765___social_affair###0.01471___subprogram###0.11765___process###0.01471___utility###0.01471___social_event###0.01471___proceedings###0.01471___relation###0.01471___activity###0.01471___work###0.01471___software###0.01471___mathematical_relation###0.01471___function###0.11765___duty###0.01471___performance###0.01471___legal_proceeding###0.01471___usefulness###0.01471:how###1.00000:how do###0.66667___how can###0.33333:filename###0.061___eol###0.035___filehandles###0.031___hostfile###0.029___filehandle###0.029___tmphandle###0.022___etc###0.022___names###0.021___file###0.018___foreach###0.018___symbol###0.015___eolopen###0.015___etc/hosts###0.014___light-weight###0.014___gensym###0.014___die###0.013___reasonably###0.013___typeglob###0.012___name###0.011___local###0.011___handles###0.011___named###0.011___passing###0.010___anonymous###0.010___eollocal###0.010___sort###0.010___easy###0.009___eolhere's###0.008___handle###0.008___insertion###0.007___preface###0.007___perlfaq7###0.007___closes/disappears###0.007___hosts###0.007___semi-object-oriented###0.007___alternatives###0.007___motd###0.007___termcap###0.007___bunch###0.007___drawback###0.007___eoltypeglobs###0.007___findme###0.007___in_no_way###0.007___b127###0.007___hid###0.007___star###0.007___array###0.007___line###0.006___hash###0.006___localize###0.006___localized###0.006___eolplease###0.006___managing###0.006___bizarre###0.006___in_question###0.006___rules###0.006___subtle###0.006___pair###0.006___ordered###0.006___modules###0.006___open###0.006___func###0.006___typeglobs###0.006___compared###0.006___passwd###0.006___fast###0.006___fastest###0.006___indirect###0.006___affects###0.006___understand###0.005___important###0.005___print###0.005___we'll###0.005___happens###0.005___loop###0.005___direct###0.005___easiest###0.005___pass###0.005___eoluse###0.005___store###0.005___make_it###0.005___order###0.005___simplest###0.005___certainly###0.005___using###0.005___subroutines###0.004___next###0.004___automatically###0.004___especially###0.004___equivalent###0.004___etc.###0.004___one###0.004___check_out###0.004___subroutine###0.004___yourself###0.004___eolmy###0.004___stdin###0.004___question###0.003___keys###0.003___create###0.003___eolfor###0.003___here's###0.003___details###0.003___functions###0.003___values###0.003___isn't###0.003___variable###0.003___whether###0.003___for_example###0.003___sub###0.003___probably###0.003___new###0.002___function###0.002___code###0.002___eolif###0.002___module###0.002___
146:145###0.32,210###0.23,177###0.23,198###0.21,100###0.19,162###0.18,134###0.18,51###0.18,183###0.18,168###0.18:How can I use a filehandle indirectly?  EOL EOL:An indirect filehandle is using something other than a symbol in a place that a filehandle is expected. Here are ways to get indirect filehandles!: EOL EOL    $fh =   SOME_FH;       # bareword is strict-subs hostile EOL    $fh =  "SOME_FH";      # strict-refs hostile; same package only EOL    $fh =  *SOME_FH;       # typeglob EOL    $fh = \*SOME_FH;       # ref to typeglob (bless-able) EOL    $fh =  *SOME_FH{IO};   # blessed IO!:!:Handle from *SOME_FH typeglob  EOL EOLOr, you can use the new method from the FileHandle or IO modules to create an anonymous filehandle, store that in a scalar variable, and use it as though it were a normal filehandle. EOL EOL    use FileHandle; EOL    $fh = FileHandle->new(); EOL EOL    use IO!:!:Handle;                     # 5.004 or higher EOL    $fh = IO!:!:Handle->new();  EOL EOLThen use any of those as you would a normal filehandle. Anywhere that Perl is expecting a filehandle, an indirect filehandle may be used instead. An indirect filehandle is just a scalar variable that contains a filehandle. Functions like print, open, seek, or the <FH> diamond operator will accept either a read filehandle or a scalar variable containing one!: EOL EOL    ($ifh, $ofh, $efh) = (*STDIN, *STDOUT, *STDERR); EOL    print $ofh "Type it!: "; EOL    $got = <$ifh> EOL    print $efh "What was that!: $got";  EOL EOLIf you're passing a filehandle to a function, you can write the function in two ways!: EOL EOL    sub accept_fh { EOL        my $fh = shift; EOL        print $fh "Sending to indirect filehandle\n"; EOL    }  EOL EOLOr it can localize a typeglob and use the filehandle directly!: EOL EOL    sub accept_fh { EOL        local *FH = shift; EOL        print  FH "Sending to localized filehandle\n"; EOL    }  EOL EOLBoth styles work with either objects or typeglobs of real filehandles. (They might also work with strings under some circumstances, but this is risky.) EOL EOL    accept_fh(*STDOUT); EOL    accept_fh($handle);  EOL EOLIn the examples above, we assigned the filehandle to a scalar variable before using it. That is because only simple scalar variables, not expressions or subscripts of hashes or arrays, can be used with built-ins like print, printf, or the diamond operator. Using something other than a simple scalar varaible as a filehandle is illegal and won't even compile!: EOL EOL    @fd = (*STDIN, *STDOUT, *STDERR); EOL    print $fd[1] "Type it!: ";                           # WRONG EOL    $got = <$fd[0]>                                     # WRONG EOL    print $fd[2] "What was that!: $got";                 # WRONG  EOL EOLWith print and printf, you get around this by using a block and an expression where you would place the filehandle!: EOL EOL    print  { $fd[1] } "funny stuff\n"; EOL    printf { $fd[1] } "Pity the poor %x.\n", 3_735_928_559; EOL    # Pity the poor deadbeef.  EOL EOLThat block is a proper block like any other, so you can put more complicated code there. This sends the message out to one of two places!: EOL EOL    $ok = -x "/bin/cat";                EOL    print { $ok ? $fd[1] !: $fd[2] } "cat stat $ok\n"; EOL    print { $fd[ 1+ ($ok || 0) ]  } "cat stat $ok\n";             EOL EOLThis approach of treating print and printf like object methods calls doesn't work for the diamond operator. That's because it's a real operator, not just a function with a comma-less argument. Assuming you've been storing typeglobs in your structure as we did above, you can use the built-in function named readline to reads a record just as <> does. Given the initialization shown above for @fd, this would work, but only because readline() require a typeglob. It doesn't work with objects or strings, which might be a bug we haven't fixed yet. EOL EOL    $got = readline($fd[0]);  EOL EOLLet it be noted that the flakiness of indirect filehandles is not related to whether they're strings, typeglobs, objects, or anything else. It's the syntax of the fundamental operators. Playing the object game doesn't help you at all here. EOL EOL::how###1.00000:how can###1.00000:filehandle###0.059___eol###0.031___some_fh###0.029___indirect###0.024___print###0.023___typeglob###0.020___accept_fh###0.019___diamond###0.014___scalar###0.014___printf###0.013___readline###0.012___typeglobs###0.012___operator###0.011___handle###0.011___objects###0.011___work###0.011___filehandles###0.010___efh###0.009___pity###0.009___hostile###0.009___poor###0.009___ofh###0.009___ifh###0.009___stdout###0.009___variable###0.009___block###0.009___wrong###0.008___other_than###0.008___above###0.008___strings###0.007___sending###0.007___function###0.007___you_would###0.007___stat###0.007___stderr###0.006___cat###0.006___using###0.006___object###0.006___real###0.006___normal###0.006___type###0.006___place###0.005___new###0.005___doesn't###0.005___shift###0.005___stdin###0.005___simple###0.004___either###0.004___treating###0.004___game###0.004___varaible###0.004___illegal###0.004___built-ins###0.004___bless-able###0.004___indirectly###0.004___flakiness###0.004___places###0.004___initialization###0.004___eollet###0.004___fundamental###0.004___bin/cat###0.004___comma-less###0.004___noted###0.004___in_two_ways###0.004___risky###0.004___strict-refs###0.004___strict-subs###0.004___styles###0.004___subscripts###0.004___eolor###0.004___used###0.004___localized###0.004___deadbeef###0.004___localize###0.004___expected###0.004___bareword###0.004___higher###0.004___funny###0.004___blessed###0.004___something###0.004___sub###0.004___as_though###0.004___eolboth###0.004___circumstances###0.004___playing###0.004___storing###0.004___expecting###0.004___assigned###0.004___built-in###0.004___complicated###0.003___eolwith###0.003___sends###0.003___shown###0.003___get_around###0.003___anywhere###0.003___structure###0.003___syntax###0.003___related_to###0.003___just_as###0.003___out_to###0.003___containing###0.003___haven't###0.003___it's###0.003___eolthen###0.003___at_all###0.003___named###0.003___accept###0.003___reads###0.003___symbol###0.003___passing###0.003___operators###0.003___eolthat###0.003___ref###0.003___they're###0.003___store###0.003___fixed###0.003___anonymous###0.003___seek###0.003___record###0.003___stuff###0.003___methods###0.003___assuming###0.003___message###0.003___one###0.003___argument###0.003___anything###0.003___directly###0.003___you've###0.003___proper###0.003___compile###0.003___bug###0.003___ways###0.002___calls###0.002___expressions###0.002___hashes###0.002___examples###0.002___require###0.002___method###0.002___help###0.002___expression###0.002___contains###0.002___given###0.002___arrays###0.002___variables###0.002___package###0.002___that_is###0.002___won't###0.002___that's###0.002___create###0.002___eolin###0.002___local###0.002___instead###0.002___approach###0.002___is_not###0.002___functions###0.002___even###0.002___whether###0.002___two###0.002___eolthis###0.002___modules###0.002___write###0.002___open###0.002___read###0.002___may###0.001___code###0.001___you're###0.001___eolif###0.001___perl###0.001___
147:148###0.18,13###0.10,183###0.08,165###0.07,217###0.07,41###0.07,205###0.07,215###0.07,101###0.07,51###0.06:How can I set up a footer format to be used with write()?  EOL EOL:There's no builtin way to do this, but perlform has a couple of techniques to make it possible for the intrepid hacker. EOL EOL:footer###0.23529___pedestrian###0.11765___four-minute_man###0.01471___traveller###0.01471___notation###0.01471___author###0.01471___note###0.01471___traveler###0.01471___walker###0.11765___annotation###0.01471___frame###0.01471___framing###0.01471___framework###0.01471___format###0.23529___shoe###0.01471___footnote###0.11765___writer###0.01471:how###1.00000:how can###1.00000:a_couple_of###0.090___set_up###0.090___intrepid###0.090___footer###0.090___hacker###0.080___perlform###0.080___techniques###0.070___builtin###0.067___make_it###0.062___possible###0.053___format###0.053___there's###0.050___used###0.042___eol###0.039___write###0.039___
148:147###0.18,183###0.14,95###0.13,92###0.12,274###0.11,134###0.11,99###0.11,210###0.10,130###0.10,205###0.10:How can I write() into a string?  EOL EOL:See perlform/"Accessing Formatting Internals" for an swrite() function. EOL EOL:pattern###0.01163___twine###0.09302___shore###0.01163___ligament###0.01163___business_organization###0.01163___cord###0.01163___line###0.01163___linear_unit###0.01163___series###0.01163___shape###0.01163___train###0.09302___string###0.18605___unit###0.01163___constraint###0.01163___geological_formation###0.01163___form###0.01163___piece_of_material###0.01163___trammel###0.01163___business_organisation###0.01163___bond###0.01163___consequence###0.01163___business###0.01163___piece_of_cloth###0.01163___aftermath###0.01163___chain###0.09302___hamper###0.01163___fibre###0.01163___wheelwork###0.01163___biochemist###0.01163___public_transport###0.01163___business_concern###0.01163___strand###0.09302___building_block###0.01163___concern###0.01163___shackle###0.01163___procession###0.01163___restraint###0.01163___fiber###0.01163___formation###0.01163___geology###0.01163___street###0.01163___trammels###0.01163___necklace###0.01163:how###1.00000:how can###1.00000:swrite###0.165___perlform###0.147___internals###0.147___formatting###0.137___accessing###0.129___eol###0.072___write###0.072___string###0.064___function###0.062___
149:163###0.30,229###0.27,87###0.27,196###0.23,210###0.23,51###0.23,183###0.22,205###0.21,101###0.21,134###0.20:How can I output my numbers with commas added?  EOL EOL:This one will do it for you!: EOL EOL    sub commify { EOLlocal $_  = shift; EOL1 while s/^([-+]?\d+)(\d{3})/$1,$2/; EOLreturn $_; EOL    } EOL EOL    $n = 23659019423.2331; EOL    print "GOT!: ", commify($n), "\n"; EOL EOL    GOT!: 23,659,019,423.2331  EOL EOLYou can't just!: EOL EOL    s/^([-+]?\d+)(\d{3})/$1,$2/g;  EOL EOLbecause you have to put the comma in and then recalculate your position. EOL EOLAlternatively, this code commifies all numbers in a line regardless of whether they have decimal portions, are preceded by + or -, or whatever!: EOL EOL    # from Andrew Johnson <ajohnson@gpu.srv.ualberta.ca> EOL    sub commify { EOL       my $input = shift; EOL        $input = reverse $input; EOL        $input =~ s<(\d\d\d)(?=\d)(?!!\d*\.)><$1,>g; EOL        return scalar reverse $input; EOL    }  EOL EOL:numbers###0.22535___income###0.01408___assemblage###0.01408___end_product###0.11268___attending###0.01408___production###0.01408___attendance###0.01408___output###0.22535___outturn###0.11268___turnout###0.11268___yield###0.11268___product###0.01408___gathering###0.01408:how###1.00000:how can###1.00000:commify###0.087___input###0.086___eol###0.078___reverse###0.043___numbers###0.037___shift###0.032___eolbecause###0.029___commifies###0.029___recalculate###0.029___andrew_johnson###0.029___commas###0.025___preceded###0.025___portions###0.025___sub###0.025___eol1###0.024___regardless_of###0.024___comma###0.022___position###0.022___added###0.022___eolalternatively###0.022___they_have###0.022___decimal###0.021___eollocal###0.020___whatever###0.018___eolreturn###0.018___do_it###0.017___and_then###0.017___output###0.016___eolyou###0.015___scalar###0.014___return###0.013___whether###0.013___line###0.013___you_have###0.012___can't###0.011___code###0.010___print###0.010___one###0.009___
150:152###0.28,171###0.27,153###0.23,145###0.21,165###0.17,183###0.17,205###0.16,101###0.16,142###0.16,266###0.16:How can I translate tildes (~) in a filename?  EOL EOL:Use the <> (glob()) operator, documented in perlfunc. Older versions of Perl require that you have a shell installed that groks tildes. Recent perl versions have this feature built in. The Glob!:!:KGlob module (available from CPAN) gives more portable glob functionality. EOL EOLWithin Perl, you may use this directly!: EOL EOL$filename =~ s{ EOL  ^ ~             # find a leading tilde EOL  (               # save this in $1 EOL      [^/]        # a non-slash character EOL            *     # repeated 0 or more times (0 means me) EOL  ) EOL}{ EOL  $1 EOL      ? (getpwnam($1))[7] EOL      !: ( $ENV{HOME} || $ENV{LOGDIR} ) EOL}ex;  EOL EOL:diacritical_mark###0.03846___tildes###0.61538___tilde###0.30769___diacritic###0.03846:name###0.50000___how###0.50000:how can###1.00000:glob###0.061___tildes###0.056___eol###0.052___env###0.042___filename###0.039___versions###0.033___groks###0.028___translate###0.028___tilde###0.028___logdir###0.028___non-slash###0.028___eolwithin###0.028___getpwnam###0.025___kglob###0.025___older###0.023___repeated###0.022___home###0.022___functionality###0.021___feature###0.021___save###0.020___in.###0.020___leading###0.020___recent###0.020___built###0.019___gives###0.018___directly###0.017___installed###0.017___perl###0.017___portable###0.017___perlfunc###0.016___operator###0.016___require###0.016___times###0.016___character###0.016___means###0.015___shell###0.015___documented###0.014___find###0.013___available###0.012___you_have###0.012___may###0.010___cpan###0.009___module###0.008___
151:265###0.40,143###0.30,157###0.29,141###0.28,163###0.27,142###0.22,154###0.21,158###0.19,177###0.19,169###0.17:How come when I open a file read-write it wipes it out?  EOL EOL:Because you're using something like this, which truncates the file and then gives you read-write access!: EOL EOL    open(FH, "+> /path/name");# WRONG (almost always)  EOL EOLWhoops. You should instead use this, which will fail if the file doesn't exist. EOL EOL    open(FH, "+< /path/name");  # open for update  EOL EOLUsing ">" always clobbers or creates. Using "<" never does either. The "+" doesn't change this. EOL EOLHere are examples of many kinds of file opens. Those using sysopen() all assume EOL EOL    use Fcntl;  EOL EOLTo open file for reading!: EOL EOL    open(FH, "< $path")                                 || die $!!; EOL    sysopen(FH, $path, O_RDONLY)                        || die $!!;  EOL EOLTo open file for writing, create new file if needed or else truncate old file!: EOL EOL    open(FH, "> $path") || die $!!; EOL    sysopen(FH, $path, O_WRONLY|O_TRUNC|O_CREAT)        || die $!!; EOL    sysopen(FH, $path, O_WRONLY|O_TRUNC|O_CREAT, 0666)  || die $!!;  EOL EOLTo open file for writing, create new file, file must not exist!: EOL EOL    sysopen(FH, $path, O_WRONLY|O_EXCL|O_CREAT)         || die $!!; EOL    sysopen(FH, $path, O_WRONLY|O_EXCL|O_CREAT, 0666)   || die $!!;  EOL EOLTo open file for appending, create if necessary!: EOL EOL    open(FH, ">> $path") || die $!!; EOL    sysopen(FH, $path, O_WRONLY|O_APPEND|O_CREAT)       || die $!!; EOL    sysopen(FH, $path, O_WRONLY|O_APPEND|O_CREAT, 0666) || die $!!;  EOL EOLTo open file for appending, file must exist!: EOL EOL    sysopen(FH, $path, O_WRONLY|O_APPEND)               || die $!!;  EOL EOLTo open file for update, file must exist!: EOL EOL    open(FH, "+< $path")                                || die $!!; EOL    sysopen(FH, $path, O_RDWR)                          || die $!!;  EOL EOLTo open file for update, create file if necessary!: EOL EOL    sysopen(FH, $path, O_RDWR|O_CREAT)                  || die $!!; EOL    sysopen(FH, $path, O_RDWR|O_CREAT, 0666)            || die $!!;  EOL EOLTo open file for update, file must not exist!: EOL EOL    sysopen(FH, $path, O_RDWR|O_EXCL|O_CREAT)           || die $!!; EOL    sysopen(FH, $path, O_RDWR|O_EXCL|O_CREAT, 0666)     || die $!!;  EOL EOLTo open a file without blocking, creating if necessary!: EOL EOL    sysopen(FH, "/tmp/somefile", O_WRONLY|O_NDELAY|O_CREAT) EOL    or die "can't open /tmp/somefile!: $!!"!:  EOL EOLBe warned that neither creation nor deletion of files is guaranteed to be an atomic operation over NFS. That is, two processes might both successfully create or unlink the same file!! Therefore O_EXCL isn't as exclusive as you might wish. EOL EOLSee also the new perlopentut if you have it (new for 5.6). EOL EOL:rub###0.22857___wipes###0.45714___obstacle###0.02857___contact###0.02857___wipe###0.22857___obstruction###0.02857:when###0.50000___how###0.50000:how come when###0.50000___when i###0.50000:path###0.076___sysopen###0.067___die###0.053___o_creat###0.052___file###0.052___open###0.050___o_wronly###0.039___eol###0.037___eolto###0.032___o_excl###0.027___exist###0.027___o_rdwr###0.026___o_append###0.020___update###0.019___create###0.017___necessary###0.016___path/name###0.013___read-write###0.013___must_not###0.013___tmp/somefile###0.011___o_trunc###0.011___appending###0.011___new###0.010___writing###0.007___always###0.007___using###0.006___wipes###0.006___exclusive###0.006___clobbers###0.006___o_rdonly###0.006___eolwhoops###0.006___deletion###0.005___eolusing###0.005___successfully###0.005___truncates###0.005___atomic###0.005___how_come###0.005___creates###0.005___fail###0.005___opens###0.005___o_ndelay###0.005___creation###0.005___unlink###0.005___guaranteed###0.005___eolbe###0.005___warned###0.005___kinds###0.005___nfs###0.005___processes###0.005___truncate###0.005___doesn't###0.005___perlopentut###0.004___therefore###0.004___blocking###0.004___assume###0.004___eolhere###0.004___creating###0.004___needed###0.004___or_else###0.004___fcntl###0.004___neither###0.004___gives###0.004___wish###0.004___almost###0.004___operation###0.004___and_then###0.003___reading###0.003___access###0.003___examples###0.003___eolsee###0.003___wrong###0.003___that_is###0.003___change###0.003___instead###0.003___without###0.003___either###0.003___files###0.003___isn't###0.003___two###0.003___something###0.002___you_have###0.002___can't###0.002___you're###0.002___
152:171###0.38,150###0.28,153###0.26,102###0.10,284###0.08,203###0.08,146###0.08,114###0.08,198###0.07,70###0.07:Why do I sometimes get an "Argument list too long" when I use <*>?   EOL EOL:The <> operator performs a globbing operation (see above). In Perl versions earlier than v5.6.0, the internal glob() operator forks csh(1) to do the actual glob expansion, but csh can't handle more than 127 items and so gives the error message Argument list too long. People who installed tcsh as csh won't have this problem, but their users may be surprised by it. EOL EOLTo get around this, either upgrade to Perl v5.6.0 or later, do the glob yourself with readdir() and patterns, or use a module like Glob!:!:KGlob, one that doesn't use the shell to do globbing. EOL EOL:motility###0.00552___public_speaking###0.00552___independent_variable###0.04420___contestation###0.04420___assertion###0.00552___position###0.00552___struggle###0.00552___tilt###0.04420___speechmaking###0.00552___commercial_instrument###0.00552___controversy###0.04420___partiality###0.00552___human_activity###0.00552___disposition###0.00552___melodic_theme###0.00552___contention###0.04420___lurch###0.00552___variable_quantity###0.00552___code###0.00552___partisanship###0.00552___debate###0.04420___move###0.00552___motion###0.00552___spatial_relation###0.00552___human_action###0.00552___message###0.00552___statement###0.04420___group_action###0.00552___musical_theme###0.00552___argument###0.08840___asseveration###0.00552___substance###0.00552___variable###0.00552___tendency###0.00552___theme###0.00552___idea###0.00552___inclination###0.04420___pitch###0.00552___list###0.08840___lean###0.04420___act###0.00552___mental_attitude###0.00552___movement###0.00552___pitching###0.00552___leaning###0.04420___conflict###0.00552___difference###0.00552___discussion###0.00552___difference_of_opinion###0.00552___computer_code###0.00552___evidence###0.00552___dispute###0.00552___give-and-take###0.00552___attitude###0.00552___commercial_document###0.00552___word###0.00552___averment###0.00552___battle###0.00552___speaking###0.00552___arguing###0.04420___speech_act###0.00552___oral_presentation###0.00552___subject_matter###0.00552___liking###0.00552___content###0.00552___disputation###0.04420___angle###0.00552:why###0.50000___when###0.50000:when i###0.50000___why do###0.50000:glob###0.072___csh###0.067___globbing###0.041___long###0.035___argument###0.032___operator###0.029___readdir###0.025___forks###0.025___upgrade###0.025___tcsh###0.025___surprised###0.025___list###0.022___expansion###0.022___performs###0.022___items###0.022___kglob###0.022___and_so###0.020___actual###0.020___get_around###0.019___patterns###0.018___users###0.018___earlier###0.018___internal###0.017___message###0.016___gives###0.016___installed###0.015___more_than###0.015___operation###0.015___later###0.015___error###0.015___versions###0.015___yourself###0.014___people###0.014___handle###0.014___sometimes###0.014___eolto###0.013___eol###0.013___above###0.013___shell###0.013___won't###0.013___problem###0.013___either###0.012___why###0.011___perl###0.010___can't###0.010___doesn't###0.009___may###0.009___one###0.008___module###0.007___
153:171###0.36,152###0.26,150###0.23,102###0.17,85###0.16,214###0.15,52###0.13,194###0.12,87###0.10,121###0.10:Is there a leak/bug in glob()?  EOL EOL:Due to the current implementation on some operating systems, when you use the glob() function or its angle-bracket alias in a scalar context, you may cause a memory leak and/or unpredictable behavior. It's best therefore to use glob() only in list context. EOL EOL::::glob###0.120___context###0.065___leak/bug###0.055___leak###0.055___angle-bracket###0.055___unpredictable###0.049___alias###0.049___implementation###0.046___due_to###0.043___and/or###0.041___therefore###0.041___cause###0.040___operating###0.040___behavior###0.035___memory###0.034___best###0.030___current###0.029___scalar###0.027___list###0.024___systems###0.024___eol###0.024___it's###0.021___may###0.021___function###0.021___
154:151###0.21,265###0.17,143###0.15,183###0.14,101###0.14,141###0.13,210###0.12,165###0.12,163###0.12,205###0.12:How can I open a file with a leading ">" or trailing blanks?  EOL EOL:Normally perl ignores trailing blanks in filenames, and interprets certain leading characters (or a trailing "|") to mean something special. To avoid this, you might want to use a routine like the one below. It turns incomplete pathnames into explicit relative ones, and tacks a trailing null byte on the name to make perl leave it alone!: EOL EOL    sub safe_filename { EOLlocal $_  = shift; EOL        s#^([^./])#./$1#; EOL        $_ .= "\0"; EOLreturn $_; EOL    } EOL EOL    $badpath = "<<<something really wicked   "; EOL    $fn = safe_filename($badpath"); EOL    open(FH, "> $fn") or "couldn't open $badpath!: $!!";  EOL EOLThis assumes that you are using POSIX (portable operating systems interface) paths. If you are on a closed, non- portable, proprietary system, you may have to adjust the "./" above. EOL EOLIt would be a lot clearer to use sysopen(), though!: EOL EOL    use Fcntl; EOL    $badpath = "<<<something really wicked   "; EOL    sysopen (FH, $badpath, O_WRONLY | O_CREAT | O_TRUNC) EOLor die "can't open $badpath!: $!!";  EOL EOLFor more information, see also the new perlopentut if you have it (new for 5.6). EOL EOL:cartridge###0.01220___grapheme###0.01220___deaf-and-dumb_person###0.01220___crack###0.01220___area###0.01220___abstraction###0.01220___lacuna###0.09756___time_interval###0.01220___expanse###0.01220___mute###0.01220___sheet###0.01220___country###0.01220___simpleton###0.01220___figure###0.01220___blanks###0.19512___amorphous_shape###0.01220___deaf-mute###0.01220___space###0.09756___panel###0.01220___type###0.01220___gap###0.01220___simple###0.01220___flat_solid###0.01220___interval###0.01220___location###0.01220___surface_area###0.01220___graphic_symbol###0.01220___dummy###0.09756___character###0.01220___blank###0.09756___blank_shell###0.09756___euphemism###0.01220:how###1.00000:how can###1.00000:badpath###0.086___trailing###0.057___eol###0.031___safe_filename###0.028___wicked###0.028___open###0.024___blanks###0.022___leading###0.020___sysopen###0.019___something###0.019___portable###0.017___you_are###0.015___tacks###0.014___incomplete###0.014___ignores###0.014___clearer###0.014___pathnames###0.014___really###0.013___interprets###0.012___alone###0.012___explicit###0.012___null###0.012___routine###0.012___o_trunc###0.012___eolit###0.011___turns###0.011___closed###0.011___relative###0.011___adjust###0.011___new###0.011___paths###0.011___see_also###0.011___non###0.011___filenames###0.011___leave###0.010___o_wronly###0.010___perlopentut###0.010___o_creat###0.010___proprietary###0.010___certain###0.010___operating###0.010___eollocal###0.010___fcntl###0.010___normally###0.010___couldn't###0.010___interface###0.009___assumes###0.009___below###0.009___special###0.009___byte###0.009___eolreturn###0.009___ones###0.009___though###0.008___a_lot###0.008___avoid###0.008___mean###0.008___posix###0.008___shift###0.008___above###0.007___name###0.007___eolfor###0.007___characters###0.007___information###0.007___eolor###0.006___die###0.006___systems###0.006___eolthis###0.006___sub###0.006___you_have###0.006___perl###0.005___can't###0.005___system###0.005___may###0.005___file###0.005___using###0.004___one###0.004___
155:141###0.31,172###0.16,163###0.14,143###0.13,177###0.13,160###0.12,142###0.12,178###0.12,214###0.12,157###0.11:How can I reliably rename a file?  EOL EOL:Well, usually you just use Perl's rename() function. That may not work everywhere, though, particularly when renaming files across file systems. Some sub-Unix systems have broken ports that corrupt the semantics of rename()--for example, WinNT does this right, but Win95 and Win98 are broken. (The last two parts are not surprising, but the first is. !:-) EOL EOLIf your operating system supports a proper mv(1) program or its moral equivalent, this works!: EOL EOL    rename($old, $new) or system("mv", $old, $new);  EOL EOLIt may be more compelling to use the File!:!:Copy module instead. You just copy to the new file to the new name (checking return values), then delete the old one. This isn't really the same semantically as a real rename(), though, which preserves metainformation like permissions, timestamps, inode info, etc. EOL EOLNewer versions of File!:!:Copy exports a move() function. EOL EOL::name###0.50000___how###0.50000:how can###1.00000:rename###0.077___copy###0.036___file###0.031___broken###0.031___new###0.027___though###0.020___exports###0.017___compelling###0.017___sub-unix###0.017___everywhere###0.017___moral###0.017___metainformation###0.017___preserves###0.017___semantically###0.017___renaming###0.017___inode###0.017___corrupt###0.017___timestamps###0.017___win95###0.017___win98###0.017___winnt###0.017___eol###0.017___systems###0.015___move###0.015___eolnewer###0.015___info###0.015___surprising###0.015___eolit###0.014___reliably###0.014___function###0.013___ports###0.013___permissions###0.013___across###0.013___parts###0.012___semantics###0.012___checking###0.012___particularly###0.011___delete###0.011___are_not###0.011___equivalent###0.011___etc.###0.011___operating_system###0.011___proper###0.010___real###0.010___may_not###0.010___versions###0.010___right###0.010___supports###0.009___usually###0.009___last###0.009___works###0.009___name###0.009___perl's###0.009___instead###0.009___files###0.008___values###0.008___isn't###0.008___return###0.008___really###0.008___two###0.007___work###0.007___for_example###0.007___first###0.007___system###0.006___may###0.006___program###0.006___eolif###0.005___one###0.005___module###0.005___
156:157###0.19,158###0.17,141###0.11,163###0.10,171###0.09,143###0.09,244###0.09,266###0.09,125###0.09,23###0.08:How can I lock a file?  EOL EOL:Perl's builtin flock() function (see perlfunc for details) will call flock(2) if that exists, fcntl(2) if it doesn't (on perl version 5.004 and later), and lockf(3) if neither of the two previous system calls exists. On some systems, it may even use a different form of native locking. Here are some gotchas with Perl's flock()!: EOL EOLProduces a fatal error if none of the three system calls (or their close equivalent) exists. EOLlockf(3) does not provide shared locking, and requires that the filehandle be open for writing (or appending, or read/writing). EOL EOLSome versions of flock() can't lock files over a network (e.g. on NFS file systems), so you'd need to force the use of fcntl(2) when you build Perl. But even this is dubious at best. See the flock entry of perlfunc and the INSTALL file in the source distribution for information on building Perl to do this. EOL EOLTwo potentially non-obvious but traditional flock semantics are that it waits indefinitely until the lock is granted, and that its locks are merely advisory. Such discretionary locks are more flexible, but offer fewer guarantees. This means that files locked with flock() may be modified by programs that do not also use flock(). Cars that stop for red lights get on well with each other, but not with cars that don't stop for red lights. See the perlport manpage, your port's specific documentation, or your system-specific local manpages for details. It's best to assume traditional behavior if you're writing portable programs. (If you're not, you should as always feel perfectly free to write for your own system's idiosyncrasies (sometimes called "features"). Slavish adherence to portability concerns shouldn't get in the way of your getting your job done.) EOL EOLFor more information on file locking, see also perlopentut/"File Locking" if you have it (new for 5.6). EOL EOL::how###1.00000:how can###1.00000:flock###0.052___locking###0.024___lock###0.022___exists###0.017___cars###0.016___lights###0.016___locks###0.014___traditional###0.013___red###0.013___stop###0.012___file###0.011___fcntl###0.011___writing###0.009___calls###0.009___perlfunc###0.009___perl's###0.008___lockf###0.008___non-obvious###0.008___get_on###0.008___advisory###0.008___perlport###0.008___concerns###0.008___port's###0.008___read/writing###0.008___indefinitely###0.008___slavish###0.008___system-specific###0.008___eollockf###0.008___eoltwo###0.008___waits###0.008___discretionary###0.008___each_other###0.008___granted###0.008___eolproduces###0.008___adherence###0.008___get_in###0.008___locked###0.008___information###0.008___programs###0.008___details###0.008___files###0.008___even###0.008___systems###0.007___perfectly###0.007___dubious###0.007___idiosyncrasies###0.007___feel###0.007___fewer###0.007___appending###0.007___manpage###0.007___manpages###0.007___at_best###0.007___eol###0.007___native###0.006___network###0.006___flexible###0.006___job###0.006___offer###0.006___gotchas###0.006___guarantees###0.006___fatal###0.006___nfs###0.006___system###0.006___none###0.006___features###0.006___modified###0.006___potentially###0.006___system's###0.006___see_also###0.006___may###0.006___builtin###0.006___entry###0.006___portability###0.006___perlopentut###0.006___building###0.006___shared###0.006___force###0.006___requires###0.006___you're###0.006___e.g.###0.005___eolsome###0.005___build###0.005___getting###0.005___previous###0.005___specific###0.005___semantics###0.005___assume###0.005___three###0.005___file_in###0.005___free###0.005___until###0.005___merely###0.005___equivalent###0.005___you'd###0.005___neither###0.005___behavior###0.005___do_not###0.005___shouldn't###0.005___perl###0.005___portable###0.005___provide###0.005___install###0.005___later###0.005___documentation###0.004___form###0.004___versions###0.004___error###0.004___does_not###0.004___sometimes###0.004___done###0.004___filehandle###0.004___close###0.004___best###0.004___means###0.004___own###0.004___source###0.004___called###0.004___always###0.004___eolfor###0.004___call###0.004___local###0.004___different###0.004___version###0.004___two###0.003___write###0.003___distribution###0.003___you_have###0.003___open###0.003___need###0.003___can't###0.003___new###0.003___doesn't###0.003___it's###0.003___don't###0.003___function###0.003___
157:151###0.29,163###0.22,141###0.20,156###0.19,177###0.17,142###0.17,143###0.16,160###0.15,265###0.15,172###0.11:Why can't I just open(FH, ">file.lock")?  EOL EOL:A common bit of code NOT TO USE is this!: EOL EOL    sleep(3) while -e "file.lock";# PLEASE DO NOT USE EOL    open(LCK, "> file.lock");# THIS BROKEN CODE  EOL EOLThis is a classic race condition!: you take two steps to do something which must be done in one. That's why computer hardware provides an atomic test-and-set instruction. In theory, this "ought" to work!: EOL EOL    sysopen(FH, "file.lock", O_WRONLY|O_EXCL|O_CREAT) EOLor die "can't open  file.lock!: $!!"!:  EOL EOLexcept that lamentably, file creation (and deletion) is not atomic over NFS, so this won't work (at least, not every time) over the net. Various schemes involving link() have been suggested, but these tend to involve busy-wait, which is also subdesirable. EOL EOL::why###1.00000:why can't###1.00000:lock###0.088___file###0.042___atomic###0.035___open###0.025___eol###0.023___lamentably###0.019___lck###0.019___busy-wait###0.019___race###0.019___subdesirable###0.019___instruction###0.019___test-and-set###0.019___computer_hardware###0.019___work###0.017___schemes###0.017___deletion###0.017___ought###0.017___eolexcept###0.017___involve###0.017___classic###0.017___broken###0.017___involving###0.017___tend###0.017___why###0.017___nfs###0.016___o_excl###0.016___creation###0.016___condition###0.016___can't###0.015___steps###0.015___suggested###0.015___in_theory###0.015___o_wronly###0.014___link###0.014___sleep###0.014___code###0.014___various###0.014___o_creat###0.014___common###0.013___please###0.013___sysopen###0.013___at_least###0.013___every###0.012___do_not###0.012___net###0.012___bit###0.012___provides###0.011___done###0.011___that's###0.010___won't###0.010___is_not###0.009___eolor###0.009___two###0.009___die###0.008___eolthis###0.008___something###0.008___time###0.008___one###0.006___
158:141###0.21,151###0.19,156###0.17,169###0.15,142###0.14,143###0.14,265###0.13,163###0.13,92###0.11,183###0.10:I still don't get locking. I just want to increment the number in the file. How can I do this?  EOL EOL:Didn't anyone ever tell you web-page hit counters were useless? They don't count number of hits, they're a waste of time, and they serve only to stroke the writer's vanity. It's better to pick a random number; they're more realistic. EOL EOLAnyway, this is what you can do if you can't help yourself. EOL EOL    use Fcntl qw(!:DEFAULT !:flock); EOL    sysopen(FH, "numfile", O_RDWR|O_CREAT)  or die "can't open numfile!: $!!"; EOL    flock(FH, LOCK_EX)  or die "can't flock numfile!: $!!"; EOL    $num = <FH> || 0; EOL    seek(FH, 0, 0)  or die "can't rewind numfile!: $!!"; EOL    truncate(FH, 0)  or die "can't truncate numfile!: $!!"; EOL    (print FH $num+1, "\n") or die "can't write numfile!: $!!"; EOL    close FH  or die "can't close numfile!: $!!";  EOL EOLHere's a much better web-page hit counter!: EOL EOL    $hits = int( (time() - 850_000_000) / rand(1_000) );  EOL EOLIf the count doesn't impress your friends, then the code might. !:-) EOL EOL::how###1.00000:how can###1.00000:numfile###0.109___can't###0.044___die###0.042___flock###0.036___hits###0.031___web-page###0.031___eol###0.030___hit###0.027___truncate###0.024___they're###0.021___number###0.021___count###0.019___better###0.017___close###0.017___lock_ex###0.015___num+1###0.015___realistic###0.015___rewind###0.015___serve###0.015___counters###0.015___stroke###0.015___eolanyway###0.015___useless###0.015___vanity###0.015___waste_of_time###0.015___writer's###0.015___impress###0.015___friends###0.015___increment###0.015___anyone###0.012___num###0.012___counter###0.012___pick###0.012___o_rdwr###0.012___don't###0.012___locking###0.011___rand###0.011___o_creat###0.011___ever###0.011___didn't###0.011___default###0.010___fcntl###0.010___seek###0.010___random###0.010___int###0.010___sysopen###0.010___tell###0.010___yourself###0.009___eolhere's###0.008___help###0.008___write###0.006___open###0.006___time###0.006___doesn't###0.006___it's###0.006___code###0.005___print###0.005___file###0.005___eolif###0.005___
159:198###0.15,141###0.15,175###0.13,183###0.12,131###0.12,163###0.12,151###0.11,168###0.11,205###0.11,101###0.11:How do I randomly update a binary file?  EOL EOL:If you're just trying to patch a binary, in many cases something as simple as this works!: EOL EOL    perl -i -pe 's{window manager}{window mangler}g' /usr/bin/emacs  EOL EOLHowever, if you have fixed sized records, then you might do something more like this!: EOL EOL    $RECSIZE = 220; # size of record, in bytes EOL    $recno   = 37;  # which record to update EOL    open(FH, "+<somewhere") || die "can't update somewhere!: $!!"; EOL    seek(FH, $recno * $RECSIZE, 0); EOL    read(FH, $record, $RECSIZE) == $RECSIZE || die "can't read record $recno!: $!!"; EOL    # munge the record EOL    seek(FH, -$RECSIZE, 1); EOL    print FH $record; EOL    close FH;  EOL EOLLocking and error checking are left as an exercise for the reader. Don't forget them or you'll be quite sorry. EOL EOL:star###0.02000___double_star###0.16000___binary###0.32000___filing_cabinet###0.16000___file###0.32000___office_furniture###0.02000:how###1.00000:how do###1.00000:recsize###0.102___record###0.085___recno###0.061___update###0.044___window###0.041___eol###0.040___somewhere###0.034___seek###0.028___eollocking###0.020___mangler###0.020___munge###0.020___sized###0.020___usr/bin/emacs###0.020___binary_file###0.020___die###0.018___randomly###0.018___sorry###0.018___patch###0.018___something###0.018___read###0.016___can't###0.016___manager###0.016___records###0.016___size###0.015___forget###0.015___reader###0.014___trying###0.014___fixed###0.014___exercise###0.014___checking###0.014___quite###0.013___bytes###0.013___eolhowever###0.013___left###0.012___binary###0.012___error###0.012___close###0.011___works###0.011___cases###0.011___simple###0.010___you'll###0.009___you_have###0.008___open###0.008___don't###0.007___you're###0.007___print###0.007___perl###0.004___
160:163###0.24,141###0.23,177###0.19,144###0.18,142###0.18,143###0.18,161###0.18,135###0.16,200###0.16,80###0.15:How do I get a file's timestamp in perl?  EOL EOL:If you want to retrieve the time at which the file was last read, written, or had its meta-data (owner, etc) changed, you use the -M, -A, or -C filetest operations as documented in perlfunc. These retrieve the age of the file (measured against the start-time of your program) in days as a floating point number. To retrieve the "raw" time in seconds since the epoch, you would call the stat function, then use localtime(), gmtime(), or POSIX!:!:strftime() to convert this into human-readable form. EOL EOLHere's an example!: EOL EOL    $write_secs = (stat($file))[9]; EOL    printf "file %s updated at %s\n", $file, EOLscalar localtime($write_secs);  EOL EOLIf you prefer something more legible, use the File!:!:stat module (part of the standard distribution in version 5.004 and later)!: EOL EOL    # error checking left as an exercise for reader. EOL    use File!:!:stat; EOL    use Time!:!:localtime; EOL    $date_string = ctime(stat($file)->mtime); EOL    print "file $file updated at $date_string\n";  EOL EOLThe POSIX!:!:strftime() approach has the benefit of being, in theory, independent of the current locale. See perllocale for details. EOL EOL::how###1.00000:how do###1.00000:stat###0.056___file###0.053___retrieve###0.037___localtime###0.032___date_string###0.030___write_secs###0.030___updated###0.026___strftime###0.026___eol###0.026___time###0.018___posix###0.016___legible###0.015___start-time###0.015___meta-data###0.015___human-readable###0.015___owner###0.015___eolscalar###0.015___ctime###0.015___floating###0.015___measured###0.015___filetest###0.015___gmtime###0.013___independent###0.013___mtime###0.013___benefit###0.012___age###0.012___changed###0.012___file's###0.012___timestamp###0.012___in_theory###0.011___seconds###0.011___raw###0.011___days###0.011___etc###0.011___epoch###0.011___locale###0.011___you_would###0.011___reader###0.010___point###0.010___perllocale###0.010___convert###0.010___against###0.010___printf###0.010___exercise###0.010___checking###0.010___operations###0.010___prefer###0.009___left###0.009___later###0.009___error###0.008___form###0.008___perlfunc###0.008___eolhere's###0.008___last###0.008___call###0.007___current###0.007___approach###0.007___written###0.007___documented###0.007___version###0.007___details###0.007___example###0.007___number###0.006___part###0.006___something###0.006___distribution###0.006___standard###0.006___read###0.006___eolthe###0.006___function###0.005___print###0.005___program###0.005___eolif###0.005___module###0.004___perl###0.003___
161:58###0.21,160###0.18,168###0.12,205###0.10,183###0.10,141###0.10,210###0.10,101###0.10,81###0.09,165###0.09:How do I set a file's timestamp in perl?  EOL EOL:You use the utime() function documented in perlfunc/utime. By way of example, here's a little program that copies the read and write times from its first argument to all the rest of them. EOL EOL    if (@ARGV < 2) { EOLdie "usage!: cptimes timestamp_file other_files ...\n"; EOL    } EOL    $timestamp = shift; EOL    ($atime, $mtime) = (stat($timestamp))[8,9]; EOL    utime $atime, $mtime, @ARGV;  EOL EOLError checking is, as usual, left as an exercise for the reader. EOL EOLNote that utime() currently doesn't work correctly with Win95/NT ports. A bug has been reported. Check it carefully before using utime() on those platforms. EOL EOL::how###1.00000:how do###1.00000:utime###0.083___timestamp###0.058___atime###0.046___mtime###0.041___argv###0.038___eol###0.030___timestamp_file###0.023___perlfunc/utime###0.023___other_files###0.023___by_way_of###0.023___cptimes###0.023___as_usual###0.023___reported###0.020___win95/nt###0.020___usage###0.020___eolerror###0.019___file's###0.019___carefully###0.019___eoldie###0.018___copies###0.018___ports###0.017___stat###0.017___rest###0.017___a_little###0.016___reader###0.016___platforms###0.016___exercise###0.016___checking###0.016___correctly###0.015___argument###0.014___left###0.014___currently###0.014___bug###0.014___all_the###0.014___eolnote###0.013___times###0.013___shift###0.013___check###0.012___here's###0.011___set###0.011___documented###0.011___example###0.011___work###0.010___first###0.010___write###0.010___read###0.009___doesn't###0.009___function###0.008___program###0.008___using###0.008___perl###0.004___
162:248###0.22,176###0.22,146###0.18,259###0.17,151###0.15,210###0.14,141###0.14,145###0.14,58###0.13,177###0.13:How do I print to more than one file at once?  EOL EOL:If you only have to do this once, you can do this!: EOL EOL    for $fh (FH1, FH2, FH3) { print $fh "whatever\n" }  EOL EOLTo connect up to one filehandle to several output filehandles, it's easiest to use the tee(1) program if you have it, and let it take care of the multiplexing!: EOL EOL    open (FH, "| tee file1 file2 file3");  EOL EOLOr even!: EOL EOL    # make STDOUT go to three files, plus original STDOUT EOL    open (STDOUT, "| tee file1 file2 file3") or die "Teeing off!: $!!\n"; EOL    print "whatever\n"                       or die "Writing!: $!!\n"; EOL    close(STDOUT)                            or die "Closing!: $!!\n";  EOL EOLOtherwise you'll have to write your own multiplexing print function--or your own tee program--or use Tom Christiansen's, at http!://www.perl.com/CPAN/authors/id/TOMC/scripts/tct.gz , which is written in Perl and offers much greater functionality than the stock version. EOL EOL::how###1.00000:how do###1.00000:tee###0.076___stdout###0.048___multiplexing###0.038___file3###0.038___file1###0.034___file2###0.034___eol###0.033___print###0.027___die###0.025___whatever###0.024___own###0.021___stock###0.019___fh1###0.019___fh2###0.019___fh3###0.019___http!://www.perl.com/cpan/authors/id/tomc/scripts/tct.gz###0.019___greater###0.019___teeing###0.019___christiansen's###0.017___take_care###0.017___eolotherwise###0.017___open###0.016___closing###0.015___go_to###0.015___offers###0.015___connect###0.015___up_to###0.014___functionality###0.014___plus###0.014___tom###0.013___at_once###0.013___filehandles###0.013___program###0.013___three###0.013___easiest###0.013___original###0.012___one###0.012___once###0.011___more_than###0.011___writing###0.011___filehandle###0.010___output###0.010___close###0.010___eolto###0.010___several###0.010___written###0.009___files###0.009___version###0.009___even###0.009___eolor###0.009___you'll###0.009___write###0.008___you_have###0.008___it's###0.007___function###0.007___file###0.006___perl###0.003___
163:141###0.39,142###0.35,177###0.32,149###0.30,151###0.27,196###0.27,214###0.25,160###0.24,143###0.22,157###0.22:How can I read in an entire file all at once?  EOL EOL:The customary Perl approach for processing all the lines in a file is to do so one line at a time!: EOL EOL    open (INPUT, $file) || die "can't open $file!: $!!"; EOL    while (<INPUT>) { EOLchomp; EOL# do something with $_ EOL    } EOL    close(INPUT)    || die "can't close $file!: $!!";  EOL EOLThis is tremendously more efficient than reading the entire file into memory as an array of lines and then processing it one element at a time, which is often--if not almost always--the wrong approach. Whenever you see someone do this!: EOL EOL    @lines = <INPUT>;  EOL EOLyou should think long and hard about why you need everything loaded at once. It's just not a scalable solution. You might also find it more fun to use the standard DB_File module's $DB_RECNO bindings, which allow you to tie an array to a file so that accessing an element the array actually accesses the corresponding line in the file. EOL EOLOn very rare occasion, you may have an algorithm that demands that the entire file be in memory at once as one scalar. The simplest solution to that is EOL EOL    $var = `cat $file`;  EOL EOLBeing in scalar context, you get the whole thing. In list context, you'd get a list of all the lines!: EOL EOL    @lines = `cat $file`;  EOL EOLThis tiny but expedient solution is neat, clean, and portable to all systems on which decent tools have been installed. For those who prefer not to use the toolbox, you can of course read the file manually, although this makes for more complicated code. EOL EOL    { EOLlocal(*INPUT, $/); EOLopen (INPUT, $file) || die "can't open $file!: $!!"; EOL$var = <INPUT>; EOL    }  EOL EOLThat temporarily undefs your record separator, and will automatically close the file at block exit. If the file is already open, just use this!: EOL EOL    $var = do { local $/; <INPUT> };  EOL EOL::how###1.00000:how can###1.00000:file###0.056___input###0.046___eol###0.029___lines###0.025___entire###0.021___open###0.016___close###0.016___at_a_time###0.016___solution###0.016___array###0.014___at_once###0.014___processing###0.014___cat###0.013___die###0.013___memory###0.012___all_the###0.011___can't###0.011___context###0.011___element###0.011___approach###0.009___tiny###0.009___occasion###0.009___eolbeing###0.009___whenever###0.009___demands###0.009___undefs###0.009___neat###0.009___scalable###0.009___customary###0.009___all_at_once###0.009___scalar###0.009___one###0.009___line###0.008___list###0.008___separator###0.008___accesses###0.008___loaded###0.008___db_recno###0.008___decent###0.008___expedient###0.008___manually###0.008___toolbox###0.008___tremendously###0.008___module's###0.008___eolchomp###0.008___whole_thing###0.008___eolthis###0.008___rare###0.008___fun###0.008___to_that###0.008___tools###0.008___bindings###0.008___read###0.008___temporarily###0.007___complicated###0.007___if_not###0.007___corresponding###0.007___clean###0.007___accessing###0.007___tie###0.007___think###0.007___db_file###0.007___someone###0.007___eolon###0.007___eolopen###0.007___simplest###0.006___allow###0.006___long###0.006___everything###0.006___eolthat###0.006___eollocal###0.006___record###0.006___automatically###0.006___algorithm###0.006___efficient###0.006___almost###0.006___you'd###0.006___of_course###0.006___prefer###0.006___hard###0.006___installed###0.006___although###0.006___so_that###0.006___block###0.005___exit###0.005___actually###0.005___portable###0.005___and_then###0.005___reading###0.005___already###0.005___wrong###0.005___often###0.005___makes###0.005___always###0.005___eolyou###0.005___local###0.005___find###0.004___systems###0.004___something###0.004___why###0.004___standard###0.004___need###0.003___it's###0.003___may###0.003___code###0.003___perl###0.002___
164:89###0.20,223###0.17,175###0.14,183###0.10,177###0.08,35###0.08,141###0.08,163###0.07,93###0.07,107###0.06:How can I read in a file by paragraphs?  EOL EOL:Use the $/ variable (see perlvar for details). You can either set it to "" to eliminate empty paragraphs ("abc\n\n\n\ndef", for instance, gets treated as two paragraphs and not three), or "\n\n" to accept empty paragraphs. EOL EOLNote that a blank line must have no blanks in it. Thus "fred\n \nstuff\n\n" is one paragraph, but "fred\n\nstuff\n\n" is two. EOL EOL:paragraphs###0.59259___written_material###0.03704___writing###0.03704___piece_of_writing###0.03704___paragraph###0.29630:how###1.00000:how can###1.00000:paragraphs###0.135___nstuff###0.081___fred###0.067___empty###0.061___abc###0.040___ndef###0.040___two###0.037___eliminate###0.036___blank###0.033___treated###0.033___thus###0.032___for_instance###0.032___blanks###0.032___accept###0.030___paragraph###0.029___three###0.028___perlvar###0.027___gets###0.026___eolnote###0.024___eol###0.022___either###0.020___set###0.020___details###0.020___variable###0.018___line###0.018___read###0.016___file###0.014___one###0.013___
165:228###0.69,229###0.37,226###0.35,232###0.33,183###0.26,205###0.22,259###0.22,210###0.21,51###0.21,124###0.21:How can I read a single character from a file? From the keyboard?   EOL EOL:You can use the builtin getc() function for most filehandles, but it won't (easily) work on a terminal device. For STDIN, either use the Term!:!:ReadKey module from CPAN or use the sample code in perlfunc/getc. EOL EOLIf your system supports the portable operating system programming interface (POSIX), you can use the following code, which you'll note turns off echo processing as well. EOL EOL    #!!/usr/bin/perl -w EOL    use strict; EOL    $| = 1; EOL    for (1..4) { EOLmy $got; EOLprint "gimme!: "; EOL$got = getone(); EOLprint "--> $got\n"; EOL    } EOL    exit; EOL EOL    BEGIN { EOLuse POSIX qw(!:termios_h); EOL EOLmy ($term, $oterm, $echo, $noecho, $fd_stdin); EOL EOL$fd_stdin = fileno(STDIN); EOL EOL$term     = POSIX!:!:Termios->new(); EOL$term->getattr($fd_stdin); EOL$oterm     = $term->getlflag(); EOL EOL$echo     = ECHO | ECHOK | ICANON; EOL$noecho   = $oterm & ~$echo; EOL EOLsub cbreak { EOL    $term->setlflag($noecho); EOL    $term->setcc(VTIME, 1); EOL    $term->setattr($fd_stdin, TCSANOW); EOL} EOL EOLsub cooked { EOL    $term->setlflag($oterm); EOL    $term->setcc(VTIME, 0); EOL    $term->setattr($fd_stdin, TCSANOW); EOL} EOL EOLsub getone { EOL    my $key = ''; EOL    cbreak(); EOL    sysread(STDIN, $key, 1); EOL    cooked(); EOL    return $key; EOL} EOL EOL    } EOL EOL    END { cooked() }  EOL EOLThe Term!:!:ReadKey module from CPAN may be easier to use. Recent versions include also support for non-portable systems as well. EOL EOL    use Term!:!:ReadKey; EOL    open(TTY, "</dev/tty"); EOL    print "Gimme a char!: "; EOL    ReadMode "raw"; EOL    $key = ReadKey 0, *TTY; EOL    ReadMode "normal"; EOL    printf "\nYou said %s, char number %03d\n", EOL        $key, ord $key;  EOL EOLFor legacy DOS systems, Dan Carson <dbc@tc.fluke.COM> reports the following!: EOL EOLTo put the PC in "raw" mode, use ioctl with some magic numbers gleaned from msdos.c (Perl source file) and Ralf Brown's interrupt list (comes across the net every so often)!: EOL EOL    $old_ioctl = ioctl(STDIN,0,0);     # Gets device info EOL    $old_ioctl &= 0xff; EOL    ioctl(STDIN,1,$old_ioctl | 32);    # Writes it back, setting bit 5  EOL EOLThen to read a single character!: EOL EOL    sysread(STDIN,$c,1);               # Read a single character  EOL EOLAnd to put the PC back to "cooked" mode!: EOL EOL    ioctl(STDIN,1,$old_ioctl);         # Sets it back to cooked mode.  EOL EOLSo now you have $c. If ord($c) == 0, you have a two byte code, which means you hit a special key. Read another byte with sysread(STDIN,$c,1), and that value tells you what combination it was according to this table!: EOL EOL    # PC 2-byte keycodes = ^@ + the following!: EOL EOL    # HEX     KEYS EOL    # ---     ---- EOL    # 0F      SHF TAB EOL    # 10-19   ALT QWERTYUIOP EOL    # 1E-26   ALT ASDFGHJKL EOL    # 2C-32   ALT ZXCVBNM EOL    # 3B-44   F1-F10 EOL    # 47-49   HOME,UP,PgUp EOL    # 4B      LEFT EOL    # 4D      RIGHT EOL    # 4F-53   END,DOWN,PgDn,Ins,Del EOL    # 54-5D   SHF F1-F10 EOL    # 5E-67   CTR F1-F10 EOL    # 68-71   ALT F1-F10 EOL    # 73-77   CTR LEFT,RIGHT,END,PgDn,HOME EOL    # 78-83   ALT 1234567890-= EOL    # 84      CTR PgUp  EOL EOLThis is all trial and error I did a long time ago; I hope I'm reading the file that worked... EOL EOL:textile###0.00392___recommendation###0.00392___happening###0.00392___stuff###0.00392___grapheme###0.03137___appearance###0.00392___property###0.00392___reference###0.03137___proceeding###0.00392___cover###0.00392___quality###0.03137___grownup###0.00392___occurrence###0.00392___fabric###0.00392___testimonial###0.00392___line###0.00392___printed_symbol###0.00392___action###0.00392___try###0.00392___trait###0.00392___symbol###0.00392___construct###0.00392___statement###0.00392___melody###0.00392___sort###0.00392___physical_thing###0.00392___form###0.00392___argument###0.00392___enactment###0.00392___substance###0.00392___bed_linen###0.00392___theatrical_role###0.03137___dimension###0.00392___entity###0.00392___circumstance###0.00392___melodic_line###0.00392___physical_object###0.00392___strain###0.00392___housing###0.00392___anomaly###0.00392___degree###0.00392___part###0.03137___notation###0.00392___lineament###0.03137___social_rank###0.00392___type###0.03137___body_part###0.00392___eccentric###0.03137___container###0.00392___syntactic_category###0.00392___soul###0.00392___note###0.00392___role###0.03137___state_of_mind###0.00392___natural_covering###0.00392___case###0.03137___object###0.00392___personation###0.00392___utility###0.00392___tune###0.00392___attribute###0.00392___melodic_phrase###0.00392___problem###0.00392___human###0.00392___book###0.00392___cloth###0.00392___taxon###0.00392___assets###0.00392___grammatical_category###0.00392___written_symbol###0.00392___annotation###0.00392___frame###0.00392___concept###0.00392___covering###0.00392___remark###0.00392___fact###0.00392___natural_event###0.00392___framing###0.00392___variety###0.00392___framework###0.00392___grade###0.00392___proceedings###0.00392___indicator###0.00392___relation###0.00392___containerful###0.00392___frame_of_mind###0.00392___comment###0.00392___mortal###0.00392___fibre###0.03137___concern###0.00392___somebody###0.00392___someone###0.00392___sound_property###0.00392___activity###0.00392___location###0.00392___unusual_person###0.00392___kind###0.00392___persona###0.03137___graphic_symbol###0.03137___characterization###0.00392___good_word###0.00392___publication###0.00392___block###0.00392___attempt###0.00392___endeavor###0.00392___portrayal###0.00392___fiber###0.03137___character###0.06275___duty###0.00392___social_status###0.00392___individual###0.00392___legal_proceeding###0.00392___usefulness###0.00392___conception###0.00392___adult###0.00392___person###0.00392___rank###0.00392___taxonomic_group###0.00392___visual_aspect###0.00392___social_station###0.00392___meaning###0.00392___material###0.00392___effort###0.00392___air###0.00392___level###0.00392___endeavour###0.00392___keyboard###0.06275:how###1.00000:how can###1.00000:eol###0.047___term###0.037___cooked###0.021___fd_stdin###0.021___stdin###0.021___key###0.020___alt###0.020___old_ioctl###0.019___f1-f10###0.019___echo###0.019___oterm###0.017___ctr###0.014___ioctl###0.014___readkey###0.014___eolsub###0.013___noecho###0.012___sysread###0.010___back###0.009___mode###0.009___gimme###0.009___pgup###0.009___getone###0.009___pgdn###0.009___shf###0.009___single###0.008___tcsanow###0.008___ord###0.008___vtime###0.008___setlflag###0.008___setattr###0.008___setcc###0.008___character###0.008___posix###0.008___cbreak###0.008___read###0.008___raw###0.007___readmode###0.007___home###0.007___device###0.007___char###0.007___following###0.007___tty###0.006___as_well###0.006___byte###0.006___left###0.006___eolprint###0.005___right###0.005___eolmy###0.005___code###0.005___file###0.005___carson###0.004___msdos###0.004___combination###0.004___interrupt###0.004___every_so_often###0.004___long_time###0.004___trial_and_error###0.004___ins###0.004___brown's###0.004___qwertyuiop###0.004___ralf###0.004___del###0.004___writes###0.004___zxcvbnm###0.004___nyou###0.004___keycodes###0.004___gleaned###0.004___asdfghjkl###0.004___dan###0.004___systems###0.004___hit###0.004___termios###0.004___tab###0.004___info###0.004___perlfunc/getc###0.004___keyboard###0.004___echok###0.004___termios_h###0.004___icanon###0.004___getlflag###0.004___non-portable###0.004___getattr###0.004___getc###0.004___you_have###0.004___turns###0.004___magic###0.004___worked###0.004___according_to###0.004___i'm###0.004___legacy###0.004___setting###0.003___sets###0.003___sample###0.003___hex###0.003___eolso###0.003___tells###0.003___eolthen###0.003___down###0.003___builtin###0.003___easily###0.003___fileno###0.003___across###0.003___dos###0.003___terminal###0.003___filehandles###0.003___table###0.003___processing###0.003___usr/bin/perl###0.003___dev/tty###0.003___hope###0.003___recent###0.003___eoluse###0.003___printf###0.003___reports###0.003___work_on###0.003___eoland###0.003___interface###0.003___easier###0.003___cpan###0.003___gets###0.003___special###0.003___net###0.003___operating_system###0.003___numbers###0.003___strict###0.003___module###0.003___normal###0.003___begin###0.003___note###0.003___portable###0.002___bit###0.002___programming###0.002___exit###0.002___comes###0.002___versions###0.002___reading###0.002___supports###0.002___support###0.002___means###0.002___eolto###0.002___won't###0.002___keys###0.002___source###0.002___include###0.002___eolfor###0.002___either###0.002___value###0.002___you'll###0.002___return###0.002___number###0.002___two###0.002___list###0.002___eolthis###0.002___open###0.002___eolthe###0.001___system###0.001___new###0.001___may###0.001___function###0.001___print###0.001___eolif###0.001___perl###0.000___
166:165###0.18,140###0.15,244###0.15,231###0.15,228###0.14,183###0.14,69###0.13,229###0.13,146###0.13,104###0.12:How can I tell whether there's a character waiting on a filehandle?   EOL EOL:The very first thing you should do is look into getting the Term!:!:ReadKey extension from CPAN. As we mentioned earlier, it now even has limited support for non-portable (read!: not open systems, closed, proprietary, not POSIX, not Unix, etc) systems. EOL EOLYou should also check out the Frequently Asked Questions list in comp.unix.* for things like this!: the answer is essentially the same. It's very system dependent. Here's one solution that works on BSD systems!: EOL EOL    sub key_ready { EOLmy($rin, $nfd); EOLvec($rin, fileno(STDIN), 1) = 1; EOLreturn $nfd = select($rin,undef,undef,0); EOL    }  EOL EOLIf you want to find out how many characters are waiting, there's also the FIONREAD ioctl call to be looked at. The h2ph tool that comes with Perl tries to convert C include files to Perl code, which can be required. FIONREAD ends up defined as a function in the sys/ioctl.ph file!: EOL EOL    require 'sys/ioctl.ph'; EOL EOL    $size = pack("L", 0); EOL    ioctl(FH, FIONREAD(), $size)    or die "Couldn't call ioctl!: $!!\n"; EOL    $size = unpack("L", $size);  EOL EOLIf h2ph wasn't installed or doesn't work for you, you can grep the include files by hand!: EOL EOL    % grep FIONREAD /usr/include/*/* EOL    /usr/include/asm/ioctls.h!:#define FIONREAD      0x541B  EOL EOLOr write a small C program using the editor of champions!: EOL EOL    % cat > fionread.c EOL    #include <sys/ioctl.h> EOL    main() { EOL        printf("%#08x\n", FIONREAD); EOL    } EOL    ^D EOL    % cc -o fionread fionread.c EOL    % ./fionread EOL    0x4004667f  EOL EOLAnd then hard-code it, leaving porting as an exercise to your successor. EOL EOL    $FIONREAD = 0x4004667f;         # XXX!: opsys dependent EOL EOL    $size = pack("L", 0); EOL    ioctl(FH, $FIONREAD, $size)     or die "Couldn't call ioctl!: $!!\n"; EOL    $size = unpack("L", $size);  EOL EOLFIONREAD requires a filehandle connected to a stream, meaning that sockets, pipes, and tty devices work, but not files. EOL EOL:textile###0.00418___recommendation###0.00418___happening###0.00418___stuff###0.00418___grapheme###0.03347___appearance###0.00418___property###0.00418___reference###0.03347___proceeding###0.00418___cover###0.00418___quality###0.03347___grownup###0.00418___occurrence###0.00418___fabric###0.00418___testimonial###0.00418___line###0.00418___printed_symbol###0.00418___action###0.00418___try###0.00418___trait###0.00418___symbol###0.00418___construct###0.00418___statement###0.00418___melody###0.00418___sort###0.00418___physical_thing###0.00418___form###0.00418___argument###0.00418___enactment###0.00418___substance###0.00418___bed_linen###0.00418___theatrical_role###0.03347___dimension###0.00418___entity###0.00418___circumstance###0.00418___melodic_line###0.00418___physical_object###0.00418___strain###0.00418___housing###0.00418___anomaly###0.00418___degree###0.00418___part###0.03347___notation###0.00418___lineament###0.03347___social_rank###0.00418___type###0.03347___body_part###0.00418___eccentric###0.03347___container###0.00418___syntactic_category###0.00418___soul###0.00418___note###0.00418___role###0.03347___state_of_mind###0.00418___natural_covering###0.00418___case###0.03347___object###0.00418___personation###0.00418___utility###0.00418___tune###0.00418___attribute###0.00418___melodic_phrase###0.00418___problem###0.00418___human###0.00418___book###0.00418___cloth###0.00418___taxon###0.00418___assets###0.00418___grammatical_category###0.00418___written_symbol###0.00418___annotation###0.00418___frame###0.00418___concept###0.00418___covering###0.00418___remark###0.00418___fact###0.00418___natural_event###0.00418___framing###0.00418___variety###0.00418___framework###0.00418___grade###0.00418___proceedings###0.00418___indicator###0.00418___relation###0.00418___containerful###0.00418___frame_of_mind###0.00418___comment###0.00418___mortal###0.00418___fibre###0.03347___concern###0.00418___somebody###0.00418___someone###0.00418___sound_property###0.00418___activity###0.00418___location###0.00418___unusual_person###0.00418___kind###0.00418___persona###0.03347___graphic_symbol###0.03347___characterization###0.00418___good_word###0.00418___publication###0.00418___block###0.00418___attempt###0.00418___endeavor###0.00418___portrayal###0.00418___fiber###0.03347___character###0.06695___duty###0.00418___social_status###0.00418___individual###0.00418___legal_proceeding###0.00418___usefulness###0.00418___conception###0.00418___adult###0.00418___person###0.00418___rank###0.00418___taxonomic_group###0.00418___visual_aspect###0.00418___social_station###0.00418___meaning###0.00418___material###0.00418___effort###0.00418___air###0.00418___level###0.00418___endeavour###0.00418:how###1.00000:how can###1.00000:fionread###0.098___size###0.049___eol###0.033___ioctl###0.029___rin###0.024___nfd###0.016___dependent###0.014___h2ph###0.013___include###0.013___call###0.012___waiting###0.012___grep###0.012___files###0.012___couldn't###0.011___unpack###0.011___systems###0.011___pack###0.010___filehandle###0.009___there's###0.009___undef###0.008___unix###0.008___usr/include/asm/ioctls###0.008___porting###0.008___champions###0.008___sys/ioctl.ph###0.008___sys/ioctl###0.008___successor###0.008___eolfionread###0.008___opsys###0.008___key_ready###0.008___work###0.007___die###0.007___usr/include###0.007___xxx###0.007___leaving###0.007___define###0.007___non-portable###0.007___pipes###0.007___essentially###0.007___eolvec###0.007___hard-code###0.007___asked###0.007___required###0.007___connected###0.006___closed###0.006___looked###0.006___mentioned###0.006___editor###0.006___limited###0.006___by_hand###0.006___stream###0.006___bsd###0.006___sockets###0.006___tool###0.006___wasn't###0.006___frequently###0.006___comp.###0.006___tries###0.006___c_program###0.006___ends###0.006___requires###0.006___look_into###0.006___etc###0.006___devices###0.006___meaning###0.006___fileno###0.006___earlier###0.005___proprietary###0.005___readkey###0.005___convert###0.005___getting###0.005___cat###0.005___tty###0.005___exercise###0.005___printf###0.005___eolif###0.005___questions###0.005___main###0.005___find_out###0.005___eoland###0.005___select###0.005___extension###0.005___check_out###0.005___tell###0.005___eolreturn###0.005___installed###0.005___small###0.005___comes###0.005___term###0.004___thing###0.004___eolmy###0.004___answer###0.004___character###0.004___require###0.004___posix###0.004___support###0.004___stdin###0.004___works###0.004___solution###0.004___defined###0.004___eolyou###0.004___characters###0.004___here's###0.004___things###0.004___even###0.003___eolor###0.003___whether###0.003___list###0.003___sub###0.003___first###0.003___write###0.003___open###0.003___read###0.003___perl###0.003___system###0.003___doesn't###0.003___it's###0.003___function###0.003___code###0.003___file###0.002___using###0.002___cpan###0.002___one###0.002___
167:252###0.21,141###0.16,143###0.12,177###0.12,146###0.12,205###0.12,198###0.11,163###0.11,108###0.11,183###0.11:How do I do a tail -f in perl?  EOL EOL:First try EOL EOL    seek(GWFILE, 0, 1);  EOL EOLThe statement seek(GWFILE, 0, 1) doesn't change the current position, but it does clear the end-of-file condition on the handle, so that the next <GWFILE> makes Perl try again to read something. EOL EOLIf that doesn't work (it relies on features of your stdio implementation), then you need something more like this!: EOL EOLfor (;;) { EOL  for ($curpos = tell(GWFILE); <GWFILE>; $curpos = tell(GWFILE)) { EOL    # search for some stuff and put it into files EOL  } EOL  # sleep for a while EOL  seek(GWFILE, $curpos, 0);  # seek to where we had been EOL}  EOL EOLIf this still doesn't work, look into the POSIX module. POSIX defines the clearerr() method, which can remove the end of file condition on a filehandle. The method!: read until end of file, clearerr(), read some more. Lather, rinse, repeat. EOL EOLThere's also a File!:!:Tail module from CPAN. EOL EOL:bout###0.00226___shadower###0.01810___tooshie###0.01810___depression###0.00226___round###0.00226___nonworker###0.00226___arse###0.01810___end###0.00226___supposal###0.00226___refuge###0.00226___back###0.00226___time_period###0.00226___fundament###0.01810___coitus###0.00226___butt###0.01810___rear_end###0.01810___fool###0.00226___cue###0.00226___middle###0.00226___orientation###0.00226___fag_end###0.01810___shadiness###0.00226___faeces###0.00226___piece_of_leather###0.00226___sexual_relation###0.00226___side###0.00226___equid###0.00226___f###0.03620___article_of_furniture###0.00226___hind_end###0.01810___victim###0.00226___shadowiness###0.00226___orifice###0.00226___equine###0.00226___barrel###0.00226___supposition###0.00226___seat###0.01810___carnal_knowledge###0.00226___cargo_ship###0.00226___heart###0.00226___piece_of_furniture###0.00226___posterior###0.01810___shadow###0.01810___muggins###0.00226___chemical_element###0.00226___simpleton###0.00226___session###0.00226___british_capacity_unit###0.00226___cloth_covering###0.00226___nates###0.01810___unpleasant_person###0.00226___illusion###0.00226___tail###0.03620___premonition###0.00226___recourse###0.00226___fecal_matter###0.00226___sexual_congress###0.00226___element###0.00226___foreboding###0.00226___centre###0.00226___space###0.00226___copulation###0.00226___shade###0.00226___oddment###0.00226___intercourse###0.00226___ordure###0.00226___avoirdupois_unit###0.00226___part###0.00226___play###0.00226___semblance###0.00226___body_part###0.00226___time_unit###0.00226___faecal_matter###0.00226___stool###0.00226___container###0.00226___simple_fraction###0.00226___city_district###0.00226___soul###0.00226___academic_session###0.00226___imperial_capacity_unit###0.00226___feces###0.00226___smoke###0.00226___sex_act###0.00226___cask###0.00226___period_of_time###0.00226___tooth###0.00226___tomfool###0.00226___quarter###0.01810___remainder###0.00226___unit_of_time###0.00226___fiddler###0.00226___porta###0.00226___academic_term###0.00226___dupe###0.00226___human###0.00226___coin###0.00226___presentiment###0.00226___center###0.00226___opening###0.00226___face###0.00226___gas###0.00226___portion###0.00226___simple###0.00226___assumption###0.00226___boding###0.00226___prat###0.01810___derriere###0.01810___land###0.00226___scrap###0.00226___ass###0.01810___roll_of_tobacco###0.00226___resort###0.00226___joint###0.00226___coition###0.00226___relation###0.00226___empennage###0.01810___containerful###0.00226___violinist###0.00226___region###0.00226___stock###0.00226___mortal###0.00226___remnant###0.00226___buns###0.01810___soil###0.00226___saphead###0.00226___atomic_number_9###0.01810___room###0.00226___fanny###0.01810___dejection###0.00226___disagreeable_person###0.00226___common_fraction###0.00226___bm###0.00226___somebody###0.00226___someone###0.00226___sexual_intercourse###0.00226___clew###0.00226___sporting_goods###0.00226___rump###0.01810___stern###0.01810___after_part###0.01810___plumbing_fixture###0.00226___buoy###0.00226___sports_equipment###0.00226___clue###0.00226___backside###0.01810___school_term###0.00226___eye###0.00226___floater###0.00226___ground###0.00226___behind###0.01810___inside_information###0.00226___can###0.01810___period_of_play###0.00226___ending###0.00226___hindquarters###0.01810___turn###0.00226___support###0.00226___keister###0.01810___follower###0.00226___natural_depression###0.00226___rear###0.00226___congress###0.00226___individual###0.00226___tush###0.01810___playing_period###0.00226___cut_of_beef###0.00226___vagrant###0.00226___sap###0.00226___halogen###0.00226___person###0.00226___spy###0.00226___drifter###0.00226___bottom###0.01810___bum###0.01810___poop###0.01810___buttocks###0.01810___scene###0.00226___period###0.00226___cargo_vessel###0.00226___furniture###0.00226___details###0.00226:how###1.00000:how do###1.00000:gwfile###0.127___curpos###0.054___seek###0.050___eol###0.033___tail###0.032___clearerr###0.032___condition###0.030___tell###0.023___read###0.022___doesn't###0.021___posix###0.020___method###0.020___file###0.019___end-of-file###0.018___lather###0.018___rinse###0.018___repeat###0.018___for_a_while###0.018___try###0.017___work###0.016___defines###0.016___something###0.015___eolthere's###0.015___relies###0.015___implementation###0.015___features###0.014___stdio###0.014___position###0.014___look_into###0.013___sleep###0.013___again###0.013___clear###0.013___search###0.012___eolif###0.012___next###0.012___stuff###0.012___statement###0.012___until###0.012___remove###0.011___module###0.011___so_that###0.011___filehandle###0.010___handle###0.010___makes###0.009___change###0.009___current###0.009___eolfor###0.009___files###0.008___first###0.007___perl###0.007___need###0.007___eolthe###0.007___cpan###0.006___
168:169###0.30,248###0.20,146###0.18,165###0.17,141###0.16,151###0.15,198###0.15,210###0.14,183###0.14,196###0.14:How do I dup() a filehandle in Perl?  EOL EOL:If you check perlfunc/open, you'll see that several of the ways to call open() should do the trick. For example!: EOL EOL    open(LOG, ">>/tmp/logfile"); EOL    open(STDERR, ">&LOG");  EOL EOLOr even with a literal numeric descriptor!: EOL EOL   $fd = $ENV{MHCONTEXTFD}; EOL   open(MHCONTEXT, "<&=$fd");# like fdopen(3S)  EOL EOLNote that "<&STDIN" makes a copy, but "<&=STDIN" make an alias. That means if you close an aliased handle, all aliases become inaccessible. This is not true with a copied one. EOL EOLError checking, as always, has been left as an exercise for the reader. EOL EOL::how###1.00000:how do###1.00000:open###0.047___log###0.044___eol###0.039___stdin###0.031___tmp/logfile###0.028___inaccessible###0.028___perlfunc/open###0.028___literal###0.028___mhcontextfd###0.028___mhcontext###0.025___fdopen###0.025___alias###0.025___aliased###0.025___aliases###0.025___become###0.023___descriptor###0.023___eolerror###0.023___dup###0.023___copied###0.022___trick###0.021___env###0.021___numeric###0.021___reader###0.020___exercise###0.019___copy###0.019___stderr###0.019___checking###0.019___true###0.017___left###0.017___ways###0.016___eolnote###0.016___filehandle###0.016___handle###0.016___means###0.015___close###0.015___several###0.015___makes###0.015___always###0.015___check###0.015___call###0.014___is_not###0.014___even###0.013___eolor###0.013___you'll###0.013___for_example###0.012___one###0.009___perl###0.005___
169:168###0.30,141###0.22,163###0.19,142###0.18,240###0.18,151###0.17,183###0.16,158###0.15,145###0.14,143###0.14:How do I close a file descriptor by number?  EOL EOL:This should rarely be necessary, as the Perl close() function is to be used for things that Perl opened itself, even if it was a dup of a numeric descriptor as with MHCONTEXT above. But if you really have to, you may be able to do this!: EOL EOL    require 'sys/syscall.ph'; EOL    $rc = syscall(&SYS_close, $fd + 0);  # must force numeric EOL    die "can't sysclose $fd!: $!!" unless $rc == -1;  EOL EOLOr, just use the fdopen(3S) feature of open()!: EOL EOL    { EOLlocal *F; EOLopen F, "<&=$fd" or die "Cannot reopen fd=$fd!: $!!"; EOLclose F; EOL    }  EOL EOL:instrument###0.00588___effect###0.00588___software_system###0.00588___favour###0.00588___personage###0.00588___routine###0.04706___provisions###0.00588___provision###0.00588___unit_of_measurement###0.00588___relative###0.00588___perception###0.00588___legal_document###0.00588___shift###0.00588___bit###0.04706___time###0.00588___rhetorical_device###0.00588___change_of_course###0.00588___maneuver###0.00588___manoeuvre###0.00588___example###0.00588___public_presentation###0.00588___curved_shape###0.00588___official_document###0.00588___shape###0.00588___sum###0.00588___software_package###0.00588___package###0.00588___supplies###0.00588___work_shift###0.00588___motion###0.00588___symbol###0.00588___procedure###0.00588___reflection###0.00588___sum_of_money###0.00588___unit###0.00588___instance###0.00588___cognitive_content###0.00588___stores###0.00588___cutting_implement###0.00588___impression###0.00588___form###0.00588___favor###0.00588___small_indefinite_amount###0.00588___income###0.00588___number###0.09412___mental_object###0.00588___figure###0.04706___whole_number###0.00588___dramatic_work###0.00588___phenomenon###0.00588___illustration###0.00588___decoration###0.00588___stable_gear###0.00588___development###0.00588___important_person###0.00588___supply###0.00588___play###0.00588___amount_of_money###0.00588___ornamentation###0.00588___case###0.00588___rotation###0.00588___physical_structure###0.00588___numeral###0.04706___process###0.00588___change_of_direction###0.00588___fragment###0.00588___act###0.04706___manifestation###0.00588___opening###0.00588___beginning###0.00588___reflexion###0.00588___movement###0.00588___periodical###0.00588___influential_person###0.00588___relation###0.00588___printing###0.00588___walk###0.00588___organic_structure###0.00588___dramatic_composition###0.00588___curve###0.00588___activity###0.00588___legal_instrument###0.00588___reorientation###0.00588___saddlery###0.00588___period_of_play###0.00588___software###0.00588___perceptual_experience###0.00588___turn###0.04706___simulation###0.00588___integer###0.00588___body###0.00588___performance###0.00588___percept###0.00588___playing_period###0.00588___issue###0.04706___duty_period###0.00588___mouthful###0.00588___expression###0.00588___taste###0.00588___supplying###0.00588___amount###0.00588___model###0.00588___tack###0.00588___small_indefinite_quantity###0.00588___content###0.00588___ornament###0.00588:how###1.00000:how do###1.00000:descriptor###0.058___numeric###0.053___eol###0.046___close###0.039___sys_close###0.035___sysclose###0.035___die###0.031___mhcontext###0.031___reopen###0.031___fdopen###0.031___necessary###0.029___dup###0.029___rarely###0.029___opened###0.029___eolclose###0.027___itself###0.026___feature###0.026___able###0.026___syscall###0.026___force###0.026___eolopen###0.025___eollocal###0.024___even_if###0.023___cannot###0.023___unless###0.021___require###0.020___above###0.019___things###0.017___eolor###0.016___used###0.016___really###0.016___number###0.016___open###0.015___perl###0.014___can't###0.014___may###0.013___function###0.013___file###0.012___
170:214###0.13,199###0.11,216###0.10,70###0.09,165###0.08,150###0.08,56###0.08,83###0.07,252###0.07,59###0.07:Why can't I use "C!:\temp\foo" in DOS paths? What doesn't `C!:\temp\foo.exe` work?  EOL EOL:Whoops!! You just put a tab and a formfeed into that filename!! Remember that within double quoted strings ("like\this"), the backslash is an escape character. The full list of these is in perlop/Quote and Quote-like Operators. Unsurprisingly, you don't have a file called "c!:(tab)emp(formfeed)oo" or "c!:(tab)emp(formfeed)oo.exe" on your legacy DOS filesystem. EOL EOLEither single-quote your strings, or (preferably) use forward slashes. Since all DOS and Windows versions since something like MS-DOS 2.0 or so have treated / and \ the same in a path, you might as well use the one that doesn't clash with Perl--or the POSIX shell, ANSI C and C++, awk, Tcl, Java, or Python, just to mention a few. POSIX paths are more portable, too. EOL EOL:layer###0.01351___hundred###0.10811___constant###0.01351___c###0.21622___large_integer###0.01351___speed###0.01351___speed_of_light###0.10811___temp###0.21622___velocity###0.01351___author###0.01351___light_speed###0.10811___precipitation###0.01351___downfall###0.01351___hard_drug###0.01351___writer###0.01351___snow###0.10811:why###0.50000___what###0.50000:why can't###0.50000___what doesn't###0.50000:formfeed###0.055___tab###0.049___dos###0.041___exe###0.037___emp###0.037___temp###0.033___paths###0.029___foo###0.022___posix###0.020___strings###0.019___quote-like###0.018___clash###0.018___perlop/quote###0.018___slashes###0.018___single-quote###0.018___unsurprisingly###0.018___forward###0.016___or_so###0.016___backslash###0.016___preferably###0.016___whoops###0.016___ansi###0.015___legacy###0.015___eoleither###0.015___filesystem###0.015___treated###0.015___mention###0.015___java###0.015___tcl###0.014___python###0.014___doesn't###0.014___full###0.013___escape###0.013___ms-dos###0.013___operators###0.013___quoted###0.013___within###0.013___filename###0.012___a_few###0.012___remember###0.012___awk###0.012___path###0.012___windows###0.012___as_well###0.012___double###0.012___portable###0.011___versions###0.011___character###0.010___eol###0.010___called###0.009___shell###0.009___work###0.008___list###0.008___something###0.008___why###0.008___can't###0.007___don't###0.007___file###0.006___one###0.006___perl###0.003___
171:152###0.38,153###0.36,150###0.27,23###0.11,244###0.11,233###0.10,282###0.09,156###0.09,243###0.08,16###0.08:Why doesn't glob("*.*") get all the files?  EOL EOL:Because even on non-Unix ports, Perl's glob function follows standard Unix globbing semantics. You'll need glob("*") to get all (non-hidden) files. This makes glob() portable even to legacy systems. Your port may include proprietary globbing functions as well. Check its documentation for details. EOL EOL:data_file###0.05405___agglomeration###0.00676___toy###0.00676___line###0.00676___complex_body_part###0.00676___ball_game###0.00676___delivery###0.00676___clump###0.05405___Indian_file###0.05405___clod###0.05405___sphere###0.00676___ballgame###0.00676___lump###0.05405___part###0.00676___plaything###0.00676___anatomical_structure###0.00676___record###0.00676___symptom###0.00676___male_reproductive_gland###0.00676___structure###0.00676___pitch###0.00676___filing_cabinet###0.05405___piece###0.00676___pellet###0.00676___single_file###0.05405___sound###0.00676___ball###0.05405___dance###0.00676___hand_tool###0.00676___file###0.05405___shot###0.00676___files###0.10811___gonad###0.00676___chunk###0.05405___game_equipment###0.00676___glob###0.10811___office_furniture###0.00676___clumsy_person###0.00676___bodily_structure###0.00676___body_structure###0.00676___file_cabinet###0.05405:why###1.00000:why doesn't###1.00000:glob###0.127___globbing###0.073___non-hidden###0.044___files###0.043___even###0.042___legacy###0.036___follows###0.034___non-unix###0.034___ports###0.033___semantics###0.031___proprietary###0.031___as_well###0.029___port###0.029___portable###0.026___all_the###0.026___documentation###0.026___makes###0.023___include###0.023___unix###0.023___check###0.023___perl's###0.023___functions###0.021___details###0.021___you'll###0.020___systems###0.019___eol###0.019___why###0.019___standard###0.018___need###0.018___doesn't###0.017___may###0.016___function###0.016___
172:163###0.18,155###0.16,141###0.16,143###0.15,160###0.14,43###0.13,177###0.13,198###0.12,142###0.12,21###0.12:Why does Perl let me delete read-only files? Why does -i clobber protected files? Isn't this a bug in Perl?  EOL EOL:This is elaborately and painstakingly described in the "Far More Than You Ever Wanted To Know" in http!:// www.perl.com/CPAN/doc/FMTEYEWTK/file-dir-perms . EOL EOLThe executive summary!: learn how your filesystem works. The permissions on a file say what can happen to the data in that file. The permissions on a directory say what can happen to the list of files in that directory. If you delete a file, you're removing its name from the directory (so the operation depends on the permissions of the directory, not of the file). If you try to write to the file, the permissions of the file govern whether you're allowed to. EOL EOL::why###1.00000:why does###1.00000:permissions###0.078___directory###0.061___file###0.056___files###0.038___happen###0.037___in_that###0.036___delete###0.034___say###0.029___painstakingly###0.026___protected###0.026___govern###0.026___elaborately###0.026___executive###0.026___clobber###0.026___read-only###0.023___allowed###0.023___why###0.022___filesystem###0.021___removing###0.021___summary###0.021___you're###0.018___depends###0.018___ever###0.018___www.perl.com###0.017___wanted###0.017___bug###0.015___operation###0.015___described###0.015___more_than###0.015___learn###0.015___http!://###0.015___know###0.014___works###0.014___eol###0.014___name###0.013___data###0.012___try###0.012___isn't###0.012___whether###0.012___list###0.011___write###0.011___perl###0.010___eolthe###0.010___
173:113###0.24,177###0.20,74###0.19,93###0.18,175###0.17,141###0.16,189###0.16,111###0.15,163###0.14,101###0.14:How do I select a random line from a file?  EOL EOL:Here's an algorithm from the Camel Book!: EOL EOL    srand; EOL    rand($.) < 1 && ($line = $_) while <>;  EOL EOLThis has a significant advantage in space over reading the whole file in. A simple proof by induction is available upon request if you doubt the algorithm's correctness. EOL EOL:change_of_location###0.00238___depression###0.00238___playacting###0.00238___boundary###0.00238___paper_currency###0.00238___scope###0.00238___communication###0.00238___homicide###0.00238___communication_channel###0.01900___layer###0.00238___occupation###0.01900___water###0.00238___nutrition###0.00238___origin###0.01900___reasoning###0.00238___job###0.01900___bodily_fluid###0.00238___applications_programme###0.00238___performing###0.00238___time_period###0.00238___angular_shape###0.00238___logical_argument###0.01900___vexation###0.00238___quality###0.00238___course###0.01900___differentiation###0.00238___hereditary_pattern###0.00238___genealogy###0.00238___telecasting###0.00238___hero###0.00238___folding_money###0.00238___disposition###0.00238___acting###0.00238___line###0.03800___linear_unit###0.00238___medium###0.00238___commerce###0.00238___series###0.00238___side###0.00238___victuals###0.00238___angularity###0.00238___pedagogy###0.00238___humour###0.00238___target###0.00238___obligation###0.00238___lineage###0.00238___trench###0.00238___sector###0.00238___seam###0.01900___rounder###0.00238___action###0.00238___move###0.00238___body_of_water###0.00238___motion###0.00238___orbit###0.00238___traveling###0.00238___business_activity###0.00238___melody###0.01900___impression###0.00238___breed###0.00238___unfortunate_person###0.00238___argumentation###0.01900___written_account###0.00238___cable###0.01900___imprint###0.00238___teaching###0.00238___responsibility###0.00238___mercantilism###0.00238___debauchee###0.00238___getting###0.00238___contrast###0.01900___crinkle###0.01900___parentage###0.01900___enterprise###0.00238___tv_station###0.00238___travel###0.00238___compass###0.00238___wind###0.00238___video###0.00238___body_fluid###0.00238___tone###0.00238___direction###0.00238___element###0.00238___music###0.00238___travelling###0.00238___furrow###0.01900___strain###0.00238___comparing###0.00238___execution###0.00238___bounds###0.00238___opposition###0.00238___part###0.00238___point###0.00238___certificate_of_indebtedness###0.00238___demarcation###0.01900___passage###0.00238___slope###0.00238___ambit###0.00238___debt_instrument###0.00238___descent###0.01900___intersection###0.00238___note###0.01900___filiation###0.00238___humor###0.00238___object###0.00238___family_relationship###0.00238___visual_perception###0.00238___application###0.00238___conductor###0.00238___period_of_time###0.00238___beholding###0.00238___aura###0.00238___ancestry###0.01900___headache###0.00238___production###0.00238___tune###0.01900___nutriment###0.00238___business###0.01900___telegram###0.00238___melodic_phrase###0.01900___marketing###0.00238___passageway###0.00238___stratum###0.00238___comparison###0.00238___book###0.00238___reach###0.00238___workplace###0.00238___gas###0.00238___inheritance###0.00238___blood###0.01900___beginning###0.00238___television_station###0.00238___movement###0.00238___crease###0.01900___variety###0.00238___aliment###0.00238___joint###0.00238___education###0.00238___robbery###0.00238___wire###0.00238___educational_activity###0.00238___musical_perception###0.00238___discussion###0.00238___comment###0.00238___murder###0.00238___region###0.00238___stock###0.00238___high_status###0.00238___pedigree###0.01900___incline###0.00238___derivation###0.00238___way###0.00238___nourishment###0.00238___distinction###0.00238___abstract_thought###0.00238___adulthood###0.00238___give-and-take###0.00238___paper_money###0.00238___concern###0.00238___relationship###0.00238___commercial_activity###0.00238___installation###0.00238___instruction###0.00238___commercialism###0.00238___libertine###0.00238___alimentation###0.00238___kinship###0.00238___rope###0.00238___slaying###0.00238___temperament###0.00238___seeing###0.00238___activity###0.00238___personal_letter###0.00238___playing###0.00238___commentary###0.00238___sustenance###0.00238___television###0.00238___word###0.00238___objective###0.00238___work###0.00238___acquiring###0.00238___written_record###0.00238___logical_thinking###0.00238___atmosphere###0.00238___range###0.00238___tone_of_voice###0.00238___difficulty###0.00238___bound###0.00238___oppositeness###0.00238___duty###0.00238___liquid_body_substance###0.00238___wrinkle###0.01900___family_tree###0.00238___musical_notation###0.00238___unfortunate###0.00238___worry###0.00238___channel###0.01900___short_letter###0.01900___transmission###0.00238___tv###0.00238___application_program###0.00238___product###0.00238___communicating###0.00238___television_system###0.00238___aim###0.00238___air###0.01900___period###0.00238___social_control###0.00238___people###0.00238___facility###0.00238:how###1.00000:how do###1.00000:doubt###0.050___correctness###0.050___induction###0.050___algorithm's###0.050___proof###0.050___line###0.046___significant###0.045___eol###0.043___advantage###0.041___upon###0.041___srand###0.039___rand###0.037___request###0.037___random###0.035___file_in###0.035___camel###0.035___algorithm###0.034___select###0.033___whole###0.033___book###0.032___space###0.032___reading###0.030___here's###0.025___simple###0.025___eolthis###0.022___available###0.021___file###0.018___
174:176###0.22,100###0.20,142###0.20,163###0.17,103###0.15,51###0.15,177###0.15,58###0.14,108###0.14,111###0.14:Why do I get weird spaces when I print an array of lines?  EOL EOL:Saying EOL EOL    print "@lines\n";  EOL EOLjoins together the elements of @lines with a space between them. If @lines were ("little", "fluffy", "clouds") then the above statement would print EOL EOL    little fluffy clouds  EOL EOLbut if each element of @lines was a line of text, ending a newline character ("little\n", "fluffy\n", "clouds\n") then it would print!: EOL EOL    little EOL     fluffy EOL     clouds  EOL EOLIf your array contains lines, just print them!: EOL EOL    print @lines;  EOL EOL:point_in_time###0.00599___noesis###0.00599___cartridge###0.00599___grapheme###0.00599___occupation###0.00599___crack###0.00599___locality###0.00599___job###0.00599___area###0.00599___paraphernalia###0.00599___position###0.00599___wearing_apparel###0.00599___spacing###0.00599___line###0.00599___apparel###0.00599___time_interval###0.00599___vesture###0.00599___public_square###0.00599___expanse###0.00599___appurtenances###0.00599___square###0.00599___residence###0.00599___spatial_arrangement###0.00599___office###0.00599___condition###0.00599___sheet###0.00599___neighbourhood###0.00599___status###0.00599___geographical_area###0.00599___abode###0.00599___sib###0.00599___space###0.00599___part###0.00599___point###0.00599___social_rank###0.00599___passage###0.00599___type###0.00599___cognition###0.00599___spaces###0.09581___role###0.00599___extensor_muscle###0.00599___geographic_region###0.00599___quad###0.04790___business###0.00599___blank_space###0.04790___item###0.00599___sibling###0.00599___gap###0.00599___vicinity###0.00599___gear###0.00599___flat_solid###0.00599___size###0.00599___interval###0.00599___regalia###0.04790___knowledge###0.00599___region###0.00599___extensor###0.00599___clothing###0.00599___geographic_area###0.00599___line_of_work###0.00599___raiment###0.04790___indifference###0.00599___clothes###0.00599___wear###0.00599___surface_area###0.00599___graphic_symbol###0.00599___distance###0.04790___neighborhood###0.00599___character###0.00599___blank###0.04790___function###0.00599___article_of_clothing###0.00599___social_status###0.00599___euphemism###0.00599___rank###0.00599___geographical_region###0.00599___finery###0.04790___social_station###0.00599___array###0.09581___situation###0.00599___place###0.04790:why###0.50000___when###0.50000:when i###0.50000___why do###0.50000:clouds###0.122___fluffy###0.122___lines###0.110___little###0.095___print###0.066___eol###0.056___ending###0.030___eoljoins###0.030___spaces###0.030___array###0.030___saying###0.027___weird###0.027___together###0.023___newline###0.022___elements###0.020___statement###0.020___eolbut###0.019___space###0.019___element###0.017___character###0.017___contains###0.017___above###0.016___text###0.014___line###0.014___why###0.013___eolif###0.010___
175:183###0.30,93###0.27,177###0.27,196###0.27,189###0.25,210###0.23,182###0.22,101###0.21,141###0.20,221###0.20:How can I hope to use regular expressions without creating illegible and unmaintainable code?  EOL EOL:Three techniques can make regular expressions maintainable and understandable. EOL EOLComments Outside the Regex EOL EOLDescribe what you're doing and how you're doing it, using normal Perl comments. EOL EOL    # turn the line into the first word, a colon, and the EOL    # number of characters on the rest of the line EOL    s/^(\w+)(.*)/ lc($1) . "!:" . length($2) /meg;  EOL EOLComments Inside the Regex EOL EOLThe /x modifier causes whitespace to be ignored in a regex pattern (except in a character class), and also allows you to use normal comments there, too. As you can imagine, whitespace and comments help a lot. EOL EOL/x lets you turn this!: EOL EOL    s{<(?!:[^>'"]*|".*?"|'.*?')+>}{}gs;  EOL EOLinto this!: EOL EOL    s{ <                    # opening angle bracket EOL        (?!:                 # Non-backreffing grouping paren EOL             [^>'"] *       # 0 or more things that are neither > nor ' nor " EOL                |           #    or else EOL             ".*?"          # a section between double quotes (stingy match) EOL                |           #    or else EOL             '.*?'          # a section between single quotes (stingy match) EOL        ) +                 #   all occurring one or more times EOL       >                    # closing angle bracket EOL    }{}gsx;                 # replace with nothing, i.e. delete  EOL EOLIt's still not quite so clear as prose, but it is very useful for describing the meaning of each part of the pattern. EOL EOLDifferent Delimiters EOL EOLWhile we normally think of patterns as being delimited with / characters, they can be delimited by almost any character. perlre describes this. For example, the s/// above uses braces as delimiters. Selecting another delimiter can avoid quoting the delimiter within the pattern!: EOL EOL    s/\/usr\/local/\/usr\/share/g;# bad delimiter choice EOL    s#/usr/local#/usr/share#g;# better  EOL EOLI'm having trouble matching over more than one line. What's wrong?   EOL EOLEither you don't have more than one line in the string you're looking at (probably), or else you aren't using the correct modifier(s) on your pattern (possibly). EOL EOLThere are many ways to get multiline data into a string. If you want it to happen automatically while reading input, you'll want to set $/ (probably to '' for paragraphs or undef for the whole file) to allow you to read more than one line at a time. EOL EOLRead perlre to help you decide which of /s and /m (or both) you might want to use!: /s allows dot to include newline, and /m allows caret and dollar to match next to a newline, not just at the end of the string. You do need to make sure that you've actually got a multiline string in there. EOL EOLFor example, this program detects duplicate words, even when they span line breaks (but not paragraph ones). For this example, we don't need /s because we aren't using dot in a regular expression that we want to cross line boundaries. Neither do we need /m because we aren't wanting caret or dollar to match at any point inside the record next to newlines. But it's imperative that $/ be set to something other than the default, or else we won't actually ever have a multiline record read in. EOL EOL    $/ = '';  # read in more whole paragraph, not just one line EOL    while ( <> ) { EOLwhile ( /\b([\w'-]+)(\s+\1)+\b/gi ) {  # word starts alpha EOL    print "Duplicate $1 at paragraph $.\n"; EOL} EOL    }  EOL EOLHere's code that finds sentences that begin with "From " (which would be mangled by many mailers)!: EOL EOL    $/ = '';  # read in more whole paragraph, not just one line EOL    while ( <> ) { EOLwhile ( /^From /gm ) { # /m makes ^ match next to \n EOL    print "leading from in paragraph $.\n"; EOL} EOL    }  EOL EOLHere's code that finds everything between START and END in a paragraph!: EOL EOL    undef $/;  # read in whole file, not just one line or paragraph EOL    while ( <> ) { EOLwhile ( /START(.*?)END/sm ) { # /s makes . cross line boundaries EOL    print "$1\n"; EOL} EOL    }  EOL EOL:squeezing###0.00457___transformation###0.00457___communication###0.00457___appearance###0.00457___spoken_language###0.00457___protest###0.00457___chemical_compound###0.00457___thinking###0.00457___indicant###0.00457___sensing###0.00457___grammatical_constituent###0.00457___countenance###0.00457___grappling###0.00457___mathematical_statement###0.00457___perception###0.00457___position###0.00457___alikeness###0.00457___likeness###0.00457___voice_communication###0.00457___image###0.00457___style###0.00457___construction###0.03653___physical_phenomenon###0.00457___compound###0.00457___ambience###0.00457___speech###0.00457___reflection###0.03653___procedure###0.00457___grammatical_construction###0.03653___statement###0.00457___demo###0.00457___aspect###0.03653___artefact###0.00457___constituent###0.00457___mathematical_operation###0.00457___objection###0.00457___vertical_surface###0.00457___practice###0.00457___status###0.00457___direction###0.00457___mentation###0.00457___spoken_communication###0.00457___look###0.03653___dissent###0.00457___front###0.00457___cerebration###0.00457___milk###0.00457___type###0.00457___locution###0.03653___soul###0.00457___ikon###0.00457___biological_process###0.00457___commercial_enterprise###0.00457___aggressiveness###0.00457___facial_expression###0.00457___indication###0.00457___visage###0.00457___operation###0.00457___process###0.00457___tackling###0.00457___oral_communication###0.00457___consideration###0.00457___surface###0.00457___feature###0.00457___business###0.00457___human###0.00457___similitude###0.00457___squeeze###0.00457___manifestation###0.03653___face###0.03653___reflexion###0.03653___visual_image###0.00457___intellection###0.00457___speech_communication###0.00457___remark###0.00457___mathematical_process###0.00457___characteristic###0.00457___expressive_style###0.00457___comment###0.00457___mortal###0.00457___creating_by_mental_acts###0.00457___ambiance###0.00457___somebody###0.00457___someone###0.00457___formulation###0.03653___formula###0.03653___instruction###0.00457___language###0.00457___braving###0.00457___interpretation###0.00457___expressions###0.07306___external_body_part###0.00457___facial_gesture###0.00457___atmosphere###0.00457___grammatical_relation###0.00457___artifact###0.00457___picture###0.00457___individual###0.00457___demonstration###0.00457___thought###0.00457___saying###0.03653___person###0.00457___expression###0.03653___coping_with###0.00457___creating_from_raw_materials###0.00457___icon###0.00457___visual_aspect###0.00457___communicating###0.00457___visual_percept###0.00457___physical_property###0.00457___confronting###0.00457___organic_process###0.00457___business_enterprise###0.00457:how###1.00000:how can###1.00000:eol###0.029___paragraph###0.023___line###0.023___eolwhile###0.014___multiline###0.014___match###0.013___or_else###0.012___next_to###0.012___delimiter###0.012___whole###0.012___pattern###0.010___one###0.010___allows###0.010___comments###0.009___read###0.009___dollar###0.009___finds###0.009___boundaries###0.009___angle_bracket###0.009___delimiters###0.009___eolcomments###0.009___stingy###0.009___regex###0.009___aren't###0.008___more_than###0.008___usr###0.008___dot###0.008___delimited###0.008___caret###0.008___cross###0.008___perlre###0.007___string###0.007___turn###0.006___modifier###0.006___newline###0.006___duplicate###0.006___inside###0.006___regular###0.006___whitespace###0.006___record###0.006___neither###0.006___doing###0.005___normal###0.005___need###0.005___word###0.005___actually###0.005___section###0.005___start###0.005___expressions###0.005___character###0.005___eolhere's###0.005___code###0.005___help###0.005___undef###0.005___you're###0.005___print###0.005___makes###0.005___characters###0.004___using###0.004___set###0.004___understandable###0.004___illegible###0.004___eol/x###0.004___eolinto###0.004___non-backreffing###0.004___eoli'm###0.004___grouping###0.004___paren###0.004___starts###0.004___span###0.004___share/g###0.004___meg###0.004___sentences###0.004___mailers###0.004___eoldifferent###0.004___colon###0.004___imperative###0.004___gsx###0.004___describing###0.004___eoldescribe###0.004___end/sm###0.004___detects###0.004___occurring###0.004___usr/local###0.004___usr/share###0.004___prose###0.004___unmaintainable###0.004___example###0.004___having###0.004___ignored###0.004___braces###0.004___imagine###0.004___eolit's###0.004___maintainable###0.004___double_quotes###0.004___breaks###0.004___mangled###0.004___eolread###0.004___b/gi###0.004___paragraphs###0.003___alpha###0.003___decide###0.003___trouble###0.003___and_how###0.003___eoleither###0.003___at_a_time###0.003___replace###0.003___selecting###0.003___causes###0.003___choice###0.003___other_than###0.003___wanting###0.003___describes###0.003___quotes###0.003___closing###0.003___probably###0.003___outside###0.003___techniques###0.003___lets###0.003___looking_at###0.003___don't###0.003___quoting###0.003___except###0.003___even_when###0.003___rest###0.003___opening###0.003___think_of###0.003___patterns###0.003___meaning###0.003___newlines###0.003___i.e.###0.003___hope###0.003___within###0.003___in.###0.003___clear###0.003___creating###0.003___point###0.003___happen###0.003___leading###0.003___ever###0.003___file###0.003___three###0.003___default###0.003___everything###0.003___possibly###0.003___allow###0.003___normally###0.003___automatically###0.003___quite###0.003___matching###0.003___words###0.003___almost###0.003___eolthere###0.003___delete###0.003___nothing###0.003___class###0.002___length###0.002___useful###0.002___make_sure###0.002___ones###0.002___begin###0.002___correct###0.002___you've###0.002___single###0.002___reading###0.002___input###0.002___ways###0.002___a_lot###0.002___bad###0.002___avoid###0.002___uses###0.002___what's###0.002___times###0.002___wrong###0.002___expression###0.002___better###0.002___above###0.002___won't###0.002___include###0.002___local###0.002___eolfor###0.002___without###0.002___things###0.002___data###0.002___you'll###0.002___number###0.002___part###0.002___for_example###0.002___first###0.002___something###0.002___eolthe###0.001___it's###0.001___program###0.001___perl###0.000___
176:183###0.26,240###0.25,174###0.22,162###0.22,99###0.21,86###0.18,101###0.18,100###0.18,51###0.18,58###0.17:How can I pull out lines between two patterns that are themselves on different lines?  EOL EOL:You can use Perl's somewhat exotic .. operator (documented in perlop)!: EOL EOL    perl -ne 'print if /START/ .. /END/' file1 file2 ...  EOL EOLIf you wanted text and not lines, you would use EOL EOL    perl -0777 -ne 'print "$1\n" while /START(.*?)END/gs' file1 file2 ...  EOL EOLBut if you want nested occurrences of START through END, you'll run up against the problem described in the question in this section on matching balanced text. EOL EOLHere's another example of using ..!: EOL EOL    while (<>) { EOL        $in_header =   1  .. /^$/; EOL        $in_body   = /^$/ .. eof(); EOL# now choose between them EOL    } continue { EOLreset if eof();# fix $. EOL    }   EOL EOL:change_of_location###0.00118___exemplar###0.00118___pattern###0.00941___orthodoxy###0.00118___depression###0.00118___playacting###0.00118___mechanical_system###0.00118___boundary###0.00118___dominance###0.00118___paper_currency###0.00118___scope###0.00118___organisation###0.00118___personal_line_of_credit###0.00941___line_of_business###0.00941___effect###0.00118___measuring_rod###0.00118___communication###0.00118___homicide###0.00118___rail_line###0.00941___communication_channel###0.00941___assembly_line###0.00941___layer###0.00118___end###0.00118___occupation###0.00941___personage###0.00118___blood_line###0.00941___water###0.00118___nutrition###0.00118___origin###0.00941___reasoning###0.00118___job###0.00941___traffic_pattern###0.00941___bodily_fluid###0.00118___accord###0.00118___creativity###0.00118___applications_programme###0.00118___time_period###0.00118___performing###0.00118___angular_shape###0.00118___logical_argument###0.00941___mathematical_statement###0.00118___perception###0.00118___generalisation###0.00118___vexation###0.00118___quality###0.00118___course###0.00941___differentiation###0.00118___hereditary_pattern###0.00118___genealogy###0.00118___telecasting###0.00118___hero###0.00118___folding_money###0.00118___line_of_products###0.00941___bloodline###0.00941___disposition###0.00118___acting###0.00118___line###0.00118___rhetorical_device###0.00118___linear_unit###0.00118___medium###0.00118___assembly###0.00118___commerce###0.00118___series###0.00118___side###0.00118___victuals###0.00118___connecter###0.00118___angularity###0.00118___maneuver###0.00118___pedagogy###0.00118___humour###0.00118___target###0.00118___continuance###0.00118___obligation###0.00118___manoeuvre###0.00118___example###0.00118___lineage###0.00118___trench###0.00118___production_line###0.00941___shape###0.00118___seam###0.00941___sector###0.00118___rounder###0.00118___sum###0.00118___connection###0.00118___move###0.00118___action###0.00118___body_of_water###0.00118___motion###0.00118___phone_line###0.00941___procedure###0.00118___construct###0.00118___orbit###0.00118___normal###0.00941___sum_of_money###0.00118___traveling###0.00118___business_activity###0.00118___statement###0.00118___programme###0.00118___melody###0.00941___impression###0.00118___breed###0.00118___unfortunate_person###0.00118___argumentation###0.00941___written_account###0.00118___form###0.00118___generality###0.00118___cable###0.00941___photo###0.00118___imprint###0.00118___figure###0.00941___whole_number###0.00118___good_example###0.00118___assemblage###0.00118___measuring_stick###0.00118___teaching###0.00118___responsibility###0.00118___ascendance###0.00118___mercantilism###0.00118___debauchee###0.00118___getting###0.00118___contrast###0.00941___illustration###0.00118___crinkle###0.00941___parentage###0.00941___enterprise###0.00118___program###0.00118___decoration###0.00118___tv_station###0.00118___travel###0.00118___system###0.00118___practice###0.00118___compass###0.00118___wind###0.00118___ascendancy###0.00118___important_person###0.00118___video###0.00118___body_fluid###0.00118___transmission_line###0.00941___tone###0.00118___direction###0.00118___element###0.00118___melodic_line###0.00941___route###0.00118___music###0.00118___strain###0.00118___furrow###0.00941___travelling###0.00118___patterns###0.01882___comparing###0.00118___milk###0.00118___execution###0.00118___plan###0.00118___bank_line###0.00941___bounds###0.00118___graph###0.00118___design###0.00941___opposition###0.00118___point###0.00118___part###0.00118___measure###0.00118___pact###0.00118___certificate_of_indebtedness###0.00118___demarcation###0.00941___play###0.00118___passage###0.00118___slope###0.00118___amount_of_money###0.00118___dividing_line###0.00941___ambit###0.00118___debt_instrument###0.00118___descent###0.00941___intersection###0.00118___ornamentation###0.00118___note###0.00941___commercial_enterprise###0.00118___filiation###0.00118___humor###0.00118___approach_pattern###0.00941___object###0.00118___family_relationship###0.00118___visual_perception###0.00118___physical_structure###0.00118___conductor###0.00118___application###0.00118___structure###0.00118___period_of_time###0.00118___line_of_descent###0.00941___process###0.00118___beholding###0.00118___ancestry###0.00941___aura###0.00118___telephone_line###0.00941___headache###0.00118___graphical_record###0.00118___line_of_merchandise###0.00941___production###0.00118___business###0.00941___nutriment###0.00118___tune###0.00941___control###0.00118___telegram###0.00118___path###0.00118___melodic_phrase###0.00941___marketing###0.00118___passageway###0.00118___product_line###0.00941___blueprint###0.00941___goal###0.00118___credit###0.00118___stratum###0.00118___comparison###0.00118___law###0.00118___personal_credit_line###0.00941___book###0.00118___reach###0.00118___gas###0.00118___workplace###0.00118___inheritance###0.00118___blood###0.00941___television_station###0.00118___beginning###0.00118___concept###0.00118___movement###0.00118___pipeline###0.00941___crease###0.00941___aliment###0.00118___variety###0.00118___joint###0.00118___education###0.00118___wire###0.00118___robbery###0.00118___influential_person###0.00118___line_of_reasoning###0.00941___rule###0.00941___educational_activity###0.00118___musical_perception###0.00118___pipage###0.00118___discussion###0.00118___organization###0.00118___merchandise###0.00118___comment###0.00118___murder###0.00118___wares###0.00118___region###0.00118___photograph###0.00118___stock###0.00118___piping###0.00118___connective###0.00118___high_status###0.00118___pedigree###0.00941___derivation###0.00118___incline###0.00118___way###0.00118___exposure###0.00118___line_of_work###0.00941___creating_by_mental_acts###0.00118___nourishment###0.00118___distinction###0.00118___business_line###0.00941___gossip###0.00118___abstract_thought###0.00118___adulthood###0.00118___organic_structure###0.00118___give-and-take###0.00118___paper_money###0.00118___concern###0.00118___relationship###0.00118___commercial_activity###0.00118___installation###0.00118___formula###0.00941___instruction###0.00118___commercialism###0.00118___agate_line###0.00941___libertine###0.00118___generalization###0.00118___credit_line###0.00941___arrangement###0.00118___alimentation###0.00118___kinship###0.00118___connexion###0.00118___rope###0.00118___road###0.00118___creativeness###0.00118___slaying###0.00118___temperament###0.00118___seeing###0.00118___activity###0.00118___personal_letter###0.00118___playing###0.00118___meeting###0.00118___commentary###0.00118___sustenance###0.00118___television###0.00118___word###0.00118___objective###0.00118___work###0.00118___acquiring###0.00118___written_record###0.00118___logical_thinking###0.00118___atmosphere###0.00118___range###0.00118___convention###0.00941___perceptual_experience###0.00118___railway_line###0.00941___pipe###0.00118___pic###0.00118___simulation###0.00118___tone_of_voice###0.00118___difficulty###0.00118___integer###0.00118___bound###0.00118___duration###0.00118___connector###0.00118___oppositeness###0.00118___treaty###0.00118___duty###0.00118___area_unit###0.00118___ascendence###0.00118___line_of_credit###0.00941___scuttlebutt###0.00118___body###0.00118___liquid_body_substance###0.00118___wrinkle###0.00941___family_tree###0.00118___musical_notation###0.00118___radiation_pattern###0.00941___unfortunate###0.00118___percept###0.00118___conception###0.00118___worry###0.00118___ascendency###0.00118___radiation_diagram###0.00941___channel###0.00941___short_letter###0.00941___study###0.00118___transmission###0.00118___itinerary###0.00118___tv###0.00118___amount###0.00118___law_of_nature###0.00118___application_program###0.00118___communicating###0.00118___product###0.00118___square_measure###0.00118___television_system###0.00118___aim###0.00118___model###0.00118___air###0.00941___period###0.00118___social_control###0.00118___people###0.00118___lines###0.01882___business_enterprise###0.00118___sketch###0.00118___facility###0.00118___ornament###0.00118___gathering###0.00118___conducting_wire###0.00118:how###1.00000:how can###1.00000:eol###0.051___file1###0.046___file2###0.046___start###0.046___lines###0.040___eof###0.037___eolreset###0.026___in_header###0.026___run_up###0.026___end/gs###0.026___exotic###0.026___in_body###0.026___text###0.025___choose###0.021___balanced###0.021___continue###0.021___occurrences###0.021___themselves###0.021___somewhat###0.020___nested###0.020___pull_out###0.020___fix###0.019___patterns###0.019___you_would###0.019___print###0.018___perlop###0.018___against###0.018___matching###0.017___wanted###0.017___eolbut###0.016___described###0.016___section###0.015___in_this###0.015___operator###0.015___eolhere's###0.014___question###0.014___perl's###0.013___problem###0.013___different###0.013___documented###0.013___example###0.012___you'll###0.012___two###0.011___perl###0.010___using###0.009___eolif###0.008___
177:141###0.33,254###0.33,163###0.32,175###0.27,196###0.26,189###0.25,142###0.23,93###0.23,183###0.23,146###0.23:I put a regular expression into $/ but it didn't work. What's wrong?   EOL EOL:$/ must be a string, not a regular expression. Awk has to be better for something. !:-) EOL EOLActually, you could do this if you don't mind reading the whole file into memory!: EOL EOL    undef $/; EOL    @records = split /your_pattern/, <FH>;  EOL EOLThe Net!:!:Telnet module (available from CPAN) has the capability to wait for a pattern in the input stream, or timeout if it doesn't appear within a certain time. EOL EOL    ## Create a file with three lines. EOL    open FH, ">file"; EOL    print FH "The first line\nThe second line\nThe third line\n"; EOL    close FH; EOL EOL    ## Get a read/write filehandle to it. EOL    $fh = new FileHandle "+<file"; EOL EOL    ## Attach it to a "stream" object. EOL    use Net!:!:Telnet; EOL    $file = new Net!:!:Telnet (-fhopen => $fh); EOL EOL    ## Search for the second line and print out the third. EOL    $file->waitfor('/second line\n/'); EOL    print $file->getline;  EOL EOL::what###1.00000:what's wrong###1.00000:eol###0.050___telnet###0.049___file###0.046___line###0.042___nthe###0.037___net###0.035___second###0.034___third###0.030___stream###0.030___filehandle###0.020___expression###0.020___print###0.020___your_pattern###0.018___fhopen###0.018___read/write###0.018___getline###0.018___waitfor###0.018___regular###0.018___capability###0.016___eolactually###0.016___attach###0.016___new###0.014___records###0.014___mind###0.014___timeout###0.014___to_it###0.014___didn't###0.013___certain###0.013___within###0.013___wait###0.013___split###0.012___search###0.012___three###0.012___awk###0.012___object###0.012___appear###0.012___whole###0.012___memory###0.011___input###0.011___reading###0.011___pattern###0.010___what's###0.010___better###0.010___wrong###0.010___close###0.010___undef###0.010___create###0.009___lines###0.009___work###0.008___something###0.008___first###0.008___available###0.008___open###0.007___time###0.007___eolthe###0.007___doesn't###0.007___string###0.007___don't###0.007___cpan###0.006___module###0.005___
178:90###0.35,141###0.22,183###0.20,189###0.19,100###0.19,94###0.18,51###0.18,221###0.18,205###0.17,210###0.17:How do I substitute case insensitively on the LHS while preserving case on the RHS?  EOL EOL:Here's a lovely Perlish solution by Larry Rosler. It exploits properties of bitwise xor on ASCII strings. EOL EOL    $_= "this is a TEsT case"; EOL EOL    $old = 'test'; EOL    $new = 'success'; EOL EOL    s{(\Q$old\E)} EOL     { uc $new | (uc $1 ^ $1) . EOL(uc(substr $1, -1) ^ substr $1, -1) x EOL    (length($new) - length $1) EOL     }egi; EOL EOL    print;  EOL EOLAnd here it is as a subroutine, modelled after the above!: EOL EOL    sub preserve_case($$) { EOLmy ($old, $new) = @_; EOLmy $mask = uc $old ^ $old; EOL EOLuc $new | $mask . EOL    substr($mask, -1) x (length($new) - length($old))        EOL    } EOL EOL    $a = "this is a TEsT case"; EOL    $a =~ s/(test)/preserve_case($1, "success")/egi; EOL    print "$a\n";  EOL EOLThis prints!: EOL EOL    this is a SUcCESS case  EOL EOLJust to show that C programmers can write C in any programming language, if you prefer a more C-like solution, the following script makes the substitution have the same case, letter by letter, as the original. (It also happens to run about 240% slower than the Perlish solution runs.) If the substitution has more characters than the string being substituted, the case of the last character is used for the rest of the substitution. EOL EOL    # Original by Nathan Torkington, massaged by Jeffrey Friedl EOL    # EOL    sub preserve_case($$) EOL    { EOL        my ($old, $new) = @_; EOL        my ($state) = 0; # 0 = no change; 1 = lc; 2 = uc EOL        my ($i, $oldlen, $newlen, $c) = (0, length($old), length($new)); EOL        my ($len) = $oldlen < $newlen ? $oldlen !: $newlen; EOL EOL        for ($i = 0; $i < $len; $i++) { EOL            if ($c = substr($old, $i, 1), $c =~ /[\W\d_]/) { EOL                $state = 0; EOL            } elsif (lc $c eq $c) { EOL                substr($new, $i, 1) = lc(substr($new, $i, 1)); EOL                $state = 1; EOL            } else { EOL                substr($new, $i, 1) = uc(substr($new, $i, 1)); EOL                $state = 2; EOL            } EOL        } EOL        # finish up with any remaining new (for when new is longer than old) EOL        if ($newlen > $oldlen) { EOL            if ($state == 1) { EOL                substr($new, $oldlen) = lc(substr($new, $oldlen)); EOL            } elsif ($state == 2) { EOL                substr($new, $oldlen) = uc(substr($new, $oldlen)); EOL            } EOL        } EOL        return $new; EOL    }  EOL EOL:recommendation###0.00292___happening###0.00292___venture###0.00292___exoskeleton###0.00292___lhs###0.04665___knowledge_base###0.00292___gonadotrophic_hormone###0.00292___grapheme###0.00292___knowledge_domain###0.00292___imaginary_being###0.00292___blooper###0.00292___origin###0.00292___monition###0.00292___property###0.00292___entreaty###0.00292___grammatical_constituent###0.00292___proceeding###0.00292___potter's_clay###0.00292___cover###0.00292___playing_card###0.00292___slip###0.02332___grownup###0.00292___anchorage###0.00292___ideal###0.00292___occurrence###0.00292___blunder###0.00292___testimonial###0.00292___prayer###0.00292___printed_symbol###0.00292___LH###0.02332___warning###0.00292___example###0.02332___physical_phenomenon###0.00292___interstitial_cell-stimulating_hormone###0.02332___spring_chicken###0.00292___trait###0.00292___appeal###0.00292___undergarment###0.00292___symbol###0.00292___anchorage_ground###0.00292___mental_representation###0.00292___message###0.00292___mischance###0.00292___instance###0.02332___cognitive_content###0.00292___shield###0.00292___sheet###0.00292___sort###0.00292___physical_thing###0.00292___flight_maneuver###0.00292___form###0.00292___artefact###0.00292___mental_object###0.00292___enactment###0.00292___constituent###0.00292___substance###0.00292___bed_linen###0.00292___origination###0.00292___phenomenon###0.00292___gonadotropic_hormone###0.00292___dimension###0.00292___gonadotropin###0.00292___event###0.02332___entity###0.00292___stem###0.00292___circumstance###0.00292___casing###0.02332___error###0.00292___housing###0.00292___anomaly###0.00292___protective_cover###0.00292___causa###0.02332___cause###0.02332___representation###0.00292___sheet_of_paper###0.00292___type###0.02332___justification###0.00292___eccentric###0.02332___evasion###0.00292___bloomer###0.00292___soul###0.00292___young_person###0.00292___natural_covering###0.00292___lesson###0.00292___case###0.04665___slide###0.00292___sheath###0.02332___word_of_advice###0.00292___dress###0.00292___admonition###0.00292___personation###0.00292___animal_material###0.00292___attribute###0.00292___human###0.00292___ICSH###0.02332___stalk###0.00292___racing_boat###0.00292___information###0.00292___protection###0.00292___taxon###0.00292___luteinizing_hormone###0.02332___boo-boo###0.00292___written_symbol###0.00292___frame###0.00292___imaginary_creature###0.00292___covering###0.00292___natural_event###0.00292___misadventure###0.00292___framing###0.00292___variety###0.00292___internal_representation###0.00292___framework###0.00292___proceedings###0.00292___frock###0.00292___mortal###0.00292___ammo###0.00292___fuckup###0.00292___bungle###0.00292___subject###0.02332___mistake###0.00292___smoothness###0.00292___lawsuit###0.02332___somebody###0.00292___someone###0.00292___term###0.00292___cavy###0.00292___shell###0.02332___repute###0.00292___unusual_person###0.00292___kind###0.00292___graphic_symbol###0.00292___characterization###0.00292___good_word###0.00292___piece_of_paper###0.00292___block###0.00292___potter's_earth###0.00292___reputation###0.00292___hull###0.00292___portrayal###0.00292___character###0.02332___youth###0.00292___artifact###0.00292___garment###0.00292___suit###0.02332___younker###0.00292___airplane_maneuver###0.00292___individual###0.00292___legal_proceeding###0.00292___glide###0.00292___adult###0.00292___ammunition###0.00292___gonadotrophin###0.00292___flub###0.00292___inception###0.00292___person###0.00292___boner###0.00292___fault###0.00292___botch###0.00292___mishap###0.00292___taxonomic_group###0.00292___subject_matter###0.00292___foul-up###0.00292___guinea_pig###0.02332___protective_covering###0.00292___content###0.00292___pillow_slip###0.02332:how###1.00000:how do###1.00000:substr###0.073___oldlen###0.070___new###0.066___eol###0.059___state###0.037___newlen###0.035___length###0.033___preserve_case###0.026___mask###0.026___case###0.024___success###0.021___substitution###0.020___test_case###0.017___egi###0.017___perlish###0.017___len###0.015___elsif###0.015___solution###0.014___letter###0.013___test###0.012___original###0.011___eolmy###0.010___finish_up###0.008___eoluc###0.008___substituted###0.008___exploits###0.008___substitute###0.008___modelled###0.008___c-like###0.008___rosler###0.008___lovely###0.008___show###0.008___massaged###0.008___properties###0.008___insensitively###0.007___eoljust###0.007___rhs###0.007___lhs###0.007___remaining###0.007___preserving###0.007___bitwise###0.007___nathan###0.007___torkington###0.007___sub###0.007___longer###0.007___slower###0.007___xor###0.007___rest###0.006___prints###0.006___print###0.006___happens###0.006___programmers###0.006___programming_language###0.006___jeffrey###0.005___eoland###0.005___friedl###0.005___ascii###0.005___runs###0.005___prefer###0.005___subroutine###0.005___larry###0.005___character###0.004___last###0.004___run###0.004___script###0.004___above###0.004___makes###0.004___change###0.004___strings###0.004___characters###0.004___here's###0.004___following###0.004___return###0.004___used###0.004___eolthis###0.003___write###0.003___string###0.003___
179:175###0.16,165###0.15,183###0.14,92###0.13,210###0.13,192###0.13,205###0.12,196###0.12,101###0.11,51###0.11:How can I make \w match national character sets?  EOL EOL:See perllocale. EOL EOL:textile###0.00366___recommendation###0.00366___happening###0.00366___stuff###0.00366___grapheme###0.02930___appearance###0.00366___property###0.00366___reference###0.02930___proceeding###0.00366___cover###0.00366___quality###0.02930___grownup###0.00366___occurrence###0.00366___fabric###0.00366___testimonial###0.00366___line###0.00366___printed_symbol###0.00366___tungsten###0.02930___w###0.05861___action###0.00366___try###0.00366___trait###0.00366___symbol###0.00366___construct###0.00366___statement###0.00366___atomic_number_74###0.02930___melody###0.00366___sort###0.00366___physical_thing###0.00366___form###0.00366___argument###0.00366___enactment###0.00366___substance###0.00366___bed_linen###0.00366___theatrical_role###0.02930___dimension###0.00366___entity###0.00366___circumstance###0.00366___melodic_line###0.00366___physical_object###0.00366___strain###0.00366___housing###0.00366___degree###0.00366___anomaly###0.00366___notation###0.00366___part###0.02930___lineament###0.02930___social_rank###0.00366___type###0.02930___body_part###0.00366___eccentric###0.02930___syntactic_category###0.00366___container###0.00366___soul###0.00366___role###0.02930___note###0.00366___state_of_mind###0.00366___natural_covering###0.00366___case###0.02930___object###0.00366___personation###0.00366___utility###0.00366___tune###0.00366___attribute###0.00366___melodic_phrase###0.00366___problem###0.00366___human###0.00366___book###0.00366___cloth###0.00366___metallic_element###0.00366___taxon###0.00366___assets###0.00366___grammatical_category###0.00366___written_symbol###0.00366___annotation###0.00366___frame###0.00366___concept###0.00366___covering###0.00366___remark###0.00366___fact###0.00366___natural_event###0.00366___framing###0.00366___variety###0.00366___framework###0.00366___grade###0.00366___proceedings###0.00366___indicator###0.00366___relation###0.00366___containerful###0.00366___frame_of_mind###0.00366___comment###0.00366___mortal###0.00366___fibre###0.02930___concern###0.00366___somebody###0.00366___someone###0.00366___sound_property###0.00366___location###0.00366___activity###0.00366___unusual_person###0.00366___kind###0.00366___persona###0.02930___graphic_symbol###0.02930___characterization###0.00366___good_word###0.00366___publication###0.00366___block###0.00366___attempt###0.00366___endeavor###0.00366___portrayal###0.00366___character###0.05861___fiber###0.02930___duty###0.00366___individual###0.00366___social_status###0.00366___legal_proceeding###0.00366___usefulness###0.00366___adult###0.00366___conception###0.00366___person###0.00366___rank###0.00366___taxonomic_group###0.00366___visual_aspect###0.00366___social_station###0.00366___meaning###0.00366___material###0.00366___effort###0.00366___metal###0.00366___air###0.00366___level###0.00366___endeavour###0.00366:how###1.00000:how can###1.00000:national###0.245___sets###0.191___perllocale###0.176___match###0.141___character###0.138___eol###0.106___
180:93###0.16,175###0.11,179###0.10,266###0.10,205###0.09,18###0.09,183###0.08,210###0.08,86###0.07,192###0.07:How can I match a locale-smart version of /[a-zA-Z]/?  EOL EOL:One alphabetic character would be /[^\W\d_]/, no matter what locale you're in. Non-alphabetics would be / [\W\d_]/ (assuming you don't consider an underscore a letter). EOL EOL:change_of_location###0.00662___urban_center###0.00662___transformation###0.00662___datum###0.00662___public_speaking###0.00662___measuring###0.00662___paraphrasis###0.00662___speechmaking###0.00662___account###0.00662___city###0.00662___melodic_theme###0.00662___deviation###0.00662___public_presentation###0.00662___variable_quantity###0.00662___interlingual_rendition###0.05298___translation###0.05298___defrayment###0.00662___payment###0.00662___move###0.00662___rendering###0.05298___motion###0.00662___dancing###0.00662___data_point###0.00662___mental_representation###0.00662___thing###0.00662___saltation###0.00662___adaptation###0.05298___musical_theme###0.00662___written_account###0.00662___variable###0.00662___travel###0.00662___measurement###0.00662___adjustment###0.00662___theme###0.00662___idea###0.00662___variant###0.05298___measure###0.00662___representation###0.00662___type###0.00662___change###0.00662___change_of_integrity###0.00662___biological_process###0.00662___alteration###0.00662___written_language###0.00662___taxon###0.00662___perturbation###0.00662___linguistic_process###0.00662___variation###0.05298___movement###0.00662___internal_representation###0.00662___difference###0.00662___terpsichore###0.00662___dance###0.00662___version###0.10596___modification###0.00662___paraphrase###0.00662___being###0.00662___written_material###0.00662___language###0.00662___reading###0.05298___activity###0.00662___interpretation###0.05298___drawing###0.00662___metropolis###0.00662___organism###0.00662___written_record###0.00662___speaking###0.00662___explanation###0.00662___mensuration###0.00662___performance###0.00662___departure###0.00662___defrayal###0.00662___writing###0.00662___oral_presentation###0.00662___divergence###0.00662___piece_of_writing###0.00662___taxonomic_group###0.00662___written_communication###0.00662___organic_process###0.00662___angle###0.00662:how###1.00000:how can###1.00000:alphabetic_character###0.083___locale-smart###0.083___a-za-z###0.083___underscore###0.083___non-alphabetics###0.083___no_matter###0.074___letter###0.065___locale###0.062___in.###0.059___assuming###0.054___consider###0.052___match###0.048___version###0.040___eol###0.036___don't###0.032___you're###0.030___one###0.027___
181:210###0.20,182###0.20,175###0.18,183###0.16,192###0.15,99###0.15,92###0.15,95###0.15,88###0.13,178###0.13:How can I quote a variable to use in a regex?  EOL EOL:The Perl parser will expand $variable and @variable references in regular expressions unless the delimiter is a single quote. Remember, too, that the right-hand side of a s/// substitution is considered a double-quoted string (see perlop for more details). Remember also that any regex special characters will be acted on unless you precede the substitution with \Q. Here's an example!: EOL EOL    $string = "to die?"; EOL    $lhs = "die?"; EOL    $rhs = "sleep, no more"; EOL EOL    $string =~ s/\Q$lhs/$rhs/; EOL    # $string is now "to sleep no more"  EOL EOLWithout the \Q, the regex would also spuriously match "di". EOL EOL::how###1.00000:how can###1.00000:regex###0.055___lhs###0.050___rhs###0.050___no_more###0.046___substitution###0.044___string###0.043___sleep###0.042___remember###0.039___variable###0.039___eol###0.036___unless###0.033___right-hand###0.028___acted###0.028___double-quoted###0.028___spuriously###0.028___precede###0.028___die###0.025___single_quote###0.025___eolwithout###0.025___delimiter###0.025___considered###0.023___side###0.023___quote###0.023___expand###0.020___perlop###0.020___parser###0.019___special###0.018___references###0.016___match###0.016___expressions###0.016___characters###0.014___here's###0.014___regular###0.013___details###0.013___example###0.013___perl###0.005___
182:196###0.27,175###0.22,210###0.20,181###0.20,192###0.16,177###0.16,86###0.14,183###0.14,191###0.14,211###0.13:What is /o really for?  EOL EOL:Using a variable in a regular expression match forces a re-evaluation (and perhaps recompilation) each time the regular expression is encountered. The /o modifier locks in the regex the first time it's used. This always happens in a constant regular expression, and in fact, the pattern was compiled into the internal format at the same time your entire program was. EOL EOLUse of /o is irrelevant unless variable interpolation is used in the pattern, and if so, the regex engine will neither know nor care whether the variables change after the pattern is evaluated the very first time. EOL EOL/o is often used to gain an extra measure of efficiency by not performing subsequent evaluations when you know it won't matter (because you know the variables won't change), or more rarely, when you don't want the regex to notice if they do. EOL EOLFor example, here's a "paragrep" program!: EOL EOL    $/ = '';  # paragraph mode EOL    $pat = shift; EOL    while (<>) { EOL        print if /$pat/o; EOL    }  EOL EOL:o###1.00000:what###1.00000:what is###1.00000:regex###0.034___pattern###0.030___know###0.030___expression###0.029___regular###0.026___eol###0.025___time###0.021___variables###0.019___won't###0.019___change###0.018___paragrep###0.017___evaluations###0.017___at_the_same_time###0.017___recompilation###0.017___re-evaluation###0.017___eol/o###0.017___irrelevant###0.017___pat/o###0.017___pat###0.017___used###0.016___variable###0.016___gain###0.015___subsequent###0.015___interpolation###0.015___forces###0.015___evaluated###0.015___measure###0.015___locks###0.015___encountered###0.015___first###0.015___rarely###0.014___performing###0.014___efficiency###0.013___engine###0.013___modifier###0.013___notice###0.013___constant###0.013___matter###0.013___entire###0.012___happens###0.012___paragraph###0.012___program###0.012___internal###0.012___eoluse###0.012___extra###0.011___in_fact###0.011___mode###0.011___neither###0.011___used_to###0.011___perhaps###0.011___care###0.011___compiled###0.011___unless###0.010___format###0.010___match###0.010___shift###0.009___often###0.009___always###0.009___eolfor###0.009___here's###0.009___example###0.008___really###0.008___whether###0.008___it's###0.006___don't###0.006___print###0.006___using###0.006___
183:221###0.34,240###0.33,274###0.30,175###0.30,95###0.28,101###0.27,210###0.26,58###0.26,205###0.26,165###0.26:How do I use a regular expression to strip C style comments from a file?  EOL EOL:While this actually can be done, it's much harder than you'd think. For example, this one-liner EOL EOL    perl -0777 -pe 's{/\*.*?\*/}{}gs' foo.c  EOL EOLwill work in many but not all cases. You see, it's too simple-minded for certain kinds of C programs, in particular, those with what appear to be comments in quoted strings. For that, you'd need something like this, created by Jeffrey Friedl and later modified by Fred Curtis. EOL EOL    $/ = undef; EOL    $_ = <>; EOL    s#/\*[^*]*\*+([^/*][^*]*\*+)*/|("(\\.|[^"\\])*"|'(\\.|[^'\\])*'|.[^/"'\\]*)#$2#gs EOL    print;  EOL EOLThis could, of course, be more legibly written with the /x modifier, adding whitespace and comments. Here it is expanded, courtesy of Fred Curtis. EOL EOL    s{ EOL       /\*         ##  Start of /* ... */ comment EOL       [^*]*\*+    ##  Non-* followed by 1-or-more *'s EOL       ( EOL         [^/*][^*]*\*+ EOL       )*          ##  0-or-more things which don't start with / EOL                   ##    but do end with '*' EOL       /           ##  End of /* ... */ comment EOL EOL     |         ##     OR  various things which aren't comments!: EOL EOL       ( EOL         "           ##  Start of " ... " string EOL         ( EOL           \\.           ##  Escaped char EOL         |               ##    OR EOL           [^"\\]        ##  Non "\ EOL         )* EOL         "           ##  End of " ... " string EOL EOL       |         ##     OR EOL EOL         '           ##  Start of ' ... ' string EOL         ( EOL           \\.           ##  Escaped char EOL         |               ##    OR EOL           [^'\\]        ##  Non '\ EOL         )* EOL         '           ##  End of ' ... ' string EOL EOL       |         ##     OR EOL EOL         .           ##  Anything other char EOL         [^/"'\\]*   ##  Chars which doesn't start a comment, string or escape EOL       ) EOL     }{$2}gxs;  EOL EOLA slight modification also removes C++ comments!: EOL EOL    s#/\*[^*]*\*+([^/*][^*]*\*+)*/|//[^\n]*|("(\\.|[^"\\])*"|'(\\.|[^'\\])*'|.[^/"'\\]*)#$2#gs;  EOL EOL:transformation###0.00376___appearance###0.00376___spoken_language###0.00376___protest###0.00376___chemical_compound###0.00376___thinking###0.00376___blooper###0.00376___indicant###0.00376___sensing###0.00376___grammatical_constituent###0.00376___countenance###0.00376___grappling###0.00376___mathematical_statement###0.00376___potter's_clay###0.00376___perception###0.00376___position###0.00376___slip###0.03008___alikeness###0.00376___anchorage###0.00376___likeness###0.00376___blunder###0.00376___voice_communication###0.00376___image###0.00376___style###0.00376___construction###0.03008___physical_phenomenon###0.00376___compound###0.00376___spring_chicken###0.00376___ambience###0.00376___speech###0.00376___undergarment###0.00376___procedure###0.00376___reflection###0.03008___anchorage_ground###0.00376___grammatical_construction###0.03008___mischance###0.00376___statement###0.00376___demo###0.00376___sheet###0.00376___aspect###0.03008___flight_maneuver###0.00376___artefact###0.00376___constituent###0.00376___bed_linen###0.00376___mathematical_operation###0.00376___vertical_surface###0.00376___objection###0.00376___practice###0.00376___status###0.00376___stem###0.00376___direction###0.00376___mentation###0.00376___spoken_communication###0.00376___dissent###0.00376___look###0.03008___front###0.00376___cerebration###0.00376___error###0.00376___milk###0.00376___sheet_of_paper###0.00376___type###0.00376___evasion###0.00376___locution###0.03008___bloomer###0.00376___soul###0.00376___ikon###0.00376___commercial_enterprise###0.00376___young_person###0.00376___aggressiveness###0.00376___facial_expression###0.00376___indication###0.00376___visage###0.00376___slide###0.00376___operation###0.00376___process###0.00376___oral_communication###0.00376___tackling###0.00376___consideration###0.00376___surface###0.00376___feature###0.00376___business###0.00376___human###0.00376___stalk###0.00376___similitude###0.00376___manifestation###0.03008___boo-boo###0.00376___face###0.03008___reflexion###0.03008___visual_image###0.00376___intellection###0.00376___speech_communication###0.00376___remark###0.00376___misadventure###0.00376___mathematical_process###0.00376___characteristic###0.00376___strip###0.06015___expressive_style###0.00376___comment###0.00376___mortal###0.00376___fuckup###0.00376___creating_by_mental_acts###0.00376___ambiance###0.00376___bungle###0.00376___mistake###0.00376___smoothness###0.00376___somebody###0.00376___someone###0.00376___formulation###0.03008___formula###0.03008___instruction###0.00376___language###0.00376___braving###0.00376___interpretation###0.00376___external_body_part###0.00376___piece_of_paper###0.00376___facial_gesture###0.00376___atmosphere###0.00376___potter's_earth###0.00376___grammatical_relation###0.00376___youth###0.00376___artifact###0.00376___younker###0.00376___airplane_maneuver###0.00376___picture###0.00376___individual###0.00376___demonstration###0.00376___glide###0.00376___thought###0.00376___saying###0.03008___flub###0.00376___person###0.00376___expression###0.06015___boner###0.00376___fault###0.00376___botch###0.00376___coping_with###0.00376___creating_from_raw_materials###0.00376___mishap###0.00376___icon###0.00376___visual_aspect###0.00376___visual_percept###0.00376___physical_property###0.00376___foul-up###0.00376___confronting###0.00376___business_enterprise###0.00376:how###1.00000:how do###1.00000:eol###0.085___comments###0.051___start###0.043___comment###0.036___non###0.034___char###0.033___curtis###0.029___escaped###0.029___string###0.028___fred###0.024___you'd###0.019___gxs###0.014___adding###0.014___expanded###0.014___one-liner###0.014___things###0.014___in_particular###0.013___legibly###0.013___modification###0.013___slight###0.013___simple-minded###0.013___followed###0.013___harder###0.013___eolwill###0.013___removes###0.012___strip###0.012___style###0.012___for_certain###0.012___kinds###0.012___work_in###0.011___modified###0.011___chars###0.011___it's###0.011___think###0.011___modifier###0.011___various###0.010___whitespace###0.010___quoted###0.010___courtesy###0.010___escape###0.010___created###0.010___friedl###0.010___jeffrey###0.010___appear###0.010___of_course###0.009___anything###0.009___later###0.009___eola###0.009___actually###0.009___aren't###0.009___foo###0.009___done###0.008___expression###0.008___undef###0.008___cases###0.008___strings###0.007___written###0.007___programs###0.007___regular###0.007___for_example###0.006___eolthis###0.006___something###0.006___need###0.006___doesn't###0.005___don't###0.005___print###0.005___file###0.005___perl###0.003___
184:86###0.19,176###0.16,99###0.14,94###0.13,175###0.12,193###0.10,133###0.10,89###0.10,85###0.10,96###0.09:Can I use Perl regular expressions to match balanced text?  EOL EOL:Although Perl regular expressions are more powerful than "mathematical" regular expressions because they feature conveniences like backreferences (\1 and its ilk), they still aren't powerful enough--with the possible exception of bizarre and experimental features in the development-track releases of Perl. You still need to use non-regex techniques to parse balanced text, such as the text enclosed between matching parentheses or braces, for example. EOL EOLAn elaborate subroutine (for 7-bit ASCII only) to pull out balanced and possibly nested single chars, like ` and ', { and }, or ( and ) can be found in http!://www.perl.com/CPAN/authors/id/TOMC/scripts/pull_quotes.gz . EOL EOLThe C!:!:Scan module from CPAN contains such subs for internal use, but they are undocumented. EOL EOL::::balanced###0.056___expressions###0.039___powerful###0.035___regular###0.033___text###0.033___scan###0.022___conveniences###0.022___development-track###0.022___backreferences###0.022___non-regex###0.022___ilk###0.022___undocumented###0.022___enclosed###0.022___http!://www.perl.com/cpan/authors/id/tomc/scripts/pull_quotes.gz###0.022___elaborate###0.020___bizarre###0.020___braces###0.020___subs###0.020___experimental###0.018___mathematical###0.018___features###0.017___eolan###0.017___nested###0.017___enough###0.017___pull_out###0.017___techniques###0.017___chars###0.017___parse###0.017___feature###0.017___parentheses###0.017___exception###0.016___possibly###0.015___internal###0.015___they_are###0.015___matching###0.015___ascii###0.014___eol###0.014___releases###0.014___although###0.014___perl###0.014___subroutine###0.013___aren't###0.013___single###0.013___possible###0.013___match###0.013___such_as###0.013___contains###0.012___found###0.011___for_example###0.010___need###0.009___eolthe###0.009___cpan###0.007___module###0.007___
185:210###0.12,196###0.11,182###0.11,175###0.11,199###0.09,177###0.09,183###0.08,192###0.08,179###0.08,86###0.07:What does it mean that regexes are greedy? How can I get around it?   EOL EOL:Most people mean that greedy regexes match as much as they can. Technically speaking, it's actually the quantifiers (?, *, +, {}) that are greedy rather than the whole pattern; Perl prefers local greed and immediate gratification to overall greed. To get non-greedy versions of the same quantifiers, use (??, *?, +?, {}?). EOL EOLAn example!: EOL EOL        $s1 = $s2 = "I am very very cold"; EOL        $s1 =~ s/ve.*y //;      # I am cold EOL        $s2 =~ s/ve.*?y //;     # I am very cold  EOL EOLNotice how the second substitution stopped matching as soon as it encountered "y ". The *? quantifier effectively tells the regular expression engine to find a match as quickly as possible and pass control on to whatever is next in line, like you would if you were playing hot potato. EOL EOL::what###0.50000___how###0.50000:what does###0.50000___how can###0.50000:greedy###0.057___cold###0.050___i_am###0.050___greed###0.038___s/ve###0.038___quantifiers###0.038___regexes###0.029___match###0.021___mean###0.021___eol###0.020___hot_potato###0.019___non-greedy###0.019___gratification###0.019___in_line###0.019___overall###0.019___quantifier###0.019___as_soon_as###0.016___prefers###0.016___effectively###0.016___speaking###0.016___stopped###0.016___immediate###0.016___encountered###0.016___as_much_as###0.016___on_to###0.015___playing###0.015___technically###0.015___rather_than###0.014___eolnotice###0.014___engine###0.014___quickly###0.014___eolan###0.014___substitution###0.014___get_around###0.014___tells###0.014___you_would###0.014___pass###0.013___next###0.012___matching###0.012___whole###0.012___control###0.012___whatever###0.012___second###0.011___actually###0.011___versions###0.011___possible###0.011___people###0.010___pattern###0.010___expression###0.010___local###0.009___find###0.009___regular###0.009___example###0.009___it's###0.007___perl###0.003___
186:187###0.38,93###0.25,175###0.18,183###0.18,199###0.18,112###0.16,177###0.16,205###0.16,190###0.15,210###0.15:How do I process each word on each line?  EOL EOL:Use the split function!: EOL EOL    while (<>) { EOLforeach $word ( split ) { EOL    # do something with $word here EOL} EOL    }  EOL EOLNote that this isn't really a word in the English sense; it's just chunks of consecutive non-whitespace characters. EOL EOLTo work with only alphanumeric sequences (including underscores), you might consider EOL EOL    while (<>) { EOLforeach $word (m/(\w+)/g) { EOL    # do something with $word here EOL} EOL    }  EOL EOL:change_of_location###0.00166___depression###0.00166___playacting###0.00166___boundary###0.00166___paper_currency###0.00166___scope###0.00166___communication###0.00166___homicide###0.00166___communication_channel###0.01327___spoken_language###0.00166___layer###0.00166___occupation###0.01327___collection###0.00166___water###0.00166___nutrition###0.00166___origin###0.01327___reasoning###0.00166___sacred_writing###0.00166___liberation###0.00166___job###0.01327___bodily_fluid###0.00166___applications_programme###0.00166___performing###0.00166___time_period###0.00166___angular_shape###0.00166___logical_argument###0.01327___promise###0.00166___freeing###0.00166___vexation###0.00166___arcanum###0.00166___quality###0.00166___repartee###0.00166___course###0.01327___differentiation###0.00166___hereditary_pattern###0.00166___genealogy###0.00166___telecasting###0.00166___hero###0.00166___folding_money###0.00166___disposition###0.00166___acting###0.00166___line###0.02653___linear_unit###0.00166___voice_communication###0.00166___medium###0.00166___secret###0.00166___commerce###0.00166___series###0.00166___side###0.00166___victuals###0.00166___angularity###0.00166___pedagogy###0.00166___humour###0.00166___target###0.00166___obligation###0.00166___lineage###0.00166___trench###0.00166___sector###0.00166___seam###0.01327___rounder###0.00166___Holy_Writ###0.01327___action###0.00166___move###0.00166___body_of_water###0.00166___motion###0.00166___speech###0.00166___Logos###0.01327___orbit###0.00166___religious_text###0.00166___hypostasis###0.00166___traveling###0.00166___business_activity###0.00166___programme###0.00166___melody###0.01327___impression###0.00166___breed###0.00166___unfortunate_person###0.00166___argumentation###0.01327___written_account###0.00166___cable###0.01327___imprint###0.00166___Book###0.01327___assemblage###0.00166___teaching###0.00166___enchiridion###0.00166___dramatic_work###0.00166___responsibility###0.00166___mercantilism###0.00166___intelligence###0.01327___debauchee###0.00166___getting###0.00166___contrast###0.01327___crinkle###0.01327___parentage###0.01327___program###0.00166___enterprise###0.00166___tv_station###0.00166___administrative_unit###0.00166___travel###0.00166___compass###0.00166___wind###0.00166___video###0.00166___body_fluid###0.00166___parole###0.01327___tone###0.00166___direction###0.00166___man-child###0.00166___element###0.00166___spoken_communication###0.00166___music###0.00166___travelling###0.00166___furrow###0.01327___strain###0.00166___comparing###0.00166___Bible###0.01327___execution###0.00166___bounds###0.00166___opposition###0.00166___part###0.00166___point###0.00166___certificate_of_indebtedness###0.00166___demarcation###0.01327___passage###0.00166___slope###0.00166___ambit###0.00166___info###0.00166___debt_instrument###0.00166___record###0.00166___descent###0.01327___intersection###0.00166___note###0.01327___filiation###0.00166___humor###0.00166___object###0.00166___family_relationship###0.00166___visual_perception###0.00166___conductor###0.00166___application###0.00166___period_of_time###0.00166___beholding###0.00166___ancestry###0.01327___aura###0.00166___religious_writing###0.00166___male_offspring###0.00166___oral_communication###0.00166___headache###0.00166___interaction###0.00166___production###0.00166___tidings###0.01327___business###0.01327___nutriment###0.00166___tune###0.01327___power###0.00166___telegram###0.00166___section###0.00166___melodic_phrase###0.01327___marketing###0.00166___passageway###0.00166___stratum###0.00166___interest###0.00166___comparison###0.00166___information###0.00166___book###0.00166___accumulation###0.00166___reach###0.00166___signature###0.00166___gas###0.00166___workplace###0.00166___inheritance###0.00166___blood###0.01327___television_station###0.00166___beginning###0.00166___movement###0.00166___speech_communication###0.00166___fact###0.00166___crease###0.01327___sacred_text###0.00166___aliment###0.00166___variety###0.00166___joint###0.00166___education###0.00166___wire###0.00166___robbery###0.00166___Son###0.01327___educational_activity###0.00166___musical_perception###0.00166___discussion###0.01327___comment###0.00166___murder###0.00166___region###0.00166___stock###0.00166___high_status###0.00166___pedigree###0.01327___derivation###0.00166___incline###0.00166___way###0.00166___aggregation###0.00166___nourishment###0.00166___distinction###0.00166___abstract_thought###0.00166___adulthood###0.00166___dramatic_composition###0.00166___give-and-take###0.01327___paper_money###0.00166___concern###0.00166___commercial_activity###0.00166___relationship###0.00166___installation###0.00166___language###0.00166___commercialism###0.00166___instruction###0.00166___libertine###0.00166___alimentation###0.00166___kinship###0.00166___handbook###0.00166___rope###0.00166___slaying###0.00166___Good_Book###0.01327___temperament###0.00166___seeing###0.00166___activity###0.00166___personal_letter###0.00166___news###0.01327___playing###0.00166___interestingness###0.00166___subdivision###0.00166___Scripture###0.01327___sustenance###0.00166___commentary###0.00166___word###0.02653___television###0.00166___objective###0.00166___publication###0.00166___work###0.00166___written_record###0.00166___acquiring###0.00166___logical_thinking###0.00166___atmosphere###0.00166___broadcast###0.00166___range###0.00166___countersign###0.01327___tone_of_voice###0.00166___difficulty###0.00166___bound###0.00166___vade_mecum###0.00166___Holy_Scripture###0.01327___oppositeness###0.00166___information_gathering###0.00166___duty###0.00166___liquid_body_substance###0.00166___family_tree###0.00166___wrinkle###0.01327___musical_notation###0.00166___unfortunate###0.00166___release###0.00166___worry###0.00166___channel###0.01327___short_letter###0.01327___transmission###0.00166___ability###0.00166___tv###0.00166___application_program###0.00166___communicating###0.00166___product###0.00166___television_system###0.00166___aim###0.00166___air###0.01327___period###0.00166___administrative_body###0.00166___social_control###0.00166___people###0.00166___facility###0.00166:how###1.00000:how do###1.00000:word###0.162___eolforeach###0.079___eol###0.077___split###0.061___underscores###0.044___alphanumeric###0.044___consecutive###0.039___chunks###0.039___sequences###0.039___something###0.038___non-whitespace###0.036___sense###0.034___english###0.034___consider###0.027___eolnote###0.026___including###0.026___process###0.025___eolto###0.024___characters###0.022___isn't###0.020___really###0.020___line###0.020___work###0.019___it's###0.017___function###0.016___
187:186###0.38,127###0.35,92###0.25,91###0.20,118###0.19,199###0.19,93###0.19,175###0.19,122###0.18,177###0.18:How can I print out a word-frequency or line-frequency summary?   EOL EOL:To do this, you have to parse out each word in the input stream. We'll pretend that by word you mean chunk of alphabetics, hyphens, or apostrophes, rather than the non-whitespace chunk idea of a word given in the previous question!: EOL EOL    while (<>) { EOLwhile ( /(\b[^\W_\d][\w'-]+\b)/g ) {   # misses "`sheep'" EOL    $seen{$1}++; EOL} EOL    } EOL    while ( ($word, $count) = each %seen ) { EOLprint "$count $word\n"; EOL    }  EOL EOLIf you wanted to do the same thing for lines, you wouldn't need a regular expression!: EOL EOL    while (<>) { EOL$seen{$_}++; EOL    } EOL    while ( ($line, $count) = each %seen ) { EOLprint "$count $line"; EOL    }  EOL EOLIf you want these output in a sorted order, see perlfaq4!: ``How do I sort a hash (optionally by value instead of key)?''. EOL EOL::how###1.00000:how can###1.00000:seen###0.071___word###0.070___count###0.057___eol###0.047___chunk###0.040___eolprint###0.027___hyphens###0.022___perlfaq4###0.022___alphabetics###0.022___apostrophes###0.022___word-frequency###0.022___line-frequency###0.022___previous_question###0.022___sheep###0.022___misses###0.022___line###0.020___wouldn't###0.020___non-whitespace###0.019___optionally###0.019___pretend###0.019___stream###0.019___summary###0.019___eolwhile###0.017___rather_than###0.017___parse###0.017___idea###0.016___we'll###0.016___sort###0.015___order###0.015___sorted###0.015___eolif###0.015___wanted###0.015___key###0.014___input###0.013___mean###0.013___thing###0.013___output###0.012___expression###0.012___given###0.012___instead_of###0.012___lines###0.011___value###0.011___regular###0.011___hash###0.010___you_have###0.009___need###0.009___print###0.008___
188:183###0.18,266###0.17,90###0.16,95###0.16,71###0.15,205###0.15,295###0.15,92###0.14,217###0.14,98###0.13:How can I do approximate matching?  EOL EOL:See the module String!:!:Approx available from CPAN. EOL EOL::how###1.00000:how can###1.00000:approximate###0.223___approx###0.199___matching###0.150___eol###0.097___available###0.097___string###0.086___cpan###0.075___module###0.070___
189:175###0.25,177###0.25,93###0.23,141###0.23,178###0.19,199###0.18,183###0.17,101###0.17,163###0.16,205###0.16:How do I efficiently match many regular expressions at once?  EOL EOL:The following is extremely inefficient!: EOL EOL    # slow but obvious way EOL    @popstates = qw(CO ON MI WI MN); EOL    while (defined($line = <>)) { EOLfor $state (@popstates) { EOL    if ($line =~ /\b$state\b/i) {  EOLprint $line; EOLlast; EOL    } EOL} EOL    }                                          EOL EOLThat's because Perl has to recompile all those patterns for each of the lines of the file. As of the 5.005 release, there's a much better approach, one which makes use of the new qr// operator!: EOL EOL    # use spiffy new qr// operator, with /i flag even EOL    use 5.005; EOL    @popstates = qw(CO ON MI WI MN); EOL    @poppats   = map { qr/\b$_\b/i } @popstates; EOL    while (defined($line = <>)) { EOLfor $patobj (@poppats) { EOL    print $line if $line =~ /$patobj/; EOL} EOL    }  EOL EOL:squeezing###0.00457___transformation###0.00457___communication###0.00457___appearance###0.00457___spoken_language###0.00457___protest###0.00457___chemical_compound###0.00457___thinking###0.00457___indicant###0.00457___sensing###0.00457___grammatical_constituent###0.00457___countenance###0.00457___grappling###0.00457___mathematical_statement###0.00457___perception###0.00457___position###0.00457___alikeness###0.00457___likeness###0.00457___voice_communication###0.00457___image###0.00457___style###0.00457___construction###0.03653___physical_phenomenon###0.00457___compound###0.00457___ambience###0.00457___speech###0.00457___reflection###0.03653___procedure###0.00457___grammatical_construction###0.03653___statement###0.00457___demo###0.00457___aspect###0.03653___artefact###0.00457___constituent###0.00457___mathematical_operation###0.00457___objection###0.00457___vertical_surface###0.00457___practice###0.00457___status###0.00457___direction###0.00457___mentation###0.00457___spoken_communication###0.00457___look###0.03653___dissent###0.00457___front###0.00457___cerebration###0.00457___milk###0.00457___type###0.00457___locution###0.03653___soul###0.00457___ikon###0.00457___biological_process###0.00457___commercial_enterprise###0.00457___aggressiveness###0.00457___facial_expression###0.00457___indication###0.00457___visage###0.00457___operation###0.00457___process###0.00457___tackling###0.00457___oral_communication###0.00457___consideration###0.00457___surface###0.00457___feature###0.00457___business###0.00457___human###0.00457___similitude###0.00457___squeeze###0.00457___manifestation###0.03653___face###0.03653___reflexion###0.03653___visual_image###0.00457___intellection###0.00457___speech_communication###0.00457___remark###0.00457___mathematical_process###0.00457___characteristic###0.00457___expressive_style###0.00457___comment###0.00457___mortal###0.00457___creating_by_mental_acts###0.00457___ambiance###0.00457___somebody###0.00457___someone###0.00457___formulation###0.03653___formula###0.03653___instruction###0.00457___language###0.00457___braving###0.00457___interpretation###0.00457___expressions###0.07306___external_body_part###0.00457___facial_gesture###0.00457___atmosphere###0.00457___grammatical_relation###0.00457___artifact###0.00457___picture###0.00457___individual###0.00457___demonstration###0.00457___thought###0.00457___saying###0.03653___person###0.00457___expression###0.03653___coping_with###0.00457___creating_from_raw_materials###0.00457___icon###0.00457___visual_aspect###0.00457___communicating###0.00457___visual_percept###0.00457___physical_property###0.00457___confronting###0.00457___organic_process###0.00457___business_enterprise###0.00457:how###1.00000:how do###1.00000:popstates###0.102___line###0.070___eol###0.061___poppats###0.051___patobj###0.051___b/i###0.051___state###0.036___operator###0.029___defined###0.027___eolfor###0.026___recompile###0.025___spiffy###0.025___obvious###0.022___eollast###0.022___inefficient###0.022___efficiently###0.021___eolthat's###0.021___new###0.020___flag###0.020___extremely###0.020___patterns###0.019___map###0.018___at_once###0.018___slow###0.017___eolprint###0.015___expressions###0.014___match###0.014___better###0.014___there's###0.014___makes###0.013___release###0.013___lines###0.013___approach###0.013___following###0.012___regular###0.012___even###0.012___print###0.009___file###0.009___one###0.008___perl###0.005___
190:175###0.18,186###0.15,176###0.15,93###0.14,95###0.12,100###0.12,101###0.12,196###0.12,183###0.11,210###0.11:Why don't word-boundary searches with \b work for me?  EOL EOL:Two common misconceptions are that \b is a synonym for \s+ and that it's the edge between whitespace characters and non-whitespace characters. Neither is correct. \b is the place between a \w character and a \W character (that is, \b is the edge of a "word"). It's a zero-width assertion, just like ^, $, and all the other anchors, so it doesn't consume any characters. perlre describes the behavior of all the regex metacharacters. EOL EOLHere are examples of the incorrect application of \b, with fixes!: EOL EOL    "two words" =~ /(\w+)\b(\w+)/;    # WRONG EOL    "two words" =~ /(\w+)\s+(\w+)/;    # right EOL EOL    " =matchless= text" =~ /\b=(\w+)=\b/;   # WRONG EOL    " =matchless= text" =~ /=(\w+)=/;       # right  EOL EOLAlthough they may not do what you thought they did, \b and \B can still be quite useful. For an example of the correct use of \b, see the example of matching duplicate words over multiple lines. EOL EOLAn example of using \B is the pattern \Bis\B. This will find occurrences of "is" on the insides of words only, as in "thistle", but not "this" or "island". EOL EOL:outdoor_sport###0.01667___hunting###0.13333___toil###0.01667___labour###0.01667___gild###0.01667___lookup###0.13333___labor###0.01667___search###0.01667___order###0.01667___searches###0.26667___society###0.01667___lodge###0.01667___author###0.01667___operation###0.01667___pre-raphaelite###0.01667___architect###0.01667___bloodsport###0.01667___club###0.01667___activity###0.01667___guild###0.01667___field_sport###0.01667___writer###0.01667___hunt###0.13333___designer###0.01667:why###1.00000:why don't###1.00000:words###0.049___matchless###0.036___edge###0.032___characters###0.028___example###0.026___eol###0.025___two###0.025___correct###0.022___all_the###0.022___right###0.021___character###0.020___wrong###0.020___consume###0.018___bis###0.018___insides###0.018___synonym###0.018___thistle###0.018___word-boundary###0.018___zero-width###0.018___island###0.018___assertion###0.018___misconceptions###0.018___text###0.017___metacharacters###0.016___anchors###0.016___incorrect###0.016___searches###0.016___thought###0.016___non-whitespace###0.015___describes###0.015___occurrences###0.015___fixes###0.015___eolalthough###0.014___perlre###0.014___eolan###0.014___it's###0.014___duplicate###0.013___eolhere###0.013___multiple###0.013___application###0.013___whitespace###0.013___common###0.012___matching###0.012___quite###0.012___regex###0.011___neither###0.011___behavior###0.011___useful###0.011___may_not###0.011___word###0.011___place###0.010___examples###0.010___pattern###0.010___that_is###0.010___lines###0.009___find###0.008___work###0.008___why###0.007___doesn't###0.007___don't###0.007___using###0.006___
191:182###0.14,196###0.11,181###0.10,210###0.10,175###0.09,12###0.09,223###0.08,113###0.08,250###0.08,221###0.07:Why does using $&, $`, or $' slow my program down?  EOL EOL:Once Perl sees that you need one of these variables anywhere in the program, it provides them on each and every pattern match. The same mechanism that handles these provides for the use of $1, $2, etc., so you pay the same price for each regex that contains capturing parentheses. If you never use $&, etc., in your script, then regexes without capturing parentheses won't be penalized. So avoid $&, $', and $` if you can, but if you can't, once you've used them at all, use them at will because you've already paid the price. Remember that some algorithms really appreciate them. As of the 5.005 release. the $& variable is no longer "expensive" the way the other two are. EOL EOL:organisation###0.00990___platform###0.07921___papers###0.00990___adps###0.00990___pedagogy###0.00990___construction###0.00990___message###0.00990___teaching###0.00990___program###0.15842___curriculum###0.07921___system###0.00990___plan###0.07921___idea###0.00990___info###0.00990___structure###0.00990___information###0.00990___adp_system###0.00990___written_document###0.00990___education###0.00990___computer_system###0.00990___educational_activity###0.00990___organization###0.00990___political_platform###0.07921___syllabus###0.07921___shoe###0.00990___horizontal_surface###0.00990___computing_system###0.00990___instruction###0.00990___arrangement###0.00990___show###0.00990___drawing###0.00990___broadcast###0.07921___document###0.00990___course_of_study###0.07921___automatic_data_processing_system###0.00990___thought###0.00990___level###0.00990:why###1.00000:why does###1.00000:price###0.054___capturing###0.048___parentheses###0.040___etc.###0.035___you've###0.034___once###0.033___provides###0.031___expensive###0.027___sees###0.027___appreciate###0.027___paid###0.027___pay###0.027___at_will###0.027___penalized###0.027___algorithms###0.021___handles###0.021___regexes###0.021___anywhere###0.021___mechanism###0.021___at_all###0.020___down###0.020___no_longer###0.019___program###0.019___remember###0.018___slow###0.018___regex###0.017___every###0.017___match###0.015___avoid###0.015___pattern###0.015___already###0.015___contains###0.015___variables###0.014___script###0.014___won't###0.014___release###0.014___without###0.013___really###0.012___used###0.012___variable###0.012___two###0.012___eol###0.011___why###0.011___need###0.011___can't###0.011___using###0.009___one###0.008___perl###0.005___
192:183###0.21,175###0.19,86###0.17,182###0.16,221###0.16,101###0.15,181###0.15,210###0.15,196###0.15,187###0.15:What good is \G in a regular expression?  EOL EOL:The notation \G is used in a match or substitution in conjunction with the /g modifier to anchor the regular expression to the point just past where the last match occurred, i.e. the pos() point. A failed match resets the position of \G unless the /c modifier is in effect. \G can be used in a match without the /g modifier; it acts the same (i.e. still anchors at the pos() point) but of course only matches once and does not update pos(), as non-/g expressions never do. \G in an expression applied to a target string that has never been matched against a /g expression before or has had its pos() reset is functionally equivalent to \A, which matches at the beginning of the string. EOL EOLFor example, suppose you had a line of text quoted in standard mail and Usenet notation, (that is, with leading > characters), and you want change each leading > into a corresponding !:. You could do so in this way!: EOL EOL     s/^(>+)/'!:' x length($1)/gem;  EOL EOLOr, using \G, the much simpler (and faster)!: EOL EOL    s/\G>/!:/g;  EOL EOLA more sophisticated use might involve a tokenizer. The following lex-like example is courtesy of Jeffrey Friedl. It did not work in 5.003 due to bugs in that release, but does work in 5.004 or better. (Note the use of /c, which prevents a failed match with /g from resetting the search position back to the beginning of the string.) EOL EOL    while (<>) { EOL      chomp; EOL      PARSER!: { EOL           m/ \G( \d+\b    )/gcx    && do { print "number!: $1\n";  redo; }; EOL           m/ \G( \w+      )/gcx    && do { print "word!:   $1\n";  redo; }; EOL           m/ \G( \s+      )/gcx    && do { print "space!:  $1\n";  redo; }; EOL           m/ \G( [^\w\d]+ )/gcx    && do { print "other!:  $1\n";  redo; }; EOL      } EOL    }  EOL EOLOf course, that could have been written as EOL EOL    while (<>) { EOL      chomp; EOL      PARSER!: { EOL   if ( /\G( \d+\b    )/gcx  { EOLprint "number!: $1\n"; EOLredo PARSER; EOL   } EOL   if ( /\G( \w+      )/gcx  { EOLprint "word!: $1\n"; EOLredo PARSER; EOL   } EOL   if ( /\G( \s+      )/gcx  { EOLprint "space!: $1\n"; EOLredo PARSER; EOL   } EOL   if ( /\G( [^\w\d]+ )/gcx  { EOLprint "other!: $1\n"; EOLredo PARSER; EOL   } EOL      } EOL    }  EOL EOLbut then you lose the vertical alignment of the regular expressions. EOL EOL:piece_of_ground###0.00329___transformation###0.00329___appearance###0.00329___spoken_language###0.00329___protest###0.00329___chemical_compound###0.00329___thinking###0.00329___volume_unit###0.00329___indicant###0.00329___sensing###0.00329___grammatical_constituent###0.00329___countenance###0.00329___grappling###0.00329___mathematical_statement###0.00329___perception###0.00329___position###0.00329___alikeness###0.00329___one_thousand###0.02632___thou###0.02632___K###0.02632___M###0.02632___likeness###0.00329___linear_unit###0.00329___voice_communication###0.00329___image###0.00329___style###0.00329___g###0.05263___construction###0.02632___physical_phenomenon###0.00329___compound###0.00329___ambience###0.00329___cubic_content_unit###0.00329___speech###0.00329___procedure###0.00329___reflection###0.02632___grammatical_construction###0.02632___statement###0.00329___demo###0.00329___large_integer###0.00329___aspect###0.02632___artefact###0.00329___constituent###0.00329___mathematical_operation###0.00329___spar###0.00329___vertical_surface###0.00329___objection###0.00329___cubage_unit###0.00329___practice###0.00329___status###0.00329___direction###0.00329___mentation###0.00329___spoken_communication###0.00329___dissent###0.00329___look###0.02632___front###0.00329___cerebration###0.00329___capacity_measure###0.00329___letter###0.00329___milk###0.00329___parcel_of_land###0.00329___type###0.00329___alphabetic_character###0.00329___locution###0.02632___computer_memory_unit###0.00329___displacement_unit###0.00329___soul###0.00329___ikon###0.00329___commercial_enterprise###0.00329___aggressiveness###0.00329___facial_expression###0.00329___cubature_unit###0.00329___indication###0.00329___visage###0.00329___temperature_unit###0.00329___operation###0.00329___process###0.00329___oral_communication###0.00329___tackling###0.00329___consideration###0.00329___surface###0.00329___feature###0.00329___business###0.00329___cubic_measure###0.00329___human###0.00329___similitude###0.00329___manifestation###0.02632___metallic_element###0.00329___face###0.02632___metric_linear_unit###0.00329___reflexion###0.02632___visual_image###0.00329___intellection###0.00329___speech_communication###0.00329___remark###0.00329___parcel###0.00329___mathematical_process###0.00329___characteristic###0.00329___expressive_style###0.00329___comment###0.00329___mortal###0.00329___thousand###0.02632___creating_by_mental_acts###0.00329___ambiance###0.00329___concentration###0.00329___somebody###0.00329___someone###0.00329___formulation###0.02632___formula###0.02632___instruction###0.00329___language###0.00329___braving###0.00329___interpretation###0.00329___external_body_part###0.00329___facial_gesture###0.00329___atmosphere###0.00329___grammatical_relation###0.00329___tract###0.00329___artifact###0.00329___yard###0.02632___capacity_unit###0.00329___field###0.00329___picture###0.00329___letter_of_the_alphabet###0.00329___individual###0.00329___demonstration###0.00329___thought###0.00329___saying###0.02632___piece_of_land###0.00329___expression###0.05263___person###0.00329___coping_with###0.00329___creating_from_raw_materials###0.00329___icon###0.00329___visual_aspect###0.00329___visual_percept###0.00329___metal###0.00329___physical_property###0.00329___confronting###0.00329___enclosure###0.00329___business_enterprise###0.00329___chiliad###0.02632:what###1.00000:what good###1.00000:gcx###0.069___parser###0.034___eol###0.034___eolredo###0.034___redo###0.034___pos###0.030___match###0.024___eolprint###0.020___modifier###0.019___expression###0.019___chomp###0.013___position###0.013___notation###0.013___beginning###0.013___work_in###0.013___failed###0.012___matches###0.012___regular###0.012___print###0.012___i.e.###0.012___point###0.012___leading###0.012___space###0.011___word###0.010___string###0.010___expressions###0.009___vertical###0.008___lex-like###0.008___alignment###0.008___occurred###0.008___in_effect###0.008___tokenizer###0.008___to_the_point###0.008___anchor###0.008___resetting###0.008___functionally###0.008___gem###0.008___matched###0.008___past###0.008___example###0.008___used###0.008___number###0.007___involve###0.007___did_not###0.007___simpler###0.007___anchors###0.007___suppose###0.007___acts###0.007___applied###0.007___course###0.007___lose###0.007___resets###0.007___sophisticated###0.007___target###0.007___corresponding###0.006___usenet###0.006___eolof###0.006___non###0.006___in_conjunction_with###0.006___substitution###0.006___reset###0.006___due_to###0.006___prevents###0.006___courtesy###0.006___bugs###0.006___quoted###0.006___update###0.006___in_that###0.006___against###0.006___search###0.006___back###0.005___jeffrey###0.005___friedl###0.005___equivalent###0.005___eolbut###0.005___length###0.005___of_course###0.005___mail###0.005___note###0.005___eola###0.005___once###0.005___faster###0.005___unless###0.005___does_not###0.005___in_this###0.005___good###0.004___last###0.004___better###0.004___that_is###0.004___change###0.004___release###0.004___eolfor###0.004___characters###0.004___without###0.004___written###0.004___following###0.004___text###0.004___eolor###0.004___line###0.003___standard###0.003___using###0.002___
193:184###0.10,210###0.09,182###0.08,175###0.07,183###0.07,124###0.05,192###0.05,134###0.05,198###0.05,94###0.05:Are Perl regexes DFAs or NFAs? Are they POSIX compliant?  EOL EOL:While it's true that Perl's regular expressions resemble the DFAs (deterministic finite automata) of the egrep(1) program, they are in fact implemented as NFAs (non-deterministic finite automata) to allow backtracking and backreferencing. And they aren't POSIX-style either, because those guarantee worst-case behavior for all cases. (It seems that some people prefer guarantees of consistency, even when what's guaranteed is slowness.) See the book "Mastering Regular Expressions" (from O'Reilly) by Jeffrey Friedl for all the details you could ever hope to know on these matters (a full citation appears in perlfaq2). EOL EOL::::automata###0.043___dfas###0.043___nfas###0.043___finite###0.038___expressions###0.024___backtracking###0.021___seems###0.021___slowness###0.021___egrep###0.021___consistency###0.021___worst-case###0.021___backreferencing###0.021___non-deterministic###0.021___posix-style###0.021___resemble###0.021___regular###0.021___appears###0.019___deterministic###0.019___citation###0.019___compliant###0.019___implemented###0.019___mastering###0.017___guaranteed###0.017___guarantees###0.017___perlfaq2###0.017___regexes###0.016___full###0.016___matters###0.016___even_when###0.016___guarantee###0.015___o'reilly###0.015___ever###0.015___hope###0.015___allow###0.014___in_fact###0.014___they_are###0.014___friedl###0.014___jeffrey###0.014___prefer###0.013___behavior###0.013___book###0.013___true###0.013___all_the###0.013___aren't###0.013___people###0.012___know###0.012___what's###0.012___posix###0.011___cases###0.011___perl's###0.011___either###0.010___details###0.010___eol###0.009___it's###0.008___program###0.007___perl###0.004___
194:251###0.23,102###0.20,104###0.16,85###0.16,38###0.15,200###0.14,72###0.13,153###0.12,214###0.11,28###0.10:What's wrong with using grep or map in a void context?  EOL EOL:Both grep and map build a return list, regardless of their context. This means you're making Perl go to the trouble of building up a return list that you then just ignore. That's no way to treat a programming language, you insensitive scoundrel!! EOL EOL:mathematical_function###0.02703___compatibility###0.02703___proportion###0.02703___correspondence###0.21622___proportionality###0.02703___first-class_mail###0.02703___written_language###0.02703___similarity###0.02703___first_class###0.02703___spatiality###0.02703___spatial_property###0.02703___map###0.43243___function###0.02703___priority_mail###0.02703___written_communication###0.02703:what###1.00000:what's wrong###1.00000:grep###0.077___map###0.074___context###0.060___insensitive###0.051___scoundrel###0.051___return###0.048___list###0.046___ignore###0.046___regardless_of###0.042___go_to###0.042___trouble###0.042___void###0.040___building###0.038___treat###0.038___making###0.038___build###0.037___programming_language###0.035___what's###0.029___means###0.028___wrong###0.028___that's###0.027___eol###0.022___you're###0.018___using###0.017___perl###0.010___
195:183###0.15,165###0.12,175###0.11,92###0.11,190###0.11,59###0.10,58###0.10,95###0.10,210###0.10,101###0.10:How can I match strings with multibyte characters?  EOL EOL:This is hard, and there's no good way. Perl does not directly support wide characters. It pretends that a byte and a character are synonymous. The following set of approaches was offered by Jeffrey Friedl, whose article in issue #5 of The Perl Journal talks about this very matter. EOL EOLLet's suppose you have some weird Martian encoding where pairs of ASCII uppercase letters encode single Martian letters (i.e. the two bytes "CV" make a single Martian letter, as do the two bytes "SG", "VS", "XX", etc.). Other bytes represent single characters, just like ASCII. EOL EOLSo, the string of Martian "I am CVSGXX!!" uses 12 bytes to encode the nine characters 'I', ' ', 'a', 'm', ' ', 'CV', 'SG', 'XX', '!!'. EOL EOLNow, say you want to search for the single character /GX/. Perl doesn't know about Martian, so it'll find the two bytes "GX" in the "I am CVSGXX!!" string, even though that character isn't there!: it just looks like it is because "SG" is next to "XX", but there's no real "GX". This is a big problem. EOL EOLHere are a few ways, all painful, to deal with it!: EOL EOL   $martian =~ s/([A-Z][A-Z])/ $1 /g; # Make sure adjacent ``martian'' bytes EOL                                      # are no longer adjacent. EOL   print "found GX!!\n" if $martian =~ /GX/;  EOL EOLOr like this!: EOL EOL   @chars = $martian =~ m/([A-Z][A-Z]|[^A-Z])/g; EOL   # above is conceptually similar to!:     @chars = $text =~ m/(.)/g; EOL   # EOL   foreach $char (@chars) { EOL       print "found GX!!\n", last if $char eq 'GX'; EOL   }  EOL EOLOr like this!: EOL EOL   while ($martian =~ m/\G([A-Z][A-Z]|.)/gs) {  # \G probably unneeded EOL       print "found GX!!\n", last if $1 eq 'GX'; EOL   }  EOL EOLOr like this!: EOL EOL    die "sorry, Perl doesn't (yet) have Martian support )-!:\n";  EOL EOLThere are many double- (and multi-) byte encodings commonly used these days. Some versions of these have 1-, 2-, 3-, and 4-byte characters, all mixed. EOL EOL:pattern###0.00667___twine###0.05333___linguistic_communication###0.00667___collection###0.00667___shore###0.00667___drawstring###0.05333___ligament###0.00667___drawing_string###0.05333___business_organization###0.00667___cord###0.00667___line###0.00667___linear_unit###0.00667___series###0.00667___shape###0.00667___train###0.05333___string_of_words###0.05333___string###0.05333___unit###0.00667___constraint###0.00667___geological_formation###0.00667___form###0.00667___piece_of_material###0.00667___assemblage###0.00667___word_string###0.05333___trammel###0.00667___stringed_instrument###0.00667___business_organisation###0.00667___bond###0.00667___consequence###0.00667___linguistic_string###0.05333___business###0.00667___strings###0.10667___piece_of_cloth###0.00667___aftermath###0.00667___accumulation###0.00667___tie###0.00667___chain###0.05333___hamper###0.00667___bowed_stringed_instrument###0.05333___fibre###0.00667___wheelwork###0.00667___biochemist###0.00667___aggregation###0.00667___public_transport###0.00667___business_concern###0.00667___strand###0.05333___building_block###0.00667___concern###0.00667___language###0.00667___shackle###0.00667___procession###0.00667___restraint###0.00667___fiber###0.00667___formation###0.00667___geology###0.00667___street###0.00667___trammels###0.00667___necklace###0.00667:how###1.00000:how can###1.00000:martian###0.098___a-z###0.062___bytes###0.036___eol###0.028___characters###0.023___single###0.021___chars###0.020___cvsgxx###0.017___adjacent###0.015___i_am###0.015___character###0.015___encode###0.014___letters###0.014___found###0.014___char###0.013___eolor###0.012___two###0.012___byte###0.011___ascii###0.011___support###0.009___last###0.009___there's###0.009___print###0.009___pretends###0.008___article###0.008___synonymous###0.008___unneeded###0.008___commonly###0.008___uppercase###0.008___eollet's###0.008___mixed###0.008___multi###0.008___nine###0.008___conceptually###0.008___painful###0.008___sorry###0.007___multibyte###0.007___wide###0.007___weird###0.007___offered###0.007___next_to###0.007___encodings###0.007___talks###0.007___journal###0.007___it'll###0.007___suppose###0.007___represent###0.007___approaches###0.007___even_though###0.007___perl###0.007___letter###0.006___pairs###0.006___similar###0.006___eolso###0.006___encoding###0.006___doesn't###0.006___string###0.006___days###0.006___looks###0.006___whose###0.006___matter###0.006___no_longer###0.006___i.e.###0.006___eolhere###0.006___deal###0.006___search###0.006___a_few###0.006___friedl###0.006___double###0.006___jeffrey###0.006___eolnow###0.005___etc.###0.005___eolthere###0.005___issue###0.005___hard###0.005___directly###0.005___foreach###0.005___real###0.005___make_sure###0.005___versions###0.005___ways###0.005___does_not###0.005___match###0.005___uses###0.005___good###0.005___say###0.005___know###0.005___above###0.004___strings###0.004___problem###0.004___set###0.004___following###0.004___find###0.004___text###0.004___isn't###0.004___used###0.004___die###0.003___you_have###0.003___probably###0.003___
196:175###0.27,163###0.27,182###0.27,177###0.26,149###0.23,141###0.21,70###0.19,183###0.17,90###0.17,210###0.17:How do I match a pattern that is supplied by the user?  EOL EOL:Well, if it's really a pattern, then just use EOL EOL    chomp($pattern = <STDIN>); EOL    if ($line =~ /$pattern/) { }  EOL EOLAlternatively, since you have no guarantee that your user entered a valid regular expression, trap the exception this way!: EOL EOL    if (eval { $line =~ /$pattern/ }) { }  EOL EOLIf all you really want to search for a string, not a pattern, then you should either use the index() function, which is made for string searching, or if you can't be disabused of using a pattern match on a non-pattern, then be sure to use \Q...\E, documented in perlre. EOL EOL    $pattern = <STDIN>; EOL EOL    open (FILE, $input) or die "Couldn't open input $input!: $!!; aborting"; EOL    while (<FILE>) { EOLprint if /\Q$pattern\E/; EOL    } EOL    close FILE;  EOL EOL:pattern###0.08466___orthodoxy###0.00529___dominance###0.00529___exploiter###0.04233___organisation###0.00529___effect###0.00529___measuring_rod###0.00529___end###0.00529___personage###0.00529___accord###0.00529___creativity###0.00529___mathematical_statement###0.00529___perception###0.00529___generalisation###0.00529___rhetorical_device###0.00529___assembly###0.00529___maneuver###0.00529___continuance###0.00529___manoeuvre###0.00529___shape###0.00529___sum###0.00529___procedure###0.00529___construct###0.00529___normal###0.04233___sum_of_money###0.00529___statement###0.00529___programme###0.00529___impression###0.00529___form###0.00529___generality###0.00529___photo###0.00529___figure###0.04233___whole_number###0.00529___assemblage###0.00529___measuring_stick###0.00529___ascendance###0.00529___illustration###0.00529___decoration###0.00529___program###0.00529___practice###0.00529___system###0.00529___ascendancy###0.00529___important_person###0.00529___direction###0.00529___milk###0.00529___plan###0.00529___graph###0.00529___design###0.04233___measure###0.00529___pact###0.00529___play###0.00529___amount_of_money###0.00529___ornamentation###0.00529___physical_structure###0.00529___process###0.00529___graphical_record###0.00529___control###0.00529___goal###0.00529___blueprint###0.04233___law###0.00529___concept###0.00529___influential_person###0.00529___rule###0.04233___organization###0.00529___photograph###0.00529___exposure###0.00529___creating_by_mental_acts###0.00529___selfish_person###0.00529___organic_structure###0.00529___formula###0.04233___instruction###0.00529___generalization###0.00529___arrangement###0.00529___creativeness###0.00529___meeting###0.00529___convention###0.04233___perceptual_experience###0.00529___pic###0.00529___simulation###0.00529___integer###0.00529___duration###0.00529___treaty###0.00529___ascendence###0.00529___body###0.00529___percept###0.00529___conception###0.00529___ascendency###0.00529___radiation_diagram###0.04233___study###0.00529___amount###0.00529___law_of_nature###0.00529___model###0.00529___user###0.08466___sketch###0.00529___ornament###0.00529___gathering###0.00529:how###1.00000:how do###1.00000:pattern###0.132___eol###0.050___input###0.045___user###0.031___match###0.029___stdin###0.028___file###0.027___disabused###0.025___non-pattern###0.025___searching###0.025___supplied###0.025___aborting###0.025___really###0.023___line###0.023___entered###0.022___valid###0.022___open###0.021___trap###0.021___made###0.021___eolalternatively###0.020___chomp###0.020___perlre###0.020___string###0.019___guarantee###0.018___exception###0.018___search###0.017___index###0.017___couldn't###0.017___eval###0.016___sure###0.016___eolprint###0.015___close###0.014___expression###0.014___that_is###0.014___either###0.012___documented###0.012___regular###0.012___die###0.011___you_have###0.011___can't###0.010___it's###0.009___function###0.009___using###0.008___eolif###0.008___
197:221###0.16,36###0.09,132###0.07,190###0.06,2###0.05,51###0.05,49###0.05,165###0.05,10###0.05,58###0.05:Can I get a BNF/yacc/RE for the Perl language?  EOL EOL:There is no BNF, but you can paw your way through the yacc grammar in perly.y in the source distribution if you're particularly brave. The grammar relies on very smart tokenizing code, so be prepared to venture into toke.c as well. EOL EOLIn the words of Chaim Frenkel!: "Perl's grammar can not be reduced to BNF. The work of parsing perl is distributed between yacc, the lexer, smoke and mirrors." EOL EOL::::grammar###0.085___bnf###0.064___yacc###0.057___bnf/yacc/re###0.032___venture###0.032___tokenizing###0.032___toke###0.032___frenkel###0.032___brave###0.032___smoke###0.032___can_not###0.032___smart###0.032___chaim###0.032___perly###0.032___lexer###0.032___paw###0.032___mirrors###0.028___parsing###0.028___reduced###0.028___prepared###0.026___relies###0.026___as_well###0.021___particularly###0.021___words###0.021___distributed###0.021___language###0.018___eol###0.017___source###0.017___eolin###0.017___perl's###0.016___work###0.014___distribution###0.013___perl###0.013___code###0.011___you're###0.011___
198:102###0.22,146###0.21,163###0.20,141###0.18,214###0.17,143###0.16,145###0.16,177###0.16,223###0.16,100###0.16:What are all these $@%&* punctuation signs, and how do I know when to use them?  EOL EOL:They are type specifiers, as detailed in perldata!: EOL EOL    $ for scalar values (number, string or reference) EOL    @ for arrays EOL    % for hashes (associative arrays) EOL    & for subroutines (aka functions, procedures, methods) EOL    * for all types of that symbol name.  In version 4 you used them like EOL      pointers, but in modern perls you can just use references.  EOL EOLThere are couple of other symbols that you're likely to encounter that aren't really type specifiers!: EOL EOL    <> are used for inputting a record from a filehandle. EOL    \  takes a reference to something.  EOL EOLNote that <FILE> is neither the type specifier for files nor the name of the handle. It is the <> operator applied to the handle FILE. It reads one line (well, record--see perlvar/$/) from the handle FILE in scalar context, or all lines in list context. When performing open, close, or any other operation besides <> on files, or even when talking about the handle, do not use the brackets. These are correct!: eof(FH), seek(FH, 0, 2) and "copying from STDIN to FILE". EOL EOL:dwelling###0.00446___general_assembly###0.00446___legislature###0.00446___phratry###0.00446___effect###0.00446___communication###0.00446___rating###0.00446___valuation###0.00446___indicant###0.00446___evaluation###0.00446___reference###0.00446___foretoken###0.03571___cue###0.00446___business_organization###0.00446___community###0.00446___star_sign###0.03571___printed_symbol###0.00446___dwelling_house###0.00446___signal###0.03571___construction###0.00446___evangelist###0.00446___victim###0.00446___management###0.00446___grounds###0.00446___augury###0.03571___sept###0.00446___motion###0.00446___symbol###0.00446___apostle###0.00446___unit###0.00446___mark###0.03571___german_monetary_unit###0.00446___gesture###0.00446___impression###0.00446___kinfolk###0.00446___sign_of_the_zodiac###0.03571___sign###0.03571___mansion###0.03571___abode###0.00446___provocation###0.00446___defect###0.00446___signboard###0.03571___opposition###0.00446___part###0.00446___play###0.00446___experience###0.00446___business_organisation###0.00446___domicile###0.00446___blemish###0.00446___language_unit###0.00446___evangel###0.00446___indication###0.00446___structure###0.00446___kinsfolk###0.00446___business###0.00446___building###0.00446___dupe###0.00446___book###0.00446___written_symbol###0.00446___mathematical_notation###0.00446___preindication###0.03571___signs###0.07143___edifice###0.00446___region###0.00446___family_line###0.00446___legislative_assembly###0.00446___evidence###0.00446___reference_point###0.00446___business_concern###0.00446___concern###0.00446___home###0.00446___success###0.00446___clew###0.00446___audience###0.00446___clue###0.00446___gospels###0.00446___marking###0.00446___social_unit###0.00446___habitation###0.00446___punctuation###0.07143___linguistic_unit###0.00446___gospel###0.00446___oppositeness###0.00446___family###0.00446___incitation###0.00446___incitement###0.00446___folk###0.00446___electrical_energy###0.00446___child's_play###0.00446___electricity###0.00446___signaling###0.03571___point_of_reference###0.00446___planetary_house###0.03571___polarity###0.03571___law-makers###0.00446___house###0.03571:what###0.33333___when###0.33333___how###0.33333:what are###0.33333___when to###0.33333___and how do###0.33333:handle###0.037___specifiers###0.032___type###0.030___eol###0.028___record###0.022___context###0.019___arrays###0.017___file###0.017___name###0.017___inputting###0.016___couple###0.016___specifier###0.016___copying###0.016___signs###0.016___brackets###0.016___encounter###0.016___procedures###0.016___scalar###0.016___files###0.016___used###0.015___aka###0.014___besides###0.014___modern###0.014___pointers###0.014___perls###0.014___and_how###0.013___punctuation###0.013___applied###0.013___symbols###0.013___talking###0.013___detailed###0.013___types###0.013___perldata###0.013___performing###0.013___associative###0.013___reads###0.012___reference_to###0.012___even_when###0.012___eof###0.011___symbol###0.011___file_in###0.011___seek###0.011___likely###0.011___perlvar###0.011___they_are###0.011___subroutines###0.011___neither###0.010___eolthere###0.010___methods###0.010___do_not###0.010___takes###0.010___correct###0.010___aren't###0.010___operation###0.010___references###0.009___eolnote###0.009___operator###0.009___hashes###0.009___reference###0.009___know###0.009___filehandle###0.009___close###0.009___stdin###0.009___lines###0.008___functions###0.008___version###0.008___values###0.007___really###0.007___number###0.007___line###0.007___list###0.007___something###0.007___open###0.006___string###0.006___you're###0.005___one###0.005___
199:183###0.22,127###0.22,205###0.21,187###0.19,101###0.19,99###0.18,186###0.18,189###0.18,165###0.17,221###0.17:Do I always/never have to quote my strings or use semicolons and commas?  EOL EOL:Normally, a bareword doesn't need to be quoted, but in most cases probably should be (and must be under use strict). But a hash key consisting of a simple word (that isn't the name of a defined subroutine) and the left-hand operand to the => operator both count as though they were quoted!: EOL EOL    This                    is like this EOL    ------------            --------------- EOL    $foo{line}              $foo{"line"} EOL    bar => stuff            "bar" => stuff  EOL EOLThe final semicolon in a block is optional, as is the final comma in a list. Good style (see perlstyle) says to put them in except for one-liners!: EOL EOL    if ($whoops) { exit 1 } EOL    @nums = (1, 2, 3); EOL EOL    if ($whoops) { EOL        exit 1; EOL    } EOL    @lines = ( EOL"There Beren came from mountains cold", EOL"And lost he wandered under leaves", EOL    );  EOL EOL::::eol###0.048___final###0.038___whoops###0.038___bar###0.033___quoted###0.030___stuff###0.028___foo###0.026___exit###0.026___nums###0.021___always/never###0.021___mountains###0.021___semicolons###0.021___beren###0.021___operand###0.021___wandered###0.021___leaves###0.021___line###0.019___lost###0.019___bareword###0.019___left-hand###0.019___one-liners###0.019___perlstyle###0.019___semicolon###0.019___cold###0.019___commas###0.019___consisting###0.017___optional###0.017___style###0.017___quote###0.017___as_though###0.017___except_for###0.016___comma###0.016___normally###0.014___says###0.014___strict###0.013___count###0.013___key###0.013___subroutine###0.013___block###0.013___word###0.013___operator###0.012___good###0.012___cases###0.011___defined###0.011___name###0.011___strings###0.011___lines###0.011___simple###0.010___isn't###0.010___hash###0.009___list###0.009___probably###0.008___need###0.008___eolthe###0.008___doesn't###0.008___
200:124###0.18,105###0.17,222###0.17,104###0.17,183###0.16,160###0.16,108###0.15,134###0.14,113###0.14,51###0.14:How do I skip some return values?  EOL EOL:One way is to treat the return values as a list and index into it!: EOL EOL        $dir = (getpwnam($user))[7];  EOL EOLAnother way is to use undef as an element on the left-hand-side!: EOL EOL    ($dev, $ino, undef, undef, $uid, $gid) = stat($file);  EOL EOL:values###1.00000:how###1.00000:how do###1.00000:undef###0.095___dir###0.058___gid###0.058___ino###0.058___eol###0.056___values###0.056___return###0.054___skip###0.051___uid###0.051___getpwnam###0.051___left-hand###0.051___dev###0.048___stat###0.043___eolanother###0.043___treat###0.043___index###0.040___user###0.035___element###0.034___list###0.026___file###0.020___one###0.018___
201:37###0.15,205###0.15,103###0.13,183###0.13,64###0.13,209###0.13,107###0.13,218###0.12,200###0.12,221###0.12:How do I temporarily block warnings?  EOL EOL:If you are running Perl 5.6.0 or better, the use warnings pragma allows fine control of what warning are produced. See perllexwarn for more details. EOL EOL    { EOLno warnings;          # temporarily turn off warnings EOL$a = $b + $c;         # I know these might be undef EOL    }  EOL EOLIf you have an older version of Perl, the $^W variable (documented in perlvar) controls runtime warnings for a block!: EOL EOL    { EOLlocal $^W = 0;        # temporarily turn off warnings EOL$a = $b + $c;         # I know these might be undef EOL    }  EOL EOLNote that like all the punctuation variables, you cannot currently use my() on $^W, only local(). EOL EOL:coming###0.00559___suffrutex###0.00559___inactiveness###0.00559___topographic_point###0.00559___stoppage###0.04469___regular_convex_polyhedron###0.00559___stop###0.04469___monition###0.04469___subshrub###0.00559___position###0.00559___simple_machine###0.00559___machine###0.00559___human_activity###0.00559___stay###0.00559___interference###0.04469___regular_convex_solid###0.00559___warning###0.04469___rules_of_order###0.00559___platonic_solid###0.00559___cube###0.04469___spatial_relation###0.00559___obstructer###0.00559___reprimand###0.00559___human_action###0.00559___platonic_body###0.00559___spot###0.00559___constraint###0.00559___number###0.00559___parliamentary_procedure###0.00559___conclusion###0.00559___warnings###0.08939___order###0.00559___front###0.00559___consonant###0.00559___making_known###0.00559___obstruction###0.00559___inaction###0.00559___word_of_advice###0.04469___occlusion###0.04469___admonition###0.04469___approach###0.00559___impedimenta###0.00559___solid###0.00559___act###0.00559___foreign_policy###0.00559___inactivity###0.00559___impediment###0.00559___trouble###0.00559___attack###0.00559___ideal_solid###0.00559___closure###0.04469___finish###0.00559___approaching###0.00559___pulley###0.04469___rebuke###0.00559___punctuation###0.00559___knob###0.00559___ending###0.00559___block###0.08939___advice###0.00559___termination###0.00559___restraint###0.00559___punctuation_mark###0.00559___parliamentary_law###0.00559___reproof###0.00559___informing###0.00559___reprehension###0.00559___regular_polyhedron###0.00559___reproval###0.00559___obstructor###0.00559___mechanical_device###0.00559___place###0.00559:how###1.00000:how do###1.00000:warnings###0.123___temporarily###0.071___turn_off###0.054___eol###0.046___block###0.037___know###0.034___undef###0.033___controls###0.030___perllexwarn###0.030___runtime###0.027___produced###0.027___eolno###0.025___older###0.025___warning###0.025___punctuation###0.025___pragma###0.021___allows###0.021___fine###0.021___eollocal###0.021___perlvar###0.020___cannot###0.020___control###0.019___currently###0.019___all_the###0.018___running###0.018___eolnote###0.017___better###0.016___variables###0.016___you_are###0.016___local###0.015___documented###0.015___details###0.014___version###0.014___variable###0.014___you_have###0.013___perl###0.012___eolif###0.010___
202:62###0.23,266###0.22,65###0.20,244###0.15,61###0.14,71###0.14,205###0.10,183###0.10,97###0.10,220###0.10:What's an extension?  EOL EOL:An extension is a way of calling compiled C code from Perl. Reading perlxstut is a good place to learn more about extensions. EOL EOL:recommendation###0.00758___change_of_shape###0.00758___propagation###0.06061___helping###0.00758___reference###0.06061___control_surface###0.00758___testimonial###0.00758___dissemination###0.00758___airing###0.00758___continuance###0.00758___physical_phenomenon###0.00758___stage###0.00758___longness###0.00758___action###0.00758___spreading###0.00758___barrier###0.00758___air_unit###0.00758___breeding###0.00758___substance###0.00758___wing###0.06061___extension###0.12121___airfoil###0.00758___notation###0.00758___continuation###0.00758___elongation###0.06061___note###0.00758___surface###0.00758___naming###0.00758___book###0.00758___length###0.00758___portion###0.00758___annotation###0.00758___aerofoil###0.00758___remark###0.00758___indicator###0.00758___comment###0.00758___lengthiness###0.06061___denotation###0.06061___organ###0.00758___facts_of_life###0.00758___annexe###0.06061___procreation###0.00758___serving###0.00758___prolongation###0.06061___addition###0.00758___good_word###0.00758___publication###0.00758___reproduction###0.00758___formation###0.00758___duration###0.00758___improver###0.00758___public_exposure###0.00758___annex###0.06061___meaning###0.00758:what###1.00000:what's an###1.00000:extension###0.159___extensions###0.089___calling###0.089___perlxstut###0.089___compiled###0.079___reading###0.074___learn###0.074___place###0.074___good###0.070___what's###0.070___eol###0.054___code###0.046___perl###0.025___
203:70###0.17,214###0.15,163###0.13,151###0.13,143###0.13,141###0.13,217###0.13,183###0.11,142###0.10,177###0.10:Why do Perl operators have different precedence than C operators?   EOL EOL:Actually, they don't. All C operators that Perl copies have the same precedence in Perl as they do in C. The problem is with operators that C doesn't have, especially functions that give a list context to everything on their right, eg. print, chmod, exec, and so on. Such functions are called "list operators" and appear as such in the precedence table in perlop. EOL EOLA common mistake is to write!: EOL EOL    unlink $file || die "snafu";  EOL EOLThis gets interpreted as!: EOL EOL    unlink ($file || die "snafu");  EOL EOLTo avoid this problem, either put in extra parentheses or use the super low precedence or operator!: EOL EOL    (unlink $file) || die "snafu"; EOL    unlink $file or die "snafu";  EOL EOLThe "English" operators (and, or, xor, and not) deliberately have precedence lower than that of list operators for just such situations as the one above. EOL EOLAnother operator with surprising precedence is exponentiation. It binds more tightly even than unary minus, making - 2**2 product a negative not a positive four. It is also right-associating, meaning that 2**3**2 is two raised to the ninth power, not eight squared. EOL EOLAlthough it has the same precedence as in C, Perl's ?!: operator produces an lvalue. This assigns $x to either $a or $b, depending on the trueness of $maybe!: EOL EOL    ($maybe ? $a !: $b) = $x;  EOL EOL:working_girl###0.01266___mathematical_function###0.01266___businessman###0.01266___man_of_affairs###0.01266___speculator###0.01266___self-seeker###0.01266___causal_agent###0.01266___fancy_woman###0.01266___hustler###0.10127___wheeler_dealer###0.10127___plunger###0.01266___cocotte###0.01266___trollop###0.01266___bawd###0.01266___sporting_lady###0.01266___harlot###0.01266___cause###0.01266___lady_of_pleasure###0.01266___soul###0.01266___human###0.01266___woman_of_the_street###0.01266___whore###0.01266___mortal###0.01266___someone###0.01266___somebody###0.01266___causal_agency###0.01266___function###0.01266___cyprian###0.01266___individual###0.01266___operators###0.20253___person###0.01266___manipulator###0.10127___prostitute###0.01266___operator###0.10127___tart###0.01266___opportunist###0.01266:why###1.00000:why do###1.00000:precedence###0.073___operators###0.059___snafu###0.047___unlink###0.039___eol###0.024___die###0.021___operator###0.020___maybe###0.018___file###0.016___list###0.015___problem###0.012___either###0.011___deliberately###0.011___situations###0.011___put_in###0.011___squared###0.011___super###0.011___tightly###0.011___exponentiation###0.011___produces###0.011___trueness###0.011___binds###0.011___unary###0.011___ninth###0.011___mistake###0.011___four###0.011___lower###0.011___raised###0.011___right-associating###0.011___functions###0.011___depending_on###0.010___product###0.010___and_so_on###0.010___as_such###0.010___surprising###0.010___chmod###0.010___eight###0.010___do_in###0.010___lvalue###0.010___minus###0.010___assigns###0.010___power###0.009___xor###0.009___eolalthough###0.009___english###0.009___negative###0.009___positive###0.009___copies###0.009___making###0.008___parentheses###0.008___meaning###0.008___eolanother###0.008___perlop###0.008___exec###0.008___table###0.008___interpreted###0.008___everything###0.008___common###0.007___appear###0.007___extra###0.007___gets###0.007___especially###0.007___perl###0.007___actually###0.007___give###0.007___eola###0.007___context###0.006___right###0.006___avoid###0.006___eolto###0.006___called###0.006___above###0.006___perl's###0.006___different###0.006___even###0.005___two###0.005___eolthis###0.005___why###0.005___write###0.005___eolthe###0.004___doesn't###0.004___don't###0.004___print###0.004___one###0.003___
204:131###0.17,223###0.13,143###0.12,132###0.11,95###0.10,210###0.10,145###0.10,205###0.10,208###0.10,183###0.09:How do I declare/create a structure?  EOL EOL:In general, you don't "declare" a structure. Just use a (probably anonymous) hash reference. See perlref and perldsc for details. Here's an example!: EOL EOL    $person = {};                   # new anonymous hash EOL    $person->{AGE}  = 24;           # set field AGE to 24 EOL    $person->{NAME} = "Nat";        # set field NAME to "Nat"  EOL EOLIf you're looking for something a bit more rigorous, try perltoot. EOL EOL:thinking###0.01333___grammatical_constituent###0.01333___social_organization###0.10667___complex_body_part###0.10667___construction###0.10667___artefact###0.01333___constituent###0.01333___mathematical_operation###0.01333___system###0.01333___mentation###0.01333___cerebration###0.01333___social_organisation###0.10667___body_part###0.01333___commercial_enterprise###0.01333___structure###0.21333___operation###0.01333___business###0.01333___intellection###0.01333___mathematical_process###0.01333___interpretation###0.01333___artifact###0.01333___social_system###0.10667___thought###0.01333___creating_from_raw_materials###0.01333___business_enterprise###0.01333:how###1.00000:how do###1.00000:person###0.109___nat###0.073___field###0.065___age###0.060___structure###0.057___anonymous###0.050___name###0.038___set###0.036___declare/create###0.036___rigorous###0.036___eol###0.035___hash###0.033___declare###0.032___a_bit###0.028___perldsc###0.028___perlref###0.026___looking_for###0.025___perltoot###0.023___in_general###0.021___reference###0.021___here's###0.018___details###0.017___try###0.017___example###0.017___something###0.016___probably###0.015___new###0.014___don't###0.014___you're###0.013___eolif###0.012___
205:183###0.26,210###0.25,221###0.23,51###0.23,101###0.23,165###0.22,228###0.22,266###0.21,149###0.21,199###0.21:How do I create a module?  EOL EOL:A module is a package that lives in a file of the same name. For example, the Hello!:!:There module would live in Hello/ There.pm. For details, read perlmod. You'll also find Exporter helpful. If you're writing a C or mixed-language module with both C and Perl, then you should study perlxstut. EOL EOLHere's a convenient template you might wish you use when starting your own module. Make sure to change the names appropriately. EOL EOL    package Some!:!:Module;  # assumes Some/Module.pm EOL EOL    use strict; EOL    use warnings; EOL EOL    BEGIN { EOLuse Exporter   (); EOLour ($VERSION, @ISA, @EXPORT, @EXPORT_OK, %EXPORT_TAGS); EOL EOL## set the version for version checking; uncomment to use EOL## $VERSION     = 1.00; EOL EOL# if using RCS/CVS, this next line may be preferred, EOL# but beware two-digit versions. EOL$VERSION = do{my@r=q$Revision!: 1.28 $=~/\d+/g;sprintf '%d.'.'%02d'x$#r,@r}; EOL EOL@ISA         = qw(Exporter); EOL@EXPORT      = qw(&func1 &func2 &func3); EOL%EXPORT_TAGS = ( );  # eg!: TAG => [ qw!!name1 name2!! ], EOL EOL# your exported package globals go here, EOL# as well as any optionally exported functions EOL@EXPORT_OK   = qw($Var1 %Hashit); EOL    } EOL    our @EXPORT_OK; EOL EOL    # exported package globals go here EOL    our $Var1; EOL    our %Hashit; EOL EOL    # non-exported package globals go here EOL    our @more; EOL    our $stuff; EOL EOL    # initialize package globals, first exported ones EOL    $Var1   = ''; EOL    %Hashit = (); EOL EOL    # then the others (which are still accessible as $Some!:!:Module!:!:stuff) EOL    $stuff  = ''; EOL    @more   = (); EOL EOL    # all file-scoped lexicals must be created before EOL    # the functions below that use them. EOL EOL    # file-private lexicals go here EOL    my $priv_var    = ''; EOL    my %secret_hash = (); EOL EOL    # here's a file-private function as a closure, EOL    # callable as &$priv_func;  it cannot be prototyped. EOL    my $priv_func = sub { EOL        # stuff goes here. EOL    }; EOL EOL    # make all your functions, whether exported or not; EOL    # remember to put something interesting in the {} stubs EOL    sub func1      {} # no prototype EOL    sub func2()    {} # proto'd void EOL    sub func3($$)  {} # proto'd to 2 scalars EOL EOL    # this one isn't exported, but could be called!! EOL    sub func4(\%)  {}    # proto'd to 1 hash ref EOL EOL    END { }       # module clean-up code here (global destructor) EOL EOL    1;            # modules must return true  EOL EOLThe h2xs program will create stubs for all the important stuff for you!: EOL EOL  % h2xs -XA -n My!:!:Module  EOL EOL:module###0.45714___power###0.02857___mental_faculty###0.22857___faculty###0.22857___body###0.02857___ability###0.02857:how###1.00000:how do###1.00000:eol###0.057___exported###0.043___globals###0.028___stuff###0.024___package###0.023___proto'd###0.021___hashit###0.021___var1###0.021___export_ok###0.021___module###0.020___exporter###0.019___version###0.017___sub###0.015___func2###0.014___export_tags###0.014___func1###0.014___func3###0.014___priv_func###0.014___stubs###0.014___export###0.012___hello###0.012___isa###0.012___file-private###0.012___h2xs###0.011___lexicals###0.011___functions###0.010___create###0.007___clean-up###0.007___live_in###0.007___non-exported###0.007___beware###0.007___file-scoped###0.007___uncomment###0.007___callable###0.007___two-digit###0.007___there.pm###0.007___mixed-language###0.007___func4###0.007___destructor###0.007___study###0.007___some/module.pm###0.007___secret_hash###0.007___revision###0.007___rcs/cvs###0.007___prototyped###0.007___name2###0.007___name1###0.007___prototype###0.007___priv_var###0.007___helpful###0.006___preferred###0.006___accessible###0.006___eolour###0.006___interesting###0.006___initialize###0.006___lives###0.006___optionally###0.005___tag###0.005___perlmod###0.005___void###0.005___others###0.005___template###0.005___starting###0.005___goes###0.005___closure###0.005___important###0.005___appropriately###0.005___convenient###0.005___scalars###0.005___perlxstut###0.005___names###0.005___eoluse###0.005___checking###0.005___as_well_as###0.005___remember###0.005___created###0.005___ref###0.005___below###0.004___assumes###0.004___next###0.004___sprintf###0.004___warnings###0.004___cannot###0.004___global###0.004___wish###0.004___strict###0.004___true###0.004___make_sure###0.004___ones###0.004___begin###0.004___all_the###0.004___versions###0.004___writing###0.004___eolhere's###0.004___own###0.004___called###0.003___change###0.003___name###0.003___here's###0.003___set###0.003___find###0.003___details###0.003___return###0.003___isn't###0.003___you'll###0.003___whether###0.003___line###0.003___hash###0.003___for_example###0.003___modules###0.003___first###0.003___something###0.003___read###0.002___eolthe###0.002___may###0.002___function###0.002___code###0.002___you're###0.002___file###0.002___program###0.002___using###0.002___one###0.002___perl###0.001___
206:61###0.29,219###0.19,215###0.17,131###0.14,205###0.11,183###0.10,137###0.10,220###0.10,210###0.10,23###0.10:How do I create a class?  EOL EOL:See perltoot for an introduction to classes and objects, as well as perlobj and perlbot. EOL EOL:magnitude###0.00515___rating###0.00515___appearance###0.00515___layer###0.00515___valuation###0.00515___mode###0.00515___collection###0.00515___blood_line###0.00515___nutrition###0.00515___origin###0.00515___angular_unit###0.00515___fashion###0.00515___time_period###0.00515___evaluation###0.00515___state###0.00515___relative###0.00515___course_of_instruction###0.04124___genre###0.00515___writing_style###0.00515___papers###0.00515___course###0.04124___bloodline###0.00515___line###0.00515___series###0.00515___victuals###0.00515___style###0.00515___pedagogy###0.00515___lineage###0.00515___literary_genre###0.00515___separation###0.00515___action###0.00515___army_unit###0.00515___construct###0.00515___unit###0.00515___tribe###0.00515___form###0.04124___air_unit###0.00515___assemblage###0.00515___teaching###0.00515___parentage###0.00515___administrative_unit###0.00515___manner###0.00515___direction###0.00515___category###0.04124___division###0.04124___discord###0.00515___clan###0.00515___slope###0.00515___info###0.00515___descent###0.00515___physical_structure###0.00515___structure###0.00515___period_of_time###0.00515___dissension###0.00515___line_of_descent###0.00515___year###0.04124___ancestry###0.00515___cast###0.00515___phylum###0.00515___nutriment###0.00515___attribute###0.00515___conference###0.00515___mold###0.00515___information###0.00515___kinship_group###0.00515___taxon###0.00515___elevation###0.00515___accumulation###0.00515___naval_unit###0.00515___written_document###0.00515___kin_group###0.00515___blood###0.00515___concept###0.00515___state_of_matter###0.00515___aliment###0.00515___biological_group###0.00515___grade###0.04124___spatiality###0.00515___education###0.00515___relation###0.00515___kindred###0.00515___educational_activity###0.00515___league###0.00515___stock###0.00515___spatial_property###0.00515___pedigree###0.00515___mould###0.00515___way###0.00515___aggregation###0.00515___nourishment###0.00515___organic_structure###0.00515___installation###0.00515___instruction###0.00515___alimentation###0.00515___social_unit###0.00515___sustenance###0.00515___word###0.00515___class###0.08247___document###0.00515___dummy###0.00515___association###0.00515___family###0.04124___course_of_study###0.04124___body###0.00515___kin###0.00515___gradient###0.00515___conception###0.00515___rank###0.00515___ability###0.00515___arithmetic_operation###0.00515___taxonomic_group###0.00515___visual_aspect###0.00515___period###0.00515___administrative_body###0.00515___facility###0.00515___gathering###0.00515:how###1.00000:how do###1.00000:introduction###0.138___perlbot###0.123___classes###0.114___perlobj###0.108___objects###0.103___as_well_as###0.096___perltoot###0.091___class###0.088___create###0.073___eol###0.060___
207:257###0.21,51###0.14,264###0.13,210###0.12,133###0.12,183###0.10,284###0.10,205###0.10,149###0.09,107###0.09:How can I tell if a variable is tainted?  EOL EOL:See perlsec/"Laundering and Detecting Tainted Data". Here's an example (which doesn't use any system calls, because the kill() is given no processes to signal)!: EOL EOL    sub is_tainted { EOLreturn !! eval { join('',@_), kill 0; 1; }; EOL    }  EOL EOLThis is not -w clean, however. There is no -w clean way to detect taintedness--take this as a hint that you should untaint all possibly-tainted data. EOL EOL::how###1.00000:how can###1.00000:tainted###0.079___kill###0.065___clean###0.061___is_tainted###0.039___possibly-tainted###0.039___hint###0.039___taintedness###0.039___detecting###0.039___untaint###0.039___laundering###0.039___data###0.039___detect###0.035___eol###0.034___perlsec###0.032___processes###0.030___join###0.030___signal###0.026___tell###0.025___eval###0.025___eolreturn###0.024___however###0.023___calls###0.023___given###0.021___here's###0.020___is_not###0.019___example###0.018___variable###0.018___eolthis###0.017___sub###0.017___system###0.015___doesn't###0.015___
208:210###0.24,213###0.23,211###0.22,205###0.17,149###0.16,134###0.15,165###0.15,209###0.15,101###0.14,99###0.13:What's a closure?  EOL EOL:Closures are documented in perlref. EOL EOLClosure is a computer science term with a precise but hard-to-explain meaning. Closures are implemented in Perl as anonymous subroutines with lasting references to lexical variables outside their own scopes. These lexicals magically refer to the variables that were around when the subroutine was defined (deep binding). EOL EOLClosures make sense in any programming language where you can have the return value of a function be itself a function, as you can in Perl. Note that some languages provide anonymous functions but are not capable of providing proper closures!: the Python language, for example. For more information on closures, check out any textbook on functional programming. Scheme is a language that not only supports but encourages closures. EOL EOLHere's a classic function-generating function!: EOL EOL    sub add_function_generator { EOL      return sub { shift + shift }; EOL    } EOL EOL    $add_sub = add_function_generator(); EOL    $sum = $add_sub->(4,5);                # $sum is 9 now.  EOL EOLThe closure works as a function template with some customization slots left out to be filled later. The anonymous subroutine returned by add_function_generator() isn't technically a closure because it refers to no lexicals outside its own scope. EOL EOLContrast this with the following make_adder() function, in which the returned anonymous function contains a reference to a lexical variable outside the scope of that function itself. Such a reference requires that Perl return a proper closure, thus locking in for all time the value that the lexical had when the function was created. EOL EOL    sub make_adder { EOL        my $addpiece = shift; EOL        return sub { shift + $addpiece }; EOL    } EOL EOL    $f1 = make_adder(20); EOL    $f2 = make_adder(555);  EOL EOLNow &$f1($n) is always 20 plus whatever $n you pass in, whereas &$f2($n) is always 555 plus whatever $n you pass in. The $addpiece in the closure sticks around. EOL EOLClosures are often used for less esoteric purposes. For example, when you want to pass in a bit of code into a function!: EOL EOL    my $line; EOL    timeout( 30, sub { $line = <STDIN> } );  EOL EOLIf the code to execute had been passed in as a string, '$line = <STDIN>', there would have been no way for the hypothetical timeout() function to access the lexical variable $line back in its caller's scope. EOL EOL:coming###0.00625___platform###0.00625___inactiveness###0.00625___topographic_point###0.00625___motility###0.00625___collection###0.00625___stoppage###0.05000___stop###0.05000___area###0.00625___cloture###0.05000___physiological_state###0.00625___position###0.00625___simple_machine###0.00625___machine###0.00625___closing###0.05000___human_activity###0.00625___stay###0.00625___rules_of_order###0.00625___move###0.00625___gag_rule###0.05000___spatial_relation###0.00625___motion###0.00625___obstructer###0.00625___blockage###0.05000___inability###0.00625___human_action###0.00625___spot###0.00625___constraint###0.00625___country###0.00625___artefact###0.00625___parliamentary_procedure###0.00625___assemblage###0.00625___conclusion###0.00625___lodging###0.00625___living_accommodations###0.00625___order###0.00625___front###0.00625___consonant###0.00625___housing###0.00625___computer_memory_unit###0.00625___obstruction###0.00625___inaction###0.00625___occlusion###0.05000___cast###0.00625___approach###0.00625___impedimenta###0.00625___section###0.00625___solid###0.00625___act###0.00625___shutdown###0.05000___closedown###0.05000___accumulation###0.00625___inactivity###0.00625___movement###0.00625___casting###0.00625___impediment###0.00625___attack###0.00625___aggregation###0.00625___physiological_condition###0.00625___closure###0.10000___finish###0.00625___approaching###0.00625___subdivision###0.00625___punctuation###0.00625___knob###0.00625___ending###0.00625___block###0.05000___termination###0.00625___restraint###0.00625___punctuation_mark###0.00625___parliamentary_law###0.00625___artifact###0.00625___obstructor###0.00625___mechanical_device###0.00625___place###0.00625:what###1.00000:what's a###1.00000:closures###0.032___make_adder###0.029___function###0.027___closure###0.027___eol###0.024___addpiece###0.022___add_function_generator###0.022___lexical###0.020___anonymous###0.020___outside###0.017___shift###0.016___sub###0.016___scope###0.015___pass###0.015___eolclosures###0.014___add_sub###0.014___return###0.013___line###0.013___sum###0.013___lexicals###0.011___timeout###0.011___itself###0.011___plus###0.011___returned###0.010___around###0.010___whatever###0.009___proper###0.009___subroutine###0.009___language###0.008___stdin###0.008___own###0.008___variables###0.008___always###0.007___value###0.007___make_sense###0.007___function-generating###0.007___refers###0.007___hard-to-explain###0.007___in_for###0.007___computer_science###0.007___filled###0.007___textbook###0.007___esoteric###0.007___capable###0.007___magically###0.007___eolcontrast###0.007___sticks###0.007___eolclosure###0.007___encourages###0.007___slots###0.007___scopes###0.007___lasting###0.007___customization###0.007___hypothetical###0.007___variable###0.006___precise###0.006___functional###0.006___binding###0.006___classic###0.006___providing###0.006___implemented###0.006___deep###0.006___not_only###0.006___execute###0.006___for_example###0.006___caller's###0.006___technically###0.006___passed###0.006___purposes###0.006___whereas###0.006___out_to###0.005___thus###0.005___template###0.005___scheme###0.005___python###0.005___refer###0.005___a_bit###0.005___locking###0.005___meaning###0.005___requires###0.005___reference_to###0.005___code###0.005___perlref###0.005___in.###0.005___created###0.005___programming_language###0.005___back###0.004___subroutines###0.004___are_not###0.004___eolnow###0.004___check_out###0.004___note###0.004___left###0.004___perl###0.004___provide###0.004___programming###0.004___later###0.004___languages###0.004___less###0.004___references###0.004___term###0.004___reference###0.004___access###0.004___eolhere's###0.004___supports###0.004___what's###0.004___contains###0.004___works###0.004___often###0.004___defined###0.003___documented###0.003___information###0.003___following###0.003___functions###0.003___isn't###0.003___used###0.003___time###0.003___eolthe###0.002___string###0.002___eolif###0.002___
209:211###0.26,199###0.16,208###0.15,51###0.14,127###0.14,99###0.14,183###0.14,146###0.14,214###0.13,223###0.13:What is variable suicide and how can I prevent it?  EOL EOL:Variable suicide is when you (temporarily or permanently) lose the value of a variable. It is caused by scoping through my() and local() interacting with either closures or aliased foreach() iterator variables and subroutine arguments. It used to be easy to inadvertently lose a variable's value this way, but now it's much harder. Take this code!: EOL EOL    my $f = "foo"; EOL    sub T { EOL      while ($i++ < 3) { my $f = $f; $f .= "bar"; print $f, "\n" } EOL    } EOL    T; EOL    print "Finally $f\n";  EOL EOLThe $f that has "bar" added to it three times should be a new $f (my $f should create a new local variable each time through the loop). It isn't, however. This was a bug, now fixed in the latest releases (tested against 5.004_05, 5.005_03, and 5.005_56). EOL EOL:self-annihilation###0.03571___slayer###0.03571___felo-de-se###0.28571___suicide###0.57143___killer###0.03571___self-destruction###0.03571:what###0.50000___how###0.50000:and how can###0.50000___what is###0.50000:suicide###0.049___variable###0.045___lose###0.040___bar###0.038___eol###0.031___local###0.025___value###0.024___permanently###0.024___interacting###0.024___three_times###0.024___inadvertently###0.024___variable's###0.024___aliased###0.021___caused###0.021___harder###0.021___closures###0.021___latest###0.021___prevent###0.021___scoping###0.021___finally###0.021___tested###0.021___and_how###0.020___new###0.019___to_it###0.019___added###0.019___temporarily###0.019___iterator###0.018___print###0.017___loop###0.017___fixed###0.017___against###0.017___easy###0.016___used_to###0.016___arguments###0.015___releases###0.015___foreach###0.015___foo###0.014___bug###0.014___subroutine###0.014___however###0.014___variables###0.013___create###0.013___either###0.012___isn't###0.011___sub###0.010___time###0.010___eolthe###0.009___it's###0.009___code###0.009___
210:100###0.27,183###0.26,205###0.25,145###0.25,51###0.24,208###0.24,175###0.23,146###0.23,149###0.23,101###0.22:How can I pass/return a {Function, FileHandle, Array, Hash, Method, Regex}?  EOL EOL:With the exception of regexes, you need to pass references to these objects. See perlsub/"Pass by Reference" for this particular question, and perlref for information on references. EOL EOLSee ``Passing Regexes'', below, for information on passing regular expressions. EOL EOLPassing Variables and Functions EOL EOLRegular variables and functions are quite easy to pass!: just pass in a reference to an existing or anonymous variable or function!: EOL EOL    func( \$some_scalar ); EOL EOL    func( \@some_array  ); EOL    func( [ 1 .. 10 ]   ); EOL EOL    func( \%some_hash   ); EOL    func( { this => 10, that => 20 }   ); EOL EOL    func( \&some_func   ); EOL    func( sub { $_[0] ** $_[1] }   );  EOL EOLPassing Filehandles EOL EOLTo pass filehandles to subroutines, use the *FH or \*FH notations. These are "typeglobs"--see perldata/"Typeglobs and Filehandles" and especially perlsub/"Pass by Reference" for more information. EOL EOLHere's an excerpt!: EOL EOLIf you're passing around filehandles, you could usually just use the bare typeglob, like *STDOUT, but typeglobs references would be better because they'll still work properly under use strict 'refs'. For example!: EOL EOL    splutter(\*STDOUT); EOL    sub splutter { EOL        my $fh = shift; EOL        print $fh "her um well a hmmm\n"; EOL    } EOL EOL    $rec = get_rec(\*STDIN); EOL    sub get_rec { EOL        my $fh = shift; EOL        return scalar <$fh>; EOL    }  EOL EOLIf you're planning on generating new filehandles, you could do this!: EOL EOL    sub openit { EOL        my $path = shift; EOL        local *FH; EOL        return open (FH, $path) ? *FH !: undef; EOL    } EOL    $fh = openit('< /etc/motd'); EOL    print <$fh>;  EOL EOLPassing Regexes EOL EOLTo pass regexes around, you'll need to be using a release of Perl sufficiently recent as to support the qr// construct, pass around strings and use an exception-trapping eval, or else be very, very clever. EOL EOLHere's an example of how to pass in a string to be regex compared using qr//!: EOL EOL    sub compare($$) { EOL        my ($val1, $regex) = @_; EOL        my $retval = $val1 =~ /$regex/; EOLreturn $retval; EOL    } EOL    $match = compare("old McDonald", qr/d.*D/i);  EOL EOLNotice how qr// allows flags at the end. That pattern was compiled at compile time, although it was executed later. The nifty qr// notation wasn't introduced until the 5.005 release. Before that, you had to approach this problem much less intuitively. For example, here it is again if you don't have qr//!: EOL EOL    sub compare($$) { EOL        my ($val1, $regex) = @_; EOL        my $retval = eval { $val1 =~ /$regex/ }; EOLdie if $@; EOLreturn $retval; EOL    } EOL EOL    $match = compare("old McDonald", q/($?i)d.*D/);  EOL EOLMake sure you never say something like this!: EOL EOL    return eval "\$val =~ /$regex/";   # WRONG  EOL EOLor someone can sneak shell escapes into the regex due to the double interpolation of the eval and the double- quoted string. For example!: EOL EOL    $pattern_of_evil = 'danger ${ system("rm -rf * &") } danger'; EOL EOL    eval "\$string =~ /$pattern_of_evil/";  EOL EOLThose preferring to be very, very clever might see the O'Reilly book, Mastering Regular Expressions, by Jeffrey Friedl. Page 273's Build_MatchMany_Function() is particularly interesting. A complete citation of this book is given in perlfaq2. EOL EOLPassing Methods EOL EOLTo pass an object method into a subroutine, you can do this!: EOL EOL    call_a_lot(10, $some_obj, "methname") EOL    sub call_a_lot { EOL        my ($count, $widget, $trick) = @_; EOL        for (my $i = 0; $i < $count; $i++) { EOL            $widget->$trick(); EOL        } EOL    }  EOL EOLOr, you can use a closure to bundle up the object, its method call, and arguments!: EOL EOL    my $whatnot =  sub { $some_obj->obfuscate(@args) }; EOL    func($whatnot); EOL    sub func { EOL        my $code = shift; EOL        &$code(); EOL    }  EOL EOLYou could also investigate the can() method in the UNIVERSAL class (part of the standard perl distribution). EOL EOL:happening###0.00532___end###0.00532___software_system###0.00532___occupation###0.00532___demand###0.00532___routine###0.04255___opportunity###0.00532___job###0.00532___state###0.00532___proceeding###0.00532___subroutine###0.04255___usage###0.00532___influence###0.00532___occurrence###0.00532___place_of_business###0.00532___staff###0.00532___time###0.00532___purpose###0.04255___line###0.00532___chance###0.00532___public_presentation###0.00532___software_package###0.00532___package###0.00532___try###0.00532___usance###0.00532___office###0.04255___procedure###0.04255___construct###0.00532___resolution###0.00532___firmness###0.00532___melody###0.00532___physical_thing###0.00532___resoluteness###0.00532___custom###0.00532___reason###0.00532___enactment###0.00532___administrative_unit###0.00532___entity###0.00532___melodic_line###0.00532___physical_object###0.00532___strain###0.00532___subprogram###0.04255___part###0.04255___use###0.04255___role###0.04255___resolve###0.00532___legal_right###0.00532___object###0.00532___process###0.00532___personation###0.00532___utility###0.00532___tune###0.00532___business###0.00532___melodic_phrase###0.00532___goal###0.00532___social_event###0.00532___business_establishment###0.00532___assets###0.00532___concept###0.00532___natural_event###0.00532___proceedings###0.00532___relation###0.00532___line_of_work###0.00532___concern###0.00532___social_occasion###0.04255___sexual_relationship###0.00532___activity###0.00532___location###0.00532___occasion###0.04255___ground###0.00532___characterization###0.00532___work###0.00532___attempt###0.00532___endeavor###0.00532___software###0.00532___portrayal###0.00532___affair###0.04255___function###0.08511___rite###0.00532___duty###0.00532___performance###0.00532___legal_proceeding###0.00532___usefulness###0.00532___conception###0.00532___effort###0.00532___air###0.00532___administrative_body###0.00532___endeavour###0.00532___religious_rite###0.00532:how###1.00000:how can###1.00000:eol###0.043___func###0.034___regex###0.024___pass###0.022___val1###0.018___retval###0.018___eolpassing###0.018___sub###0.018___filehandles###0.016___eval###0.014___compare###0.014___regexes###0.014___typeglobs###0.011___method###0.010___shift###0.010___passing###0.009___mcdonald###0.009___whatnot###0.009___danger###0.009___splutter###0.009___get_rec###0.009___call_a_lot###0.009___some_obj###0.009___clever###0.009___pattern_of_evil###0.009___pass_by###0.009___openit###0.009___references###0.008___eolto###0.007___widget###0.007___trick###0.006___information###0.006___perlsub###0.006___return###0.006___around###0.006___path###0.006___object###0.006___double###0.006___for_example###0.006___stdout###0.005___book###0.005___eolreturn###0.005___count###0.005___string###0.005___expressions###0.005___match###0.005___reference###0.005___eolhere's###0.005___variables###0.005___release###0.004___methname###0.004___eolregular###0.004___build_matchmany_function###0.004___bundle_up###0.004___hmmm###0.004___pass_around###0.004___eolthose###0.004___pass/return###0.004___excerpt###0.004___some_scalar###0.004___introduced###0.004___intuitively###0.004___as_to###0.004___obfuscate###0.004___some_hash###0.004___preferring###0.004___sufficiently###0.004___they'll###0.004___some_array###0.004___d/i###0.004___val###0.004___exception-trapping###0.004___sneak###0.004___qr/d###0.004___executed###0.004___functions###0.004___regular###0.004___eolor###0.004___etc/motd###0.004___args###0.004___investigate###0.004___flags###0.004___notations###0.004___nifty###0.004___construct###0.004___interpolation###0.004___universal###0.004___bare###0.004___citation###0.004___planning###0.004___some_func###0.004___interesting###0.004___typeglob###0.003___mastering###0.003___perlfaq2###0.003___compared###0.003___properly###0.003___generating###0.003___perldata###0.003___need###0.003___eolmake###0.003___eoldie###0.003___due_to###0.003___escapes###0.003___wasn't###0.003___eolnotice###0.003___notation###0.003___function###0.003___reference_to###0.003___closure###0.003___objects###0.003___refs###0.003___code###0.003___print###0.003___you're###0.003___again###0.003___perlref###0.003___exception###0.003___o'reilly###0.003___existing###0.003___someone###0.003___recent###0.003___quoted###0.003___allows###0.003___anonymous###0.003___or_else###0.003___page###0.003___using###0.003___eolif###0.003___subroutines###0.003___quite###0.003___friedl###0.003___below###0.003___until###0.003___jeffrey###0.003___easy###0.003___particularly###0.003___especially###0.003___particular###0.003___methods###0.003___compiled###0.002___sure###0.002___strict###0.002___class###0.002___arguments###0.002___although###0.002___subroutine###0.002___later###0.002___compile###0.002___less###0.002___complete###0.002___pattern###0.002___say###0.002___usually###0.002___eolsee###0.002___filehandle###0.002___given###0.002___better###0.002___support###0.002___wrong###0.002___stdin###0.002___undef###0.002___shell###0.002___question###0.002___strings###0.002___call###0.002___local###0.002___eolyou###0.002___problem###0.002___approach###0.002___scalar###0.002___array###0.002___example###0.002___you'll###0.002___variable###0.002___part###0.002___hash###0.002___work###0.002___something###0.002___distribution###0.001___open###0.001___standard###0.001___time###0.001___perl###0.001___system###0.001___new###0.001___don't###0.001___
211:213###0.27,209###0.26,212###0.24,208###0.22,223###0.19,99###0.18,214###0.17,205###0.16,210###0.16,143###0.15:How do I create a static variable?  EOL EOL:As with most things in Perl, TMTOWTDI. What is a "static variable" in other languages could be either a function-private variable (visible only within a single function, retaining its value between calls to that function), or a file-private variable (visible only to functions within the file it was declared in) in Perl. EOL EOLHere's code to implement a function-private variable!: EOL EOL    BEGIN { EOL        my $counter = 42; EOL        sub prev_counter { return --$counter } EOL        sub next_counter { return $counter++ } EOL    }  EOL EOLNow prev_counter() and next_counter() share a private variable $counter that was initialized at compile time. EOL EOLTo declare a file-private variable, you'll still use a my(), putting the declaration at the outer scope level at the top of the file. Assume this is in file Pax.pm!: EOL EOL    package Pax; EOL    my $started = scalar(localtime(time())); EOL EOL    sub begun { return $started }  EOL EOLWhen use Pax or require Pax loads this module, the variable will be initialized. It won't get garbage-collected the way most variables going out of scope do, because the begun() function cares about it, but no one else can get it. It is not called $Pax!:!:started because its scope is unrelated to the package. It's scoped to the file. You could conceivably have several packages in that same file all accessing the same private variable, but another file with the same package couldn't get to it. EOL EOLSee perlsub/"Persistent Private Variables" for details. EOL EOLWhat's the difference between dynamic and lexical (static) scoping? Between local() and my()?  EOL EOLlocal($x) saves away the old value of the global variable $x and assigns a new value for the duration of the subroutine which is visible in other functions called from that subroutine. This is done at run-time, so is called dynamic scoping. local() always affects global variables, also called package variables or dynamic variables. EOL EOLmy($x) creates a new variable that is only visible in the current subroutine. This is done at compile-time, so it is called lexical or static scoping. my() always affects private variables, also called lexical variables or (improperly) static(ly scoped) variables. EOL EOLFor instance!: EOL EOL    sub visible { EOLprint "var has value $var\n"; EOL    } EOL EOL    sub dynamic { EOLlocal $var = 'local';# new temporary value for the still-global EOLvisible();              #   variable called $var EOL    } EOL EOL    sub lexical { EOLmy $var = 'private';    # new private variable, $var EOLvisible();              # (invisible outside of sub scope) EOL    } EOL EOL    $var = 'global'; EOL EOL    visible();      # prints global EOL    dynamic();      # prints local EOL    lexical();      # prints global  EOL EOLNotice how at no point does the value "private" get printed. That's because $var only has that value within the block of the lexical() function, and it is hidden from called subroutine. EOL EOLIn summary, local() doesn't make what you think of as private, local variables. It gives a global variable a temporary value. my() is what you're looking for if you want private variables. EOL EOLSee perlsub/"Private Variables via my()" and perlsub/"Temporary Values via local()" for excruciating details. EOL EOL::how###1.00000:how do###1.00000:private###0.047___variable###0.034___variables###0.032___visible###0.028___eol###0.024___called###0.023___lexical###0.022___static###0.022___value###0.021___pax###0.021___global###0.021___local###0.019___dynamic###0.019___counter###0.017___sub###0.016___scope###0.015___scoping###0.014___started###0.013___subroutine###0.013___prints###0.012___package###0.011___temporary###0.011___perlsub###0.011___within###0.011___file###0.011___initialized###0.010___prev_counter###0.010___scoped###0.010___eolvisible###0.010___next_counter###0.010___function-private###0.010___begun###0.009___file-private###0.009___affects###0.008___new###0.008___function###0.008___return###0.007___eollocal###0.007___eolmy###0.006___eolsee###0.006___done###0.006___always###0.005___invisible###0.005___hidden###0.005___excruciating###0.005___eolwhat's###0.005___compile-time###0.005___garbage-collected###0.005___declared###0.005___instance###0.005___no_one###0.005___outer###0.005___pax.pm###0.005___duration###0.005___retaining###0.005___saves###0.005___still-global###0.005___conceivably###0.005___cares###0.005___improperly###0.005___details###0.005___functions###0.005___var###0.004___assigns###0.004___unrelated###0.004___declare###0.004___declaration###0.004___tmtowtdi###0.004___share###0.004___loads###0.004___get_to###0.004___to_that###0.004___creates###0.004___persistent###0.004___putting###0.004___level###0.004___get_it###0.004___run-time###0.004___packages###0.004___summary###0.004___time###0.004___accessing###0.004___eolnotice###0.004___outside###0.004___top###0.004___implement###0.004___think_of###0.004___away###0.004___eolwhen###0.004___printed###0.004___out_of###0.004___localtime###0.003___point###0.003___assume###0.003___couldn't###0.003___looking_for###0.003___going###0.003___in_that###0.003___eolnow###0.003___gives###0.003___begin###0.003___compile###0.003___single###0.003___block###0.003___languages###0.003___eolprint###0.003___calls###0.003___difference###0.003___eolhere's###0.003___require###0.003___eolto###0.002___that_is###0.002___several###0.002___won't###0.002___that's###0.002___eolin###0.002___create###0.002___eolfor###0.002___current###0.002___either###0.002___is_not###0.002___things###0.002___scalar###0.002___values###0.002___you'll###0.002___perl###0.002___doesn't###0.002___it's###0.002___code###0.001___you're###0.001___module###0.001___
212:211###0.24,223###0.20,205###0.17,222###0.16,213###0.15,144###0.14,208###0.12,220###0.12,210###0.12,51###0.11:How can I access a dynamic variable while a similarly named lexical is in scope?  EOL EOL:You can do this via symbolic references, provided you haven't set use strict "refs". So instead of $var, use ${'var'}. EOL EOL    local $var = "global"; EOL    my    $var = "lexical"; EOL EOL    print "lexical is $var\n"; EOL EOL    no strict 'refs'; EOL    print "global  is ${'var'}\n";  EOL EOLIf you know your package, you can just mention it explicitly, as in $Some_Pack!:!:var. Note that the notation $!:!:var is not the dynamic $var in the current package, but rather the one in the main package, as though you had written $main!:!:var. Specifying the package directly makes you hard-code its name, but it executes faster and avoids running afoul of use strict "refs". EOL EOL:piece_of_ground###0.00476___background###0.03810___scope###0.07619___service###0.00476___capability###0.00476___motility###0.00476___limit###0.00476___mixed_bag###0.00476___potentiality###0.00476___environment###0.00476___scenery###0.00476___entree###0.03810___airway###0.00476___proposition###0.00476___kitchen_appliance###0.00476___concomitant###0.00476___position###0.00476___ingress###0.00476___navigational_instrument###0.00476___screen###0.00476___course###0.00476___panorama###0.00476___admittance###0.03810___interference###0.00476___motley###0.00476___drafting_instrument###0.00476___stage###0.00476___potpourri###0.00476___mixture###0.00476___access###0.07619___move###0.00476___miscellany###0.00476___motion###0.00476___vista###0.00476___setting###0.03810___orbit###0.03810___incoming###0.00476___salmagundi###0.00476___geological_formation###0.00476___accompaniment###0.00476___aspect###0.00476___timing###0.00476___miscellanea###0.00476___compass###0.03810___swing###0.00476___route###0.00476___assortment###0.00476___co-occurrence###0.00476___view###0.00476___parcel_of_land###0.00476___conceptualization###0.00476___surround###0.00476___ambit###0.03810___noise###0.00476___entry###0.00476___table_service###0.00476___similarity###0.00476___capableness###0.00476___bodily_cavity###0.00476___extent###0.00476___approach###0.03810___environs###0.00476___prospect###0.00476___path###0.00476___CRO###0.03810___flight_path###0.00476___information###0.00476___reach###0.03810___inheritance###0.00476___movement###0.00476___parcel###0.00476___variety###0.00476___right###0.00476___electronic_equipment###0.00476___disturbance###0.00476___suggestion###0.00476___air_lane###0.00476___heritage###0.00476___golf_shot###0.00476___way###0.00476___formulation###0.00476___installation###0.00476___surroundings###0.00476___cavum###0.00476___conceptualisation###0.00476___mounting###0.00476___crt_screen###0.00476___range###0.03810___formation###0.00476___geology###0.00476___tract###0.00476___golf_stroke###0.00476___entrance###0.00476___piece_of_land###0.00476___entering###0.00476___itinerary###0.00476___proffer###0.00476___scene###0.00476___point_of_accumulation###0.00476___facility###0.00476___limit_point###0.00476___place###0.00476___cavity###0.00476:name###0.50000___how###0.50000:how can###1.00000:var###0.061___refs###0.051___package###0.050___lexical###0.047___var.###0.045___strict###0.043___dynamic###0.032___eol###0.032___global###0.030___avoids###0.022___afoul###0.022___in_the_main###0.022___some_pack###0.022___specifying###0.022___explicitly###0.020___hard-code###0.020___provided###0.020___similarly###0.020___executes###0.018___as_though###0.018___mention###0.018___notation###0.017___haven't###0.017___named###0.017___rather###0.017___print###0.016___symbolic###0.016___scope###0.016___main###0.015___note###0.014___directly###0.014___running###0.013___references###0.013___faster###0.013___access###0.013___know###0.012___instead_of###0.012___makes###0.012___name###0.012___local###0.011___current###0.011___is_not###0.011___set###0.011___written###0.011___variable###0.010___eolif###0.007___one###0.007___
213:211###0.27,208###0.23,212###0.15,99###0.14,223###0.10,214###0.08,209###0.08,52###0.08,182###0.07,85###0.07:What's the difference between deep and shallow binding?  EOL EOL:In deep binding, lexical variables mentioned in anonymous subroutines are the same ones that were in scope when the subroutine was created. In shallow binding, they are whichever variables with the same names happen to be in scope when the subroutine is called. Perl always uses deep binding of lexical variables (i.e., those created with my()). However, dynamic variables (aka global, local, or package variables) are effectively shallowly bound. Consider this just one more reason not to use them. See the answer to "What's a closure?". EOL EOL:component###0.01000___state###0.01000___erroneousness###0.01000___deviation###0.08000___series###0.01000___resistance###0.01000___turning###0.01000___component_part###0.01000___separation###0.01000___action###0.01000___feat###0.01000___group_action###0.01000___number###0.01000___piece_of_material###0.01000___abnormality###0.01000___error###0.01000___opposition###0.01000___part###0.01000___remainder###0.08000___piece_of_cloth###0.01000___disagreement###0.01000___portion###0.01000___fluctuation###0.01000___variation###0.01000___decease###0.01000___interval###0.01000___statistic###0.01000___conflict###0.08000___difference###0.16000___ambivalence###0.01000___dispute###0.08000___deed###0.01000___ambivalency###0.01000___military_action###0.01000___death###0.01000___turn###0.01000___irregularity###0.01000___oppositeness###0.01000___departure###0.08000___divergence###0.08000___effort###0.01000___incompatibility###0.01000___exploit###0.01000:what###1.00000:what's the###1.00000:binding###0.098___variables###0.075___deep###0.073___shallow###0.049___scope###0.039___created###0.038___lexical###0.038___subroutine###0.033___what's###0.031___shallowly###0.027___effectively###0.024___aka###0.024___bound###0.024___mentioned###0.022___whichever###0.021___reason###0.020___closure###0.020___dynamic###0.019___happen###0.019___names###0.019___i.e.###0.019___anonymous###0.019___they_are###0.018___subroutines###0.018___global###0.018___ones###0.017___consider###0.017___however###0.016___answer###0.015___difference###0.015___uses###0.015___package###0.015___called###0.014___always###0.014___local###0.014___eol###0.011___one###0.008___perl###0.005___
214:216###0.33,163###0.25,102###0.23,85###0.19,141###0.18,211###0.17,198###0.17,103###0.16,199###0.16,177###0.16:Why doesn't "my($foo) = <FILE>;" work right?  EOL EOL:my() and local() give list context to the right hand side of =. The <FH> read operation, like so many of Perl's functions and operators, can tell which context it was called in and behaves appropriately. In general, the scalar() function can help. This function does nothing to the data itself (contrary to popular myth) but rather tells its argument to behave in whatever its scalar fashion is. If that function doesn't have a defined scalar behavior, this of course doesn't help you (such as with sort()). EOL EOLTo enforce scalar context in this particular case, however, you need merely omit the parentheses!: EOL EOL    local($foo) = <FILE>;    # WRONG EOL    local($foo) = scalar(<FILE>);   # ok EOL    local $foo  = <FILE>;    # right  EOL EOLYou should probably be using lexical variables anyway, although the issue is the same here!: EOL EOL    my($foo) = <FILE>;# WRONG EOL    my $foo  = <FILE>;# right  EOL EOL:learning###0.01299___knowledge_base###0.01299___occupation###0.01299___knowledge_domain###0.01299___job###0.01299___composition###0.01299___state###0.01299___contemplation###0.01299___scrutiny###0.01299___acquisition###0.01299___opus###0.01299___line###0.01299___memoriser###0.01299___employment###0.10390___rumination###0.01299___examination###0.01299___action###0.01299___reflection###0.01299___immersion###0.01299___end_product###0.01299___piece_of_music###0.01299___musical_composition###0.01299___info###0.01299___memorizer###0.01299___thoughtfulness###0.01299___business###0.01299___information###0.01299___musing###0.01299___reflexion###0.01299___piece###0.01299___line_of_work###0.01299___room###0.01299___concentration###0.01299___output###0.01299___activity###0.01299___drawing###0.01299___work###0.20779___absorption###0.01299___oeuvre###0.10390___study###0.10390___engrossment###0.01299:why###1.00000:why doesn't###1.00000:foo###0.068___scalar###0.046___file###0.040___local###0.039___context###0.033___right###0.032___eol###0.026___doesn't###0.021___function###0.021___wrong###0.020___help###0.020___myth###0.018___enforce###0.018___contrary_to###0.018___right_hand###0.018___fashion###0.016___omit###0.016___behave###0.016___behaves###0.016___side###0.015___popular###0.014___tells###0.014___itself###0.014___appropriately###0.014___anyway###0.014___parentheses###0.014___rather###0.014___operators###0.013___lexical###0.013___sort###0.013___merely###0.012___nothing###0.012___particular###0.012___whatever###0.011___tell###0.011___behavior###0.011___argument###0.011___of_course###0.011___issue###0.011___although###0.011___operation###0.011___give###0.011___in_general###0.011___however###0.011___in_this###0.011___such_as###0.010___case###0.010___variables###0.010___eolto###0.010___defined###0.010___called###0.010___eolyou###0.009___perl's###0.009___data###0.009___functions###0.009___work###0.008___list###0.008___why###0.008___probably###0.007___read###0.007___need###0.007___using###0.006___
215:206###0.17,218###0.13,210###0.11,176###0.10,216###0.10,61###0.10,131###0.10,100###0.10,279###0.09,97###0.09:How do I redefine a builtin function, operator, or method?  EOL EOL:Why do you want to do that? !:-) EOL EOLIf you want to override a predefined function, such as open(), then you'll have to import the new definition from a different module. See perlsub/"Overriding Built-in Functions". There's also an example in perltoot/"Class!:!:Template". EOL EOLIf you want to overload a Perl operator, such as + or **, then you'll want to use the use overload pragma, documented in overload. EOL EOLIf you're talking about obscuring method calls in parent classes, see perltoot/"Overridden Methods". EOL EOL:happening###0.00532___end###0.00532___software_system###0.00532___occupation###0.00532___demand###0.00532___routine###0.04255___opportunity###0.00532___job###0.00532___state###0.00532___proceeding###0.00532___subroutine###0.04255___usage###0.00532___influence###0.00532___occurrence###0.00532___place_of_business###0.00532___staff###0.00532___time###0.00532___purpose###0.04255___line###0.00532___chance###0.00532___public_presentation###0.00532___software_package###0.00532___package###0.00532___try###0.00532___usance###0.00532___office###0.04255___procedure###0.04255___construct###0.00532___resolution###0.00532___firmness###0.00532___melody###0.00532___physical_thing###0.00532___resoluteness###0.00532___custom###0.00532___reason###0.00532___enactment###0.00532___administrative_unit###0.00532___entity###0.00532___melodic_line###0.00532___physical_object###0.00532___strain###0.00532___subprogram###0.04255___part###0.04255___use###0.04255___role###0.04255___resolve###0.00532___legal_right###0.00532___object###0.00532___process###0.00532___personation###0.00532___utility###0.00532___tune###0.00532___business###0.00532___melodic_phrase###0.00532___goal###0.00532___social_event###0.00532___business_establishment###0.00532___assets###0.00532___concept###0.00532___natural_event###0.00532___proceedings###0.00532___relation###0.00532___line_of_work###0.00532___concern###0.00532___social_occasion###0.04255___sexual_relationship###0.00532___activity###0.00532___location###0.00532___occasion###0.04255___ground###0.00532___characterization###0.00532___work###0.00532___attempt###0.00532___endeavor###0.00532___software###0.00532___portrayal###0.00532___affair###0.04255___function###0.08511___rite###0.00532___duty###0.00532___performance###0.00532___legal_proceeding###0.00532___usefulness###0.00532___conception###0.00532___effort###0.00532___air###0.00532___administrative_body###0.00532___endeavour###0.00532___religious_rite###0.00532:how###1.00000:how do###1.00000:overload###0.094___perltoot###0.041___operator###0.036___such_as###0.036___method###0.034___eolif###0.031___overridden###0.031___override###0.031___import###0.031___overriding###0.031___predefined###0.031___redefine###0.031___obscuring###0.031___you'll###0.029___parent###0.026___classes###0.026___built-in###0.026___talking###0.026___definition###0.024___template###0.024___eol###0.023___function###0.023___builtin###0.023___pragma###0.022___perlsub###0.022___methods###0.020___class###0.020___calls###0.018___there's###0.017___different###0.015___documented###0.015___functions###0.015___example###0.015___why###0.013___open###0.013___new###0.012___you're###0.011___module###0.009___perl###0.006___
216:214###0.33,243###0.16,208###0.13,199###0.12,99###0.12,127###0.12,113###0.11,72###0.11,274###0.10,104###0.10:What's the difference between calling a function as &foo and foo()?   EOL EOL:When you call a function as &foo, you allow that function access to your current @_ values, and you bypass prototypes. The function doesn't get an empty @_--it gets yours!! While not strictly speaking a bug (it's documented that way in perlsub), it would be hard to consider this a feature in most cases. EOL EOLWhen you call your function as &foo(), then you do get a new @_, but prototyping is still circumvented. EOL EOLNormally, you want to call a function using foo(). You may only omit the parentheses if the function is already known to the compiler because it already saw the definition (use but not require), or via a forward reference or use subs declaration. Even in this case, you get a clean @_ without any of the old values leaking through where they don't belong. EOL EOL:happening###0.00388___component###0.00388___end###0.00388___software_system###0.00388___occupation###0.00388___demand###0.00388___routine###0.03101___opportunity###0.00388___job###0.00388___state###0.00388___proceeding###0.00388___subroutine###0.03101___usage###0.00388___influence###0.00388___occurrence###0.00388___erroneousness###0.00388___place_of_business###0.00388___staff###0.00388___deviation###0.03101___time###0.00388___purpose###0.03101___line###0.00388___series###0.00388___chance###0.00388___resistance###0.00388___public_presentation###0.00388___turning###0.00388___component_part###0.00388___separation###0.00388___software_package###0.00388___package###0.00388___action###0.00388___usance###0.00388___office###0.03101___procedure###0.03101___feat###0.00388___resolution###0.00388___firmness###0.00388___group_action###0.00388___resoluteness###0.00388___custom###0.00388___reason###0.00388___number###0.00388___enactment###0.00388___piece_of_material###0.00388___abnormality###0.00388___administrative_unit###0.00388___subprogram###0.03101___error###0.00388___opposition###0.00388___part###0.00388___use###0.03101___role###0.03101___resolve###0.00388___legal_right###0.00388___process###0.00388___remainder###0.03101___personation###0.00388___utility###0.00388___business###0.00388___piece_of_cloth###0.00388___disagreement###0.00388___goal###0.00388___social_event###0.00388___business_establishment###0.00388___portion###0.00388___fluctuation###0.00388___variation###0.00388___decease###0.00388___natural_event###0.00388___proceedings###0.00388___interval###0.00388___statistic###0.00388___conflict###0.03101___difference###0.06202___line_of_work###0.00388___ambivalence###0.00388___dispute###0.03101___concern###0.00388___deed###0.00388___social_occasion###0.03101___ambivalency###0.00388___sexual_relationship###0.00388___military_action###0.00388___activity###0.00388___occasion###0.03101___ground###0.00388___characterization###0.00388___work###0.00388___death###0.00388___software###0.00388___turn###0.00388___portrayal###0.00388___affair###0.03101___function###0.06202___irregularity###0.00388___oppositeness###0.00388___rite###0.00388___duty###0.00388___performance###0.00388___legal_proceeding###0.00388___usefulness###0.00388___departure###0.03101___divergence###0.03101___effort###0.00388___administrative_body###0.00388___incompatibility###0.00388___religious_rite###0.00388___exploit###0.00388:what###1.00000:what's the###1.00000:foo###0.071___function###0.061___call###0.036___already###0.026___bypass###0.023___circumvented###0.023___yours###0.023___prototypes###0.023___leaking###0.023___belong###0.023___values###0.022___forward###0.020___omit###0.020___subs###0.020___prototyping###0.020___declaration###0.020___eolnormally###0.020___saw###0.020___known###0.020___strictly_speaking###0.019___definition###0.018___clean###0.018___feature###0.017___parentheses###0.017___eolwhen###0.017___empty###0.017___calling###0.016___perlsub###0.016___compiler###0.016___allow###0.016___gets###0.015___eol###0.015___hard###0.014___consider###0.014___bug###0.014___in_this###0.013___access###0.013___reference###0.013___require###0.013___difference###0.013___what's###0.013___case###0.013___cases###0.012___current###0.012___without###0.011___documented###0.011___even###0.011___new###0.009___doesn't###0.009___it's###0.009___don't###0.008___may###0.008___using###0.008___
217:183###0.22,210###0.19,51###0.18,205###0.17,134###0.17,58###0.17,100###0.17,95###0.17,175###0.16,218###0.16:How do I create a switch or case statement?  EOL EOL:This is explained in more depth in the perlsyn. Briefly, there's no official case statement, because of the variety of tests possible in Perl (numeric comparison, string comparison, glob comparison, regex matching, overloaded comparisons, ...). Larry couldn't decide how best to do this, so he left it out, even though it's been on the wish list since perl1. EOL EOLThe general answer is to write a construct like this!: EOL EOL    for ($variable_to_test) { EOLif    (/pat1/)  { }     # do something EOLelsif (/pat2/)  { }     # do something else EOLelsif (/pat3/)  { }     # do something else EOLelse            { }     # default EOL    }   EOL EOLHere's a simple example of a switch based on pattern matching, this time lined up in a way to make it look more like a switch statement. We'll do a multi-way conditional based on the type of reference stored in $whatchamacallit!: EOL EOL    SWITCH!: for (ref $whatchamacallit) { EOL EOL/^$/&& die "not a reference"; EOL EOL/SCALAR/&& do { EOLprint_scalar($$ref); EOLlast SWITCH; EOL}; EOL EOL/ARRAY/&& do { EOLprint_array(@$ref); EOLlast SWITCH; EOL}; EOL EOL/HASH/&& do { EOLprint_hash(%$ref); EOLlast SWITCH; EOL}; EOL EOL/CODE/&& do { EOLwarn "can't print function ref"; EOLlast SWITCH; EOL}; EOL EOL# DEFAULT EOL EOLwarn "User defined type skipped"; EOL EOL    }  EOL EOLSee perlsyn/"Basic BLOCKs and Switch Statements" for many other examples in this style. EOL EOLSometimes you should change the positions of the constant and the variable. For example, let's say you wanted to test which of many answers you were given, but in a case-insensitive way that also allows abbreviations. You can use the following technique if the strings all start with different characters or if you want to arrange the matches so that one takes precedence over another, as "SEND" has precedence over "STOP" here!: EOL EOL    chomp($answer = <>); EOL    if    ("SEND"  =~ /^\Q$answer/i) { print "Action is send\n"  } EOL    elsif ("STOP"  =~ /^\Q$answer/i) { print "Action is stop\n"  } EOL    elsif ("ABORT" =~ /^\Q$answer/i) { print "Action is abort\n" } EOL    elsif ("LIST"  =~ /^\Q$answer/i) { print "Action is list\n"  } EOL    elsif ("EDIT"  =~ /^\Q$answer/i) { print "Action is edit\n"  }  EOL EOLA totally different approach is to create a hash of function references. EOL EOL    my %commands = ( EOL        "happy" => \&joy, EOL        "sad",  => \&sullen, EOL        "done"  => sub { die "See ya!!" }, EOL        "mad"   => \&angry, EOL    ); EOL EOL    print "How are you? "; EOL    chomp($string = <STDIN>); EOL    if ($commands{$string}) { EOL        $commands{$string}->(); EOL    } else { EOL        print "No such command!: $string\n"; EOL    }   EOL EOL:recommendation###0.00258___dominance###0.00258___happening###0.00258___availability###0.00258___venture###0.00258___exoskeleton###0.00258___knowledge_base###0.00258___grapheme###0.00258___knowledge_domain###0.00258___imaginary_being###0.00258___blooper###0.00258___origin###0.00258___monition###0.00258___availableness###0.00258___force###0.00258___property###0.00258___entreaty###0.00258___summary###0.00258___grammatical_constituent###0.00258___assertion###0.00258___handiness###0.00258___proceeding###0.00258___potter's_clay###0.00258___cover###0.00258___position###0.00258___playing_card###0.00258___slip###0.02067___grownup###0.00258___anchorage###0.00258___ideal###0.00258___occurrence###0.00258___blunder###0.00258___testimonial###0.00258___prayer###0.00258___printed_symbol###0.00258___warning###0.00258___example###0.02067___variable_quantity###0.00258___military_force###0.00258___physical_phenomenon###0.00258___code###0.00258___commitment###0.00258___spring_chicken###0.00258___trait###0.00258___appeal###0.00258___undergarment###0.00258___symbol###0.00258___anchorage_ground###0.00258___mental_representation###0.00258___message###0.00258___mischance###0.00258___judgement###0.00258___instance###0.02067___statement###0.04134___cognitive_content###0.00258___shield###0.00258___sheet###0.00258___sort###0.00258___physical_thing###0.00258___flight_maneuver###0.00258___form###0.00258___artefact###0.00258___argument###0.02067___mental_object###0.00258___enactment###0.00258___asseveration###0.00258___constituent###0.00258___substance###0.00258___bed_linen###0.00258___variable###0.00258___origination###0.00258___phenomenon###0.00258___dimension###0.00258___event###0.02067___entity###0.00258___status###0.00258___stem###0.00258___circumstance###0.00258___casing###0.02067___error###0.00258___housing###0.00258___anomaly###0.00258___protective_cover###0.00258___causa###0.02067___judgment###0.00258___cause###0.02067___representation###0.00258___sheet_of_paper###0.00258___type###0.02067___authorization###0.00258___justification###0.00258___eccentric###0.02067___evasion###0.00258___bloomer###0.00258___authority###0.00258___soul###0.00258___young_person###0.00258___natural_covering###0.00258___lesson###0.00258___case###0.04134___slide###0.00258___sheath###0.02067___word_of_advice###0.00258___dress###0.00258___admonition###0.00258___personation###0.00258___animal_material###0.00258___attribute###0.00258___human###0.00258___stalk###0.00258___racing_boat###0.00258___information###0.00258___protection###0.00258___judicial_decision###0.00258___taxon###0.00258___skillfulness###0.00258___boo-boo###0.00258___written_symbol###0.00258___frame###0.00258___imaginary_creature###0.00258___covering###0.00258___natural_event###0.00258___misadventure###0.00258___framing###0.00258___variety###0.00258___say-so###0.00258___military_group###0.00258___internal_representation###0.00258___framework###0.00258___education###0.00258___proceedings###0.00258___military_unit###0.00258___affirmation###0.02067___conflict###0.00258___difference###0.00258___frock###0.00258___discussion###0.00258___difference_of_opinion###0.00258___mortal###0.00258___ammo###0.00258___computer_code###0.00258___fuckup###0.00258___evidence###0.00258___bungle###0.00258___dispute###0.00258___subject###0.02067___mistake###0.00258___smoothness###0.00258___lawsuit###0.02067___give-and-take###0.00258___somebody###0.00258___someone###0.00258___term###0.00258___cavy###0.00258___instruction###0.02067___shell###0.02067___repute###0.00258___program_line###0.02067___activity###0.00258___unusual_person###0.00258___kind###0.00258___graphic_symbol###0.00258___word###0.00258___characterization###0.00258___good_word###0.00258___piece_of_paper###0.00258___authorisation###0.00258___averment###0.00258___block###0.00258___potter's_earth###0.00258___reputation###0.00258___hull###0.00258___portrayal###0.00258___character###0.02067___youth###0.00258___artifact###0.00258___garment###0.00258___command###0.02067___suit###0.02067___younker###0.00258___airplane_maneuver###0.00258___individual###0.00258___legal_proceeding###0.00258___glide###0.00258___speech_act###0.00258___adult###0.00258___ammunition###0.00258___flub###0.00258___accessibility###0.00258___inception###0.00258___person###0.00258___boner###0.00258___fault###0.00258___botch###0.00258___dedication###0.00258___mishap###0.00258___taxonomic_group###0.00258___subject_matter###0.00258___foul-up###0.00258___guinea_pig###0.02067___protective_covering###0.00258___content###0.00258___pillow_slip###0.02067:how###1.00000:how do###1.00000:switch###0.044___eol###0.035___answer/i###0.031___action###0.031___eollast###0.022___elsif###0.022___ref###0.022___print###0.018___comparison###0.014___stop###0.014___commands###0.014___statement###0.012___abort###0.012___based_on###0.012___eolelsif###0.012___whatchamacallit###0.012___send###0.012___string###0.012___eolwarn###0.011___perlsyn###0.011___edit###0.011___precedence###0.011___chomp###0.009___default###0.008___matching###0.008___something###0.008___type###0.007___answer###0.007___reference###0.007___case###0.007___create###0.006___different###0.006___happy###0.006___skipped###0.006___sullen###0.006___variable_to_test###0.006___wish_list###0.006___eolprint_array###0.006___comparisons###0.006___eolprint_hash###0.006___eolprint_scalar###0.006___eolelse###0.006___case-insensitive###0.006___abbreviations###0.006___conditional###0.006___angry###0.006___lined###0.006___mad###0.006___multi-way###0.006___depth###0.006___overloaded###0.006___pat1###0.006___briefly###0.006___eol/array###0.006___pat2###0.006___eol/code###0.006___pat3###0.006___eol/hash###0.006___sad###0.006___joy###0.006___eol/scalar###0.006___list###0.005___die###0.005___explained###0.005___totally###0.005___eolsometimes###0.005___official###0.005___blocks###0.005___statements###0.005___variety###0.005___because_of###0.005___construct###0.005___look###0.005___arrange###0.005___stored###0.005___style###0.005___technique###0.005___even_though###0.005___perl1###0.005___decide###0.005___answers###0.004___tests###0.004___in_a_way###0.004___basic###0.004___positions###0.004___function###0.004___numeric###0.004___matches###0.004___constant###0.004___glob###0.004___let's###0.004___allows###0.004___we'll###0.004___test###0.004___couldn't###0.004___make_it###0.004___regex###0.004___wanted###0.004___general###0.003___takes###0.003___left###0.003___so_that###0.003___user###0.003___larry###0.003___eola###0.003___possible###0.003___references###0.003___start###0.003___in_this###0.003___pattern###0.003___examples###0.003___command###0.003___say###0.003___eolsee###0.003___done###0.003___eolhere's###0.003___given###0.003___stdin###0.003___best###0.003___there's###0.003___defined###0.003___change###0.003___strings###0.003___characters###0.003___approach###0.003___simple###0.003___following###0.003___example###0.003___variable###0.002___hash###0.002___for_example###0.002___sub###0.002___write###0.002___time###0.002___eolthe###0.002___can't###0.002___it's###0.002___eolif###0.002___one###0.002___perl###0.001___
218:210###0.18,183###0.17,217###0.16,205###0.16,51###0.15,221###0.15,165###0.15,236###0.14,101###0.14,107###0.14:How can I catch accesses to undefined variables/functions/methods?   EOL EOL:The AUTOLOAD method, discussed in perlsub/"Autoloading" and perltoot/"AUTOLOAD!: Proxy Methods", lets you capture calls to undefined functions and methods. EOL EOLWhen it comes to undefined variables that would trigger a warning under -w, you can use a handler to trap the pseudo- signal __WARN__ like this!: EOL EOL    $SIG{__WARN__} = sub { EOL EOLfor ( $_[0] ) {# voici un switch statement EOL EOL    /Use of uninitialized value/  && do { EOL# promote warning to a fatal EOLdie $_; EOL    }; EOL EOL    # other warning cases to catch could go here; EOL EOL    warn $_; EOL} EOL EOL    };  EOL EOL:coming###0.01667___entree###0.13333___ingress###0.01667___course###0.01667___admittance###0.13333___access###0.13333___incoming###0.01667___entry###0.01667___operation###0.01667___approach###0.01667___right###0.01667___way###0.01667___approaching###0.01667___accesses###0.26667___entrance###0.01667___entering###0.01667___memory_access###0.13333:how###1.00000:how can###1.00000:undefined###0.067___warning###0.067___eol###0.056___autoload###0.048___catch###0.042___methods###0.035___promote###0.027___pseudo###0.027___trigger###0.027___uninitialized###0.027___variables/functions/methods###0.027___voici###0.027___autoloading###0.027___capture###0.024___accesses###0.024___proxy###0.024___sig###0.022___fatal###0.022___discussed###0.022___trap###0.022___lets###0.021___eoldie###0.021___warn###0.021___switch###0.021___eolwhen###0.020___perlsub###0.019___handler###0.018___statement###0.018___signal###0.018___perltoot###0.017___comes###0.016___calls###0.015___method###0.015___variables###0.014___cases###0.014___eolfor###0.014___value###0.013___functions###0.013___sub###0.011___
219:220###0.21,206###0.19,146###0.13,143###0.11,218###0.10,61###0.10,223###0.10,210###0.10,127###0.09,217###0.09:Why can't a method included in this same file be found?  EOL EOL:Some possible reasons!: your inheritance is getting confused, you've misspelled the method name, or the object is of the wrong type. Check out perltoot for details about any of the above cases. You may also use print ref($object) to find out the class $object was blessed into. EOL EOLAnother possible reason for problems is because you've used the indirect object syntax (eg, find Guru "Samy") on a class name before Perl has seen that such a package exists. It's wisest to make sure your packages are all defined before you start using them, which will be taken care of if you use the use statement instead of require. If not, make sure to use arrow notation (eg., Guru->find("Samy")) instead. Object notation is explained in perlobj. EOL EOLMake sure to read about creating modules in perlmod and the perils of indirect objects in perlobj/"WARNING". EOL EOL:mode###0.03333___fashion###0.03333___style###0.03333___religious_leader###0.03333___manner###0.03333___method###0.53333___way###0.03333___wise###0.26667:why###1.00000:why can't###1.00000:object###0.047___guru###0.035___samy###0.035___notation###0.027___perlobj###0.027___class###0.022___you've###0.021___make_sure###0.021___possible###0.021___method###0.019___name###0.018___inheritance###0.017___misspelled###0.017___perils###0.017___taken###0.017___arrow###0.017___wisest###0.017___find###0.017___explained###0.015___indirect_object###0.015___confused###0.015___blessed###0.015___indirect###0.014___warning###0.014___packages###0.014___seen###0.013___perlmod###0.013___if_not###0.013___syntax###0.013___eolmake###0.013___objects###0.013___reason###0.013___included###0.013___eolanother###0.013___creating###0.012___getting###0.012___exists###0.012___ref###0.012___statement###0.011___find_out###0.011___perltoot###0.011___care###0.011___eol###0.011___check_out###0.011___sure###0.011___reasons###0.011___type###0.010___problems###0.010___start###0.010___in_this###0.010___require###0.009___wrong###0.009___cases###0.009___package###0.009___above###0.009___defined###0.009___instead_of###0.009___found###0.009___instead###0.009___details###0.008___used###0.008___modules###0.007___why###0.007___read###0.007___can't###0.007___it's###0.006___may###0.006___print###0.006___file###0.006___using###0.006___perl###0.003___
220:219###0.21,205###0.16,210###0.15,51###0.14,211###0.12,217###0.12,212###0.12,100###0.12,222###0.12,149###0.11:How can I find out my current package?  EOL EOL:If you're just a random program, you can do this to find out what the currently compiled package is!: EOL EOL    my $packname = __PACKAGE__;  EOL EOLBut, if you're a method and you want to print an error message that includes the kind of object you were called on (which is not necessarily the same as the one in which you were compiled)!: EOL EOL    sub amethod { EOLmy $self  = shift; EOLmy $class = ref($self) || $self; EOLwarn "called me from a $class object"; EOL    }  EOL EOL:change_of_location###0.00935___software_system###0.07477___collection###0.00935___water###0.00935___expelling###0.00935___course###0.00935___bundle###0.07477___line###0.00935___code###0.00935___package###0.14953___action###0.00935___move###0.00935___body_of_water###0.00935___motion###0.00935___message###0.00935___rate###0.00935___assemblage###0.00935___travel###0.00935___packet###0.07477___current###0.14953___natural_process###0.00935___emission###0.00935___flow###0.07477___accumulation###0.00935___movement###0.00935___parcel###0.00935___flowing###0.00935___stream###0.07477___boat###0.00935___natural_action###0.00935___computer_code###0.00935___aggregation###0.00935___activity###0.00935___software###0.07477___discharge###0.00935:how###1.00000:how can###1.00000:self###0.114___object###0.051___find_out###0.051___compiled###0.048___class###0.048___eolmy###0.044___package###0.041___eol###0.041___called###0.041___packname###0.038___amethod###0.038___eolwarn###0.034___necessarily###0.034___includes###0.028___you're###0.027___kind_of###0.026___random###0.026___ref###0.026___message###0.025___eolbut###0.024___currently###0.023___error###0.022___method###0.021___shift###0.021___current###0.020___is_not###0.019___sub###0.016___print###0.013___program###0.013___one###0.012___
221:183###0.34,274###0.27,205###0.23,99###0.22,101###0.20,165###0.20,175###0.20,86###0.20,210###0.19,51###0.19:How can I comment out a large block of perl code?  EOL EOL:Use embedded POD to discard it!: EOL EOL    # program is here EOL EOL    =for nobody EOL    This paragraph is commented out EOL EOL    # program continues EOL EOL    =begin comment text EOL EOL    all of this stuff EOL EOL    here will be ignored EOL    by everyone EOL EOL    =end comment text EOL EOL    =cut  EOL EOLThis can't go just anywhere. You have to put a pod directive where the parser is expecting a new statement, not just in the middle of an expression or some other arbitrary yacc grammar production. EOL EOL:coming###0.00571___suffrutex###0.00571___inactiveness###0.00571___topographic_point###0.00571___stoppage###0.04571___regular_convex_polyhedron###0.00571___stop###0.04571___schmoose###0.00571___subshrub###0.00571___position###0.00571___simple_machine###0.00571___machine###0.00571___account###0.00571___human_activity###0.00571___stay###0.00571___interference###0.04571___regular_convex_solid###0.00571___rules_of_order###0.00571___platonic_solid###0.00571___cube###0.04571___spatial_relation###0.00571___obstructer###0.00571___human_action###0.00571___statement###0.00571___platonic_body###0.00571___spot###0.00571___constraint###0.00571___number###0.00571___parliamentary_procedure###0.00571___conclusion###0.00571___notice###0.00571___order###0.00571___front###0.00571___consonant###0.00571___report###0.00571___obstruction###0.00571___inaction###0.00571___occlusion###0.04571___approach###0.00571___impedimenta###0.00571___schmooze###0.00571___solid###0.00571___act###0.00571___foreign_policy###0.00571___confabulation###0.00571___inactivity###0.00571___remark###0.04571___impediment###0.00571___trouble###0.00571___comment###0.09143___attack###0.00571___ideal_solid###0.00571___chat###0.00571___communicator###0.00571___observation###0.00571___gossip###0.04571___closure###0.04571___finish###0.00571___approaching###0.00571___pulley###0.04571___punctuation###0.00571___knob###0.00571___ending###0.00571___block###0.09143___termination###0.00571___restraint###0.00571___punctuation_mark###0.00571___parliamentary_law###0.00571___scuttlebutt###0.04571___regular_polyhedron###0.00571___observance###0.00571___obstructor###0.00571___confab###0.00571___mechanical_device###0.00571___place###0.00571:how###1.00000:how can###1.00000:eol###0.079___comment###0.078___pod###0.056___continues###0.031___nobody###0.031___directive###0.031___text###0.030___grammar###0.028___ignored###0.028___cut###0.028___commented###0.028___yacc###0.028___in_the_middle###0.028___everyone###0.028___discard###0.028___production###0.026___expecting###0.026___some_other###0.026___all_of###0.026___anywhere###0.024___paragraph###0.022___program###0.022___embedded###0.022___arbitrary###0.022___stuff###0.021___large###0.021___parser###0.021___statement###0.021___begin###0.019___block###0.019___expression###0.017___eolthis###0.014___you_have###0.013___can't###0.012___new###0.012___code###0.011___perl###0.006___
222:69###0.20,200###0.17,212###0.16,143###0.15,223###0.15,205###0.13,144###0.13,210###0.13,104###0.12,124###0.12:How do I clear a package?  EOL EOL:Use this code, provided by Mark-Jason Dominus!: EOL EOL    sub scrub_package { EOLno strict 'refs'; EOLmy $pack = shift; EOLdie "Shouldn't delete main package" EOL    if $pack eq "" || $pack eq "main"; EOLmy $stash = *{$pack . '!:!:'}{HASH}; EOLmy $name; EOLforeach $name (keys %$stash) { EOL    my $fullname = $pack . '!:!:' . $name; EOL    # Get rid of everything with that name. EOL    undef $$fullname; EOL    undef @$fullname; EOL    undef %$fullname; EOL    undef &$fullname; EOL    undef *$fullname; EOL} EOL    }  EOL EOLOr, if you're using a recent release of Perl, you can just use the Symbol!:!:delete_package() function instead. EOL EOL:software_system###0.14035___collection###0.01754___bundle###0.14035___code###0.01754___package###0.28070___message###0.01754___assemblage###0.01754___packet###0.14035___accumulation###0.01754___parcel###0.01754___boat###0.01754___computer_code###0.01754___aggregation###0.01754___software###0.14035:how###1.00000:how do###1.00000:fullname###0.142___pack###0.078___undef###0.065___name###0.050___stash###0.047___eol###0.043___eolmy###0.041___main###0.032___package###0.026___scrub_package###0.023___dominus###0.023___delete_package###0.023___mark-jason###0.023___provided###0.021___eolforeach###0.021___get_rid_of###0.021___with_that###0.021___eolno###0.019___eoldie###0.018___refs###0.017___recent###0.017___clear###0.017___symbol###0.017___everything###0.016___delete###0.015___strict###0.015___shouldn't###0.015___shift###0.013___keys###0.012___release###0.012___instead###0.012___eolor###0.011___hash###0.010___sub###0.010___function###0.008___code###0.008___you're###0.008___using###0.008___perl###0.004___
223:183###0.21,212###0.20,211###0.19,164###0.17,143###0.17,210###0.16,198###0.16,99###0.15,144###0.15,222###0.15:How can I use a variable as a variable name?  EOL EOL:Beginners often think they want to have a variable contain the name of a variable. EOL EOL    $fred    = 23; EOL    $varname = "fred"; EOL    ++$$varname;         # $fred now 24  EOL EOLThis works sometimes, but it is a very bad idea for two reasons. EOL EOLThe first reason is that this technique only works on global variables. That means that if $fred is a lexical variable created with my() in the above example, the code wouldn't work at all!: you'd accidentally access the global and skip right over the private lexical altogether. Global variables are bad because they can easily collide accidentally and in general make for non-scalable and confusing code. EOL EOLSymbolic references are forbidden under the use strict pragma. They are not true references and consequently are not reference counted or garbage collected. EOL EOLThe other reason why using a variable to hold the name of another variable is a bad idea is that the question often stems from a lack of understanding of Perl data structures, particularly hashes. By using symbolic references, you are just using the package's symbol-table hash (like %main!:!:) instead of a user-defined hash. The solution is to use your own hash or a real reference instead. EOL EOL    $fred    = 23; EOL    $varname = "fred"; EOL    $USER_VARS{$varname}++;  # not $$varname++  EOL EOLThere we're using the %USER_VARS hash instead of symbolic references. Sometimes this comes up in reading strings from the user with variable references and wanting to expand them to the values of your perl program's variables. This is also a bad idea because it conflates the program-addressable namespace and the user-addressable one. Instead of reading a string and expanding it to the actual contents of your program's own variables!: EOL EOL    $str = 'this has a $fred and $barney in it'; EOL    $str =~ s/(\$\w+)/$1/eeg;  # need double eval  EOL EOLit would be better to keep a hash around like %USER_VARS and have variable references actually refer to entries in that hash!: EOL EOL    $str =~ s/\$(\w+)/$USER_VARS{$1}/g;   # no /e here at all  EOL EOLThat's faster, cleaner, and safer than the previous approach. Of course, you don't need to use a dollar sign. You could use your own scheme to make it less confusing, like bracketed percent symbols, etc. EOL EOL    $str = 'this has a %fred% and %barney% in it'; EOL    $str =~ s/%(\w+)%/$USER_VARS{$1}/g;   # no /e here at all  EOL EOLAnother reason that folks sometimes think they want a variable to contain the name of a variable is because they don't know how to build proper data structures using hashes. For example, let's say they wanted two hashes in their program!: %fred and %barney, and that they wanted to use another scalar variable to refer to those by name. EOL EOL    $name = "fred"; EOL    $$name{WIFE} = "wilma";     # set %fred EOL EOL    $name = "barney";           EOL    $$name{WIFE} = "betty";# set %barney  EOL EOLThis is still a symbolic reference, and is still saddled with the problems enumerated above. It would be far better to write!: EOL EOL    $folks{"fred"}{WIFE}   = "wilma"; EOL    $folks{"barney"}{WIFE} = "betty";  EOL EOLAnd just use a multilevel hash to start with. EOL EOLThe only times that you absolutely must use symbolic references are when you really must refer to the symbol table. This may be because it's something that can't take a real reference to, such as a format name. Doing so may also be important for method calls, since these always go through the symbol table for resolution. EOL EOLIn those cases, you would turn off strict 'refs' temporarily so you can play around with the symbol table. For example!: EOL EOL    @colors = qw(red blue green yellow orange purple violet); EOL    for my $name (@colors) { EOL        no strict 'refs';  # renege for the block EOL        *$name = sub { "<FONT COLOR='$name'>@_</FONT>" }; EOL    }   EOL EOLAll those functions (red(), blue(), green(), etc.) appear to be separate, but the real code in the closure actually was compiled only once. EOL EOLSo, sometimes you might want to use symbolic references to directly manipulate the symbol table. This doesn't matter for formats, handles, and subroutines, because they are always global--you can't use my() on them. For scalars, arrays, and hashes, though--and usually for subroutines-- you probably only want to use hard references. EOL EOL:phratry###0.01042___effect###0.01042___personage###0.01042___perception###0.01042___characterisation###0.01042___rhetorical_device###0.01042___obloquy###0.01042___hatchet_job###0.01042___maneuver###0.01042___manoeuvre###0.01042___shape###0.01042___sum###0.01042___sept###0.01042___sum_of_money###0.01042___public_figure###0.08333___impression###0.01042___form###0.01042___name###0.16667___kinfolk###0.01042___figure###0.08333___whole_number###0.01042___defamation###0.01042___illustration###0.01042___word-painting###0.01042___calumny###0.01042___decoration###0.01042___important_person###0.01042___epithet###0.08333___play###0.01042___depiction###0.01042___amount_of_money###0.01042___ornamentation###0.01042___gens###0.08333___physical_structure###0.01042___kinsfolk###0.01042___influential_person###0.01042___family_line###0.01042___traducement###0.01042___organic_structure###0.01042___characterization###0.01042___perceptual_experience###0.01042___simulation###0.01042___integer###0.01042___family###0.01042___word_picture###0.01042___body###0.01042___picture###0.01042___percept###0.01042___delineation###0.01042___folk###0.01042___amount###0.01042___model###0.01042___ornament###0.01042:name###0.50000___how###0.50000:how can###1.00000:fred###0.038___name###0.027___barney###0.023___variable###0.021___references###0.021___eol###0.020___user_vars###0.019___varname###0.019___wife###0.015___symbolic###0.014___hash###0.012___symbol###0.011___table###0.011___folks###0.010___global###0.010___refer###0.009___bad###0.009___hashes###0.009___sometimes###0.008___reason###0.008___variables###0.008___idea###0.008___wilma###0.007___accidentally###0.007___colors###0.007___betty###0.007___font###0.007___strict###0.007___real###0.007___green###0.006___confusing###0.006___program's###0.006___reference###0.006___using###0.006___own###0.006___blue###0.006___instead_of###0.006___red###0.006___contain###0.005___refs###0.005___think###0.005___at_all###0.005___lexical###0.005___they_are###0.005___subroutines###0.005___wanted###0.005___etc.###0.005___structures###0.005___actually###0.004___eolthe###0.004___reading###0.004___code###0.004___works###0.004___better###0.004___often###0.004___above###0.004___always###0.004___set###0.003___cleaner###0.003___garbage###0.003___violet###0.003___conflates###0.003___contents###0.003___work_at###0.003___expanding###0.003___yellow###0.003___symbol-table###0.003___beginners###0.003___stems###0.003___eolall###0.003___separate###0.003___saddled###0.003___bracketed###0.003___resolution###0.003___eolsymbolic###0.003___collide###0.003___purple###0.003___program-addressable###0.003___play_around###0.003___percent###0.003___enumerated###0.003___dollar_sign###0.003___collected###0.003___orange###0.003___counted###0.003___non-scalable###0.003___lack###0.003___namespace###0.003___go_through###0.003___make_for###0.003___user-addressable###0.003___user-defined###0.003___data###0.003___two###0.003___private###0.003___turn_off###0.003___renege###0.003___skip###0.003___color###0.003___absolutely###0.003___formats###0.003___package's###0.003___safer###0.003___hold###0.003___multilevel###0.003___wouldn't###0.003___forbidden###0.003___eolthis###0.003___for_example###0.003___technique###0.003___symbols###0.003___eolthat's###0.003___we're###0.003___wanting###0.003___altogether###0.003___actual###0.003___consequently###0.003___eolit###0.003___need###0.003___can't###0.003___manipulate###0.003___eolso###0.003___understanding###0.003___temporarily###0.003___handles###0.003___scheme###0.003___don't###0.003___may###0.002___eolanother###0.002___matter###0.002___reference_to###0.002___closure###0.002___important###0.002___you_would###0.002___entries###0.002___easily###0.002___build###0.002___let's###0.002___scalars###0.002___pragma###0.002___expand###0.002___previous###0.002___created###0.002___around###0.002___in_that###0.002___make_it###0.002___double###0.002___main###0.002___appear###0.002___particularly###0.002___keep###0.002___eoland###0.002___are_not###0.002___you'd###0.002___eolthere###0.002___eval###0.002___reasons###0.002___compiled###0.002___doing###0.002___of_course###0.002___hard###0.002___proper###0.002___directly###0.002___true###0.002___block###0.002___once###0.002___comes###0.002___problems###0.002___user###0.002___less###0.002___in_general###0.002___faster###0.002___though###0.002___format###0.002___start###0.002___calls###0.002___right###0.002___access###0.002___such_as###0.002___usually###0.002___times###0.002___say###0.002___know###0.002___means###0.002___method###0.002___arrays###0.002___cases###0.002___solution###0.002___question###0.002___you_are###0.002___eolin###0.002___strings###0.002___instead###0.002___approach###0.001___scalar###0.001___functions###0.001___values###0.001___example###0.001___really###0.001___sub###0.001___something###0.001___first###0.001___write###0.001___why###0.001___probably###0.001___perl###0.001___doesn't###0.001___it's###0.001___string###0.001___program###0.001___one###0.001___
224:18###0.16,259###0.13,223###0.13,143###0.10,70###0.10,165###0.10,220###0.09,270###0.09,133###0.09,186###0.09:How do I find out which operating system I'm running under?  EOL EOL:The $^O variable ($OSNAME if you use English) contains an indication of the name of the operating system (not its release number) that your perl binary was built for. EOL EOL:organisation###0.10000___provision###0.01250___composition###0.01250___position###0.01250___opus###0.01250___spatial_relation###0.01250___system###0.20000___piece_of_music###0.01250___grouping###0.01250___administration###0.01250___musical_composition###0.01250___operating###0.20000___disposal###0.01250___group###0.01250___structure###0.01250___beginning###0.01250___piece###0.01250___commencement###0.01250___organization###0.10000___composing###0.01250___social_group###0.01250___arrangement###0.10000___activity###0.01250___orderliness###0.01250___preparation###0.01250___methodicalness###0.01250___planning###0.01250___body###0.01250___start###0.01250:which###0.50000___how###0.50000:which operating system###0.50000___how do###0.50000:operating_system###0.121___osname###0.094___indication###0.084___i'm###0.078___english###0.074___built###0.065___find_out###0.063___running###0.057___binary###0.056___contains###0.052___release###0.050___name###0.050___number###0.043___variable###0.043___eol###0.041___perl###0.019___
225:249###0.15,48###0.14,51###0.11,251###0.11,238###0.10,107###0.10,55###0.10,250###0.10,99###0.10,247###0.10:How come exec() doesn't return?  EOL EOL:Because that's what it does!: it replaces your currently running program with a different one. If you want to keep going (as is probably the case if you're asking this question) use system() instead. EOL EOL::how###1.00000:how come exec###1.00000:keep_going###0.087___asking###0.078___replaces###0.078___how_come###0.072___exec###0.063___currently###0.054___running###0.053___case###0.048___question###0.047___that's###0.047___instead###0.045___different###0.044___return###0.041___eol###0.038___probably###0.036___system###0.034___doesn't###0.034___you're###0.031___program###0.031___one###0.028___
226:165###0.35,228###0.35,232###0.23,229###0.22,230###0.22,227###0.17,183###0.17,205###0.17,221###0.14,210###0.14:How do I do fancy stuff with the keyboard/screen/mouse?  EOL EOL:How you access/control keyboards, screens, and pointing devices ("mice") is system-dependent. Try the following modules!: EOL EOLKeyboard EOL EOL    Term!:!:CapStandard perl distribution EOL    Term!:!:ReadKeyCPAN EOL    Term!:!:ReadLine!:!:GnuCPAN EOL    Term!:!:ReadLine!:!:PerlCPAN EOL    Term!:!:ScreenCPAN  EOL EOLScreen EOL EOL    Term!:!:CapStandard perl distribution EOL    CursesCPAN EOL    Term!:!:ANSIColorCPAN  EOL EOLMouse EOL EOL    TkCPAN  EOL EOLSome of these specific cases are shown below. EOL EOL:sundries###0.08247___stuff###0.16495___meaninglessness###0.01031___personalty###0.01031___hokum###0.01031___personal_property###0.01031___equipment###0.01031___artefact###0.01031___personal_estate###0.01031___substance###0.01031___whatchamacallit###0.08247___info###0.01031___private_property###0.01031___information###0.01031___applicant###0.01031___nonsense###0.01031___applier###0.01031___nonsensicality###0.01031___clobber###0.08247___sundry###0.08247___poppycock###0.08247___matter###0.01031___artifact###0.01031___hooey###0.08247___material###0.08247___whatsis###0.08247:how###1.00000:how do###1.00000:term###0.118___eol###0.061___capstandard###0.056___readline###0.046___eolscreen###0.028___readkeycpan###0.028___eolkeyboard###0.028___eolmouse###0.028___screencpan###0.028___cursescpan###0.028___gnucpan###0.028___screens###0.028___tkcpan###0.028___keyboards###0.028___access/control###0.028___ansicolorcpan###0.028___keyboard/screen/mouse###0.028___mice###0.028___perlcpan###0.028___pointing###0.028___fancy###0.025___system-dependent###0.025___distribution###0.024___shown###0.022___devices###0.021___eolsome###0.020___specific###0.020___below###0.019___stuff###0.019___cases###0.015___following###0.014___try###0.013___modules###0.012___perl###0.011___
227:226###0.17,165###0.16,126###0.15,228###0.14,230###0.13,58###0.12,134###0.11,217###0.11,51###0.11,232###0.11:How do I print something out in color?  EOL EOL:In general, you don't, because you don't know whether the recipient has a color-aware display device. If you know that they have an ANSI terminal that understands color, you can use the Term!:!:ANSIColor module from CPAN!: EOL EOL    use Term!:!:ANSIColor; EOL    print color("red"), "Stop!!\n", color("reset"); EOL    print color("green"), "Go!!\n", color("reset");  EOL EOLOr like this!: EOL EOL    use Term!:!:ANSIColor qw(!:constants); EOL    print RED, "Stop!!\n", RESET; EOL    print GREEN, "Go!!\n", RESET;  EOL EOL:people_of_colour###0.08791___stuff###0.01099___appearance###0.01099___color_property###0.01099___quality###0.01099___vividness###0.08791___race###0.01099___image###0.01099___timbre###0.01099___colour###0.08791___sort###0.01099___form###0.01099___selection###0.01099___tone###0.01099___timber###0.01099___semblance###0.08791___coloring###0.01099___ikon###0.01099___interest###0.01099___choice###0.01099___variety###0.01099___visual_property###0.01099___kind###0.01099___option###0.01099___interestingness###0.01099___colouring###0.01099___color###0.17582___picture###0.01099___colouring_material###0.08791___icon###0.01099___visual_aspect###0.01099___material###0.01099___pick###0.01099___colouration###0.08791:how###1.00000:how do###1.00000:color###0.154___reset###0.090___ansicolor###0.086___print###0.052___term###0.051___green###0.051___red###0.045___stop###0.043___eol###0.040___know###0.032___out_in###0.028___recipient###0.028___color-aware###0.028___display###0.025___understands###0.025___constants###0.023___ansi###0.023___they_have###0.022___don't###0.022___device###0.021___terminal###0.021___in_general###0.017___eolor###0.013___whether###0.013___something###0.012___cpan###0.009___module###0.009___
228:165###0.69,229###0.43,232###0.36,226###0.35,205###0.22,259###0.22,124###0.21,120###0.20,132###0.20,183###0.20:How do I read just one key without waiting for a return key?  EOL EOL:Controlling input buffering is a remarkably system-dependent matter. On many systems, you can just use the stty command as shown in perlfunc/getc, but as you see, that's already getting you into portability snags. EOL EOL    open(TTY, "+</dev/tty") or die "no tty!: $!!"; EOL    system "stty  cbreak </dev/tty >/dev/tty 2>&1"; EOL    $key = getc(TTY);# perhaps this works EOL    # OR ELSE EOL    sysread(TTY, $key, 1);# probably this does EOL    system "stty -cbreak </dev/tty >/dev/tty 2>&1";  EOL EOLThe Term!:!:ReadKey module from CPAN offers an easy-to-use interface that should be more efficient than shelling out to stty for each key. It even includes limited support for Windows. EOL EOL    use Term!:!:ReadKey; EOL    ReadMode('cbreak'); EOL    $key = ReadKey(0); EOL    ReadMode('normal');  EOL EOLHowever, using the code requires that you have a working C compiler and can use it to build and install a CPAN module. Here's a solution using the standard POSIX module, which is already on your systems (assuming your system supports POSIX). EOL EOL    use HotKey; EOL    $key = readkey();  EOL EOLAnd here's the HotKey module, which hides the somewhat mystifying calls to manipulate the POSIX termios structures. EOL EOL    # HotKey.pm EOL    package HotKey; EOL EOL    @ISA = qw(Exporter); EOL    @EXPORT = qw(cbreak cooked readkey); EOL EOL    use strict; EOL    use POSIX qw(!:termios_h); EOL    my ($term, $oterm, $echo, $noecho, $fd_stdin); EOL EOL    $fd_stdin = fileno(STDIN); EOL    $term     = POSIX!:!:Termios->new(); EOL    $term->getattr($fd_stdin); EOL    $oterm     = $term->getlflag(); EOL EOL    $echo     = ECHO | ECHOK | ICANON; EOL    $noecho   = $oterm & ~$echo; EOL EOL    sub cbreak { EOL        $term->setlflag($noecho);  # ok, so i don't want echo either EOL        $term->setcc(VTIME, 1); EOL        $term->setattr($fd_stdin, TCSANOW); EOL    } EOL EOL    sub cooked { EOL        $term->setlflag($oterm); EOL        $term->setcc(VTIME, 0); EOL        $term->setattr($fd_stdin, TCSANOW); EOL    } EOL EOL    sub readkey { EOL        my $key = ''; EOL        cbreak(); EOL        sysread(STDIN, $key, 1); EOL        cooked(); EOL        return $key; EOL    } EOL EOL    END { cooked() } EOL EOL    1;  EOL EOL:winder###0.02446___getting_even###0.02446___retort###0.02446___copy###0.00306___filming###0.00306___historic_period###0.00306___repeating###0.00306___register###0.00306___provisions###0.00306___provision###0.00306___relative###0.00306___calculating_machine###0.00306___table###0.00306___reply###0.00306___response###0.00306___regaining###0.02446___acquisition###0.00306___calculator###0.00306___piece_of_leather###0.00306___replication###0.02446___return###0.04893___recurrence###0.02446___repair###0.00306___article_of_furniture###0.00306___reunification###0.00306___turning###0.00306___payment###0.00306___supplies###0.00306___proceeds###0.02446___fixing###0.00306___reflection###0.00306___piece_of_furniture###0.00306___weight_unit###0.00306___cognitive_content###0.00306___restoration###0.02446___stores###0.00306___group_action###0.00306___improvement###0.00306___kg###0.02446___kilogram###0.02446___artefact###0.00306___income###0.00306___mental_object###0.00306___vessel###0.00306___reappearance###0.00306___phenomenon###0.00306___reunion###0.00306___mending###0.00306___takings###0.02446___supply###0.00306___reparation###0.00306___coming_back###0.02446___repeat###0.00306___counter###0.02446___motion-picture_photography###0.00306___lick###0.00306___take###0.02446___soul###0.00306___biological_process###0.00306___consequence###0.00306___production###0.00306___pleading###0.00306___aftermath###0.00306___human###0.00306___opening###0.00306___reflexion###0.00306___beginning###0.00306___compensation###0.00306___riposte###0.02446___periodical###0.00306___tonality###0.02446___key###0.04893___relation###0.00306___homecoming###0.02446___poke###0.00306___kilo###0.02446___payoff###0.02446___comeback###0.02446___mortal###0.00306___repetition###0.00306___printing###0.00306___metric_weight_unit###0.00306___melioration###0.00306___worker###0.00306___somebody###0.00306___someone###0.00306___cinematography###0.00306___biff###0.00306___cay###0.02446___turn###0.00306___simulation###0.00306___rejoinder###0.02446___artifact###0.00306___individual###0.00306___game_equipment###0.00306___musical_notation###0.00306___issue###0.02446___reflectivity###0.00306___copying###0.00306___arrival###0.00306___person###0.00306___yield###0.02446___restitution###0.02446___supplying###0.00306___fix###0.00306___coral_reef###0.00306___mechanical_device###0.00306___product###0.00306___fixture###0.00306___paying_back###0.02446___punch###0.00306___model###0.00306___furniture###0.00306___organic_process###0.00306___content###0.00306:how###1.00000:how do###1.00000:term###0.052___eol###0.050___key###0.040___cbreak###0.036___fd_stdin###0.032___readkey###0.031___echo###0.028___dev/tty###0.026___oterm###0.026___cooked###0.026___stty###0.022___hotkey###0.022___posix###0.020___tty###0.020___noecho###0.018___tcsanow###0.013___vtime###0.013___setlflag###0.013___setcc###0.013___setattr###0.013___termios###0.013___readmode###0.011___sysread###0.010___sub###0.009___module###0.009___system###0.008___already###0.008___stdin###0.008___here's###0.007___hotkey.pm###0.007___hides###0.007___return_key###0.007___shelling###0.007___mystifying###0.007___remarkably###0.007___snags###0.007___systems###0.006___getc###0.006___controlling###0.006___getlflag###0.006___echok###0.006___icanon###0.006___isa###0.006___easy-to-use###0.006___system-dependent###0.006___getattr###0.006___exporter###0.006___buffering###0.006___termios_h###0.006___perlfunc/getc###0.006___export###0.006___limited###0.006___offers###0.006___c_compiler###0.006___somewhat###0.005___out_to###0.005___manipulate###0.005___shown###0.005___waiting###0.005___fileno###0.005___matter###0.005___requires###0.005___includes###0.005___portability###0.005___build###0.005___working###0.005___getting###0.005___or_else###0.005___using###0.005___eoland###0.004___interface###0.004___eolhowever###0.004___windows###0.004___efficient###0.004___cpan###0.004___perhaps###0.004___structures###0.004___assuming###0.004___strict###0.004___normal###0.004___install###0.004___input###0.004___calls###0.004___command###0.004___supports###0.004___support###0.004___works###0.004___solution###0.004___package###0.004___that's###0.003___without###0.003___either###0.003___even###0.003___return###0.003___die###0.003___you_have###0.003___open###0.003___standard###0.003___probably###0.003___read###0.003___eolthe###0.002___new###0.002___don't###0.002___code###0.002___one###0.002___
229:228###0.43,165###0.37,232###0.28,149###0.27,183###0.23,226###0.22,163###0.21,231###0.17,205###0.16,196###0.16:How do I check whether input is ready on the keyboard?  EOL EOL:The easiest way to do this is to read a key in nonblocking mode with the Term!:!:ReadKey module from CPAN, passing it an argument of -1 to indicate not to block!: EOL EOL    use Term!:!:ReadKey; EOL EOL    ReadMode('cbreak'); EOL EOL    if (defined ($char = ReadKey(-1)) ) { EOL        # input was waiting and it was $char EOL    } else { EOL        # no input was waiting EOL    } EOL EOL    ReadMode('normal');                  # restore normal tty settings  EOL EOL:arousal###0.01471___sex###0.01471___action###0.01471___stimulant###0.11765___sexual_activity###0.01471___drug###0.01471___input###0.23529___stimulus###0.11765___stimulation###0.11765___sex_activity###0.01471___natural_process###0.01471___information###0.01471___natural_action###0.01471___rousing###0.01471___activity###0.01471___sexual_practice###0.01471___keyboard###0.23529:how###1.00000:how do###1.00000:readkey###0.081___input###0.068___eol###0.065___waiting###0.059___readmode###0.059___char###0.056___normal###0.047___term###0.045___indicate###0.037___nonblocking###0.037___restore###0.037___keyboard###0.033___ready###0.031___cbreak###0.031___settings###0.029___passing###0.027___easiest###0.026___tty###0.026___mode###0.025___argument###0.024___block###0.023___key###0.023___defined###0.020___check###0.020___whether###0.017___read###0.015___cpan###0.012___module###0.011___
230:226###0.22,165###0.20,228###0.19,232###0.17,183###0.14,51###0.13,227###0.13,229###0.13,175###0.12,205###0.12:How do I clear the screen?  EOL EOL:If you only have do so infrequently, use system!: EOL EOL    system("clear");  EOL EOLIf you have to do this a lot, save the clear string so you can print it 100 times without calling a program 100 times!: EOL EOL    $clear_string = `clear`; EOL    print $clear_string;  EOL EOLIf you're planning on doing other screen manipulations, like cursor positions, etc, you might wish to use Term!:!:Cap module!: EOL EOL    use Term!:!:Cap; EOL    $terminal = Term!:!:Cap->Tgetent( {OSPEED => 9600} ); EOL    $clear_string = $terminal->Tputs('cl');  EOL EOL:cover###0.02326___strainer###0.02326___screen###0.37209___blind###0.18605___misrepresentation###0.02326___protective_cover###0.02326___concealment###0.02326___protection###0.02326___deception###0.02326___deceit###0.02326___sieve###0.18605___covert###0.02326___people###0.02326___protective_covering###0.02326:how###1.00000:how do###1.00000:clear_string###0.091___cap###0.091___clear###0.087___term###0.054___screen###0.050___eol###0.049___terminal###0.045___times###0.034___tgetent###0.030___cursor###0.030___manipulations###0.030___ospeed###0.030___tputs###0.030___planning###0.027___infrequently###0.027___system###0.024___positions###0.023___etc###0.022___print###0.022___calling###0.021___save###0.021___eolif###0.020___wish###0.020___doing###0.019___a_lot###0.017___without###0.015___you_have###0.013___string###0.011___you're###0.011___program###0.010___module###0.009___
231:165###0.20,228###0.20,229###0.17,166###0.15,232###0.14,259###0.13,226###0.13,258###0.12,183###0.11,51###0.11:How do I get the screen size?  EOL EOL:If you have Term!:!:ReadKey module installed from CPAN, you can use it to fetch the width and height in characters and in pixels!: EOL EOL    use Term!:!:ReadKey; EOL    ($wchar, $hchar, $wpixels, $hpixels) = GetTerminalSize();  EOL EOLThis is more portable than the raw ioctl, but not as illustrative!: EOL EOL    require 'sys/ioctl.ph'; EOL    die "no TIOCGWINSZ " unless defined &TIOCGWINSZ; EOL    open(TTY, "+</dev/tty")                     or die "No tty!: $!!"; EOL    unless (ioctl(TTY, &TIOCGWINSZ, $winsize='')) { EOL        die sprintf "$0!: ioctl TIOCGWINSZ (%08x!: $!!)\n", &TIOCGWINSZ; EOL    } EOL    ($row, $col, $xpixel, $ypixel) = unpack('S4', $winsize); EOL    print "(row,col) = ($row,$col)"; EOL    print "  (xpixel,ypixel) = ($xpixel,$ypixel)" if $xpixel || $ypixel; EOL    print "\n";  EOL EOL:cover###0.01471___strainer###0.01471___screen###0.23529___sizing###0.11765___blind###0.11765___misrepresentation###0.01471___protective_cover###0.01471___concealment###0.01471___protection###0.01471___size###0.23529___filler###0.01471___deception###0.01471___deceit###0.01471___sieve###0.11765___covert###0.01471___people###0.01471___protective_covering###0.01471:how###1.00000:how do###1.00000:tiocgwinsz###0.099___xpixel###0.079___ypixel###0.079___row###0.059___ioctl###0.042___tty###0.041___eol###0.040___winsize###0.039___readkey###0.028___die###0.026___unless###0.023___term###0.023___print###0.021___getterminalsize###0.019___hchar###0.019___height###0.019___hpixels###0.019___illustrative###0.019___col###0.019___pixels###0.019___wchar###0.019___wpixels###0.019___width###0.017___screen###0.016___raw###0.015___fetch###0.014___size###0.014___dev/tty###0.014___unpack###0.013___sprintf###0.013___installed###0.012___portable###0.012___require###0.011___defined###0.010___characters###0.010___eolthis###0.008___you_have###0.008___open###0.008___cpan###0.006___module###0.006___
232:228###0.36,165###0.33,229###0.28,226###0.23,282###0.22,234###0.18,237###0.17,230###0.17,60###0.16,259###0.15:How do I ask the user for a password?  EOL EOL:(This question has nothing to do with the web. See a different FAQ for that.) EOL EOLThere's an example of this in perlfunc/crypt). First, you put the terminal into "no echo" mode, then just read the password normally. You may do this with an old-style ioctl() function, POSIX terminal control (see POSIX or its documentation the Camel Book), or a call to the stty program, with varying degrees of portability. EOL EOLYou can also do this for most systems using the Term!:!:ReadKey module from CPAN, which is easier to use and in theory more portable. EOL EOL    use Term!:!:ReadKey; EOL EOL    ReadMode('noecho'); EOL    $password = ReadLine(0);  EOL EOL:exploiter###0.08081___spoken_language###0.01010___sacred_writing###0.01010___liberation###0.01010___freeing###0.01010___promise###0.01010___arcanum###0.01010___voice_communication###0.01010___secret###0.01010___speech###0.01010___religious_text###0.01010___statement###0.01010___hypostasis###0.01010___password###0.16162___order###0.01010___parole###0.08081___spoken_communication###0.01010___info###0.01010___computer_memory_unit###0.01010___language_unit###0.01010___religious_writing###0.01010___oral_communication###0.01010___information###0.01010___signature###0.01010___speech_communication###0.01010___sacred_text###0.01010___selfish_person###0.01010___language###0.01010___watchword###0.08081___word###0.08081___linguistic_unit###0.01010___countersign###0.08081___release###0.01010___user###0.16162:how###1.00000:how do###1.00000:password###0.063___terminal###0.044___readkey###0.042___term###0.035___eol###0.035___posix###0.032___perlfunc/crypt###0.029___old-style###0.029___degrees###0.026___varying###0.024___eolthere's###0.024___noecho###0.024___readline###0.024___stty###0.023___ask###0.023___readmode###0.023___echo###0.023___in_theory###0.023___portability###0.022___ioctl###0.021___camel###0.020___normally###0.020___mode###0.019___easier###0.019___nothing###0.019___control###0.018___book###0.018___portable###0.018___user###0.018___documentation###0.017___web###0.017___faq###0.017___question###0.015___call###0.015___eolyou###0.015___different###0.015___example###0.014___systems###0.013___first###0.012___read###0.012___may###0.011___function###0.011___program###0.010___using###0.010___cpan###0.009___module###0.009___
233:140###0.38,265###0.18,175###0.17,165###0.16,146###0.16,177###0.16,239###0.15,141###0.15,151###0.14,205###0.14:How do I read and write the serial port?  EOL EOL:This depends on which operating system your program is running on. In the case of Unix, the serial ports will be accessible through files in /dev; on other systems, device names will doubtless differ. Several problem areas common to all device interaction are the following!: EOL EOLlockfiles EOLYour system may use lockfiles to control multiple access. Make sure you follow the correct protocol. Unpredictable behavior can result from multiple processes reading from one device. EOLopen mode EOLIf you expect to use both read and write operations on the device, you'll have to open it for update (see perlfunc/"open" for details). You may wish to open it without running the risk of blocking by using sysopen() and O_RDWR|O_NDELAY|O_NOCTTY from the Fcntl module (part of the standard perl distribution). See perlfunc/"sysopen" for more on this approach. EOLend of line EOL EOLSome devices will be expecting a "\r" at the end of each line rather than a "\n". In some ports of perl, "\r" and "\n" are different from their usual (Unix) ASCII values of "\012" and "\015". You may have to give the numeric values you want directly, using octal ("\015"), hex ("0x0D"), or as a control-character specification ("\cM"). EOL EOL    print DEV "atv1\012";# wrong, for some devices EOL    print DEV "atv1\015";# right, for some devices  EOL EOLEven though with normal text files a "\n" will do the trick, there is still no unified scheme for terminating a line that is portable between Unix, DOS/Win, and Macintosh, except to terminate ALL line ends with "\015\012", and strip what you don't need from the output. This applies especially to socket I/O and autoflushing, discussed next. EOL EOLflushing output EOL EOLIf you expect characters to get to your device when you print() them, you'll want to autoflush that filehandle. You can use select() and the $| variable to control autoflushing (see perlvar/$| and perlfunc/select, or perlfaq5, ``How do I flush/unbuffer an output filehandle? Why must I do this?'')!: EOL EOL    $oldh = select(DEV); EOL    $| = 1; EOL    select($oldh);  EOL EOLYou'll also see code that does this without a temporary variable, as in EOL EOL    select((select(DEV), $| = 1)[0]);  EOL EOLOr if you don't mind pulling in a few thousand lines of code just because you're afraid of a little $| variable!: EOL EOL    use IO!:!:Handle; EOL    DEV->autoflush(1);  EOL EOLAs mentioned in the previous item, this still doesn't work when using socket I/O between Unix and Macintosh. You'll need to hardcode your line terminators, in that case. EOL EOLnon-blocking input EOLIf you are doing a blocking read() or sysread(), you'll have to arrange for an alarm handler to provide a timeout (see perlfunc/alarm). If you have a non-blocking open, you'll likely have a non-blocking read, which means you may have to use a 4-arg select() to determine whether I/O is ready on that device (see perlfunc/"select". EOL EOLWhile trying to read from his caller-id box, the notorious Jamie Zawinski <jwz@netscape.com>, after much gnashing of teeth and fighting with sysread, sysopen, POSIX's tcgetattr business, and various other functions that go bump in the night, finally came up with this!: EOL EOL    sub open_modem { EOLuse IPC!:!:Open2; EOLmy $stty = `/bin/stty -g`; EOLopen2( \*MODEM_IN, \*MODEM_OUT, "cu -l$modem_device -s2400 2>&1"); EOL# starting cu hoses /dev/tty's stty settings, even when it has EOL# been opened on a pipe... EOLsystem("/bin/stty $stty"); EOL$_ = <MODEM_IN>; EOLchomp; EOLif ( !!m/^Connected/ ) { EOL    print STDERR "$0!: cu printed `$_' instead of `Connected'\n"; EOL} EOL    }  EOL EOL:ordination###0.01136___interface###0.09091___computer_circuit###0.01136___port###0.18182___series###0.09091___side###0.01136___connectedness###0.01136___connection###0.01136___programme###0.01136___contest###0.01136___computer_programme###0.01136___computer_program###0.01136___program###0.01136___order###0.01136___grouping###0.01136___intersection###0.01136___group###0.01136___surface###0.01136___overlap###0.01136___opening###0.01136___periodical###0.01136___polynomial###0.01136___embrasure###0.09091___ordering###0.01136___connexion###0.01136___competition###0.01136___larboard###0.09091___broadcast###0.01136___convergence###0.01136___serial###0.18182:how###1.00000:how do###1.00000:dev###0.023___select###0.021___device###0.021___eol###0.017___you'll###0.011___i/o###0.011___stty###0.011___line###0.010___devices###0.010___unix###0.010___read###0.009___sysopen###0.009___modem_in###0.009___bin/stty###0.009___oldh###0.009___atv1###0.009___non-blocking###0.008___macintosh###0.008___autoflushing###0.008___perlfunc###0.008___open###0.007___output###0.007___autoflush###0.007___connected###0.007___may###0.007___blocking###0.007___sysread###0.007___ports###0.007___print###0.006___expect###0.006___multiple###0.006___socket###0.006___variable###0.006___eolif###0.006___control###0.006___running###0.005___filehandle###0.005___case###0.005___using###0.004___without###0.004___eolnon-blocking###0.004___control-character###0.004___notorious###0.004___o_noctty###0.004___on_that###0.004___open_modem###0.004___perlfaq5###0.004___perlfunc/alarm###0.004___posix's###0.004___interaction###0.004___pulling###0.004___s2400###0.004___serial_port###0.004___eollockfiles###0.004___specification###0.004___tcgetattr###0.004___teeth###0.004___eolflushing###0.004___dos/win###0.004___gnashing###0.004___terminating###0.004___terminators###0.004___dev/tty's###0.004___unified###0.004___usual###0.004___fighting###0.004___zawinski###0.004___hoses###0.004___caller-id###0.004___hardcode###0.004___bump###0.004___doubtless###0.004___eolend###0.004___eolopen2###0.004___lockfiles###0.004___jamie###0.004___box###0.004___modem_device###0.004___modem_out###0.004___night###0.004___files###0.004___values###0.004___eolchomp###0.004___eoleven###0.004___business###0.004___flush/unbuffer###0.004___eolsystem###0.004___open2###0.004___areas###0.004___accessible###0.004___applies###0.004___eolyour###0.004___afraid###0.004___item###0.004___unpredictable###0.004___terminate###0.004___ipc###0.004___finally###0.004___perlfunc/select###0.004___write###0.004___discussed###0.003___arrange###0.003___opened###0.003___get_to###0.003___o_ndelay###0.003___alarm###0.003___differ###0.003___serial###0.003___eolas###0.003___expecting###0.003___ready###0.003___strip###0.003___mentioned###0.003___thousand###0.003___octal###0.003___need###0.003___settings###0.003___scheme###0.003___risk###0.003___rather_than###0.003___mind###0.003___protocol###0.003___hex###0.003___timeout###0.003___o_rdwr###0.003___processes###0.003___starting###0.003___eolwhile###0.003___don't###0.003___ends###0.003___printed###0.003___result###0.003___except###0.003___numeric###0.003___trick###0.003___even_when###0.003___code###0.003___eolsome###0.003___eolopen###0.003___a_little###0.003___previous###0.003___temporary###0.003___various###0.003___names###0.003___depends###0.003___eolyou'll###0.003___update###0.003___a_few###0.003___eoluse###0.003___likely###0.003___in_that###0.003___stderr###0.003___fcntl###0.003___trying###0.003___pipe###0.003___handler###0.003___operations###0.003___perlvar###0.003___common###0.003___mode###0.003___follow###0.003___next###0.003___especially###0.003___ascii###0.003___determine###0.003___wish###0.003___doing###0.003___behavior###0.003___operating_system###0.003___correct###0.002___make_sure###0.002___normal###0.002___directly###0.002___provide###0.002___portable###0.002___give###0.002___reading###0.002___input###0.002___though###0.002___access###0.002___right###0.002___eolmy###0.002___handle###0.002___means###0.002___wrong###0.002___several###0.002___that_is###0.002___you_are###0.002___instead_of###0.002___lines###0.002___characters###0.002___problem###0.002___approach###0.002___different###0.002___following###0.002___details###0.002___functions###0.002___text###0.002___eolor###0.002___whether###0.002___part###0.002___work###0.002___systems###0.002___sub###0.002___why###0.002___distribution###0.002___you_have###0.002___standard###0.001___perl###0.001___system###0.001___doesn't###0.001___you're###0.001___program###0.001___one###0.001___module###0.001___
234:232###0.18,237###0.18,282###0.15,252###0.09,95###0.08,183###0.08,256###0.08,59###0.08,283###0.07,132###0.07:How do I decode encrypted password files?  EOL EOL:You spend lots and lots of money on dedicated hardware, but this is bound to get you talked about. EOL EOLSeriously, you can't if they are Unix password files--the Unix password system employs one-way encryption. It's more like hashing than encryption. The best you can check is whether something else hashes to the same string. You can't turn a hash back into the original string. Programs like Crack can forcibly (and intelligently) try to guess passwords, but don't (can't) guarantee quick success. EOL EOLIf you're worried about users selecting bad passwords, you should proactively check when they try to change their password (by modifying passwd(1), for example). EOL EOL:data_file###0.05634___spoken_language###0.00704___liberation###0.00704___sacred_writing###0.00704___promise###0.00704___freeing###0.00704___arcanum###0.00704___line###0.00704___voice_communication###0.00704___secret###0.00704___speech###0.00704___religious_text###0.00704___statement###0.00704___hypostasis###0.00704___Indian_file###0.05634___password###0.11268___order###0.00704___parole###0.05634___spoken_communication###0.00704___info###0.00704___computer_memory_unit###0.00704___record###0.00704___language_unit###0.00704___religious_writing###0.00704___oral_communication###0.00704___filing_cabinet###0.05634___information###0.00704___signature###0.00704___speech_communication###0.00704___single_file###0.05634___sacred_text###0.00704___hand_tool###0.00704___file###0.05634___language###0.00704___watchword###0.05634___files###0.11268___word###0.05634___linguistic_unit###0.00704___countersign###0.05634___office_furniture###0.00704___release###0.00704___file_cabinet###0.05634:how###1.00000:how do###1.00000:password###0.061___lots###0.038___encryption###0.038___passwords###0.038___can't###0.026___unix###0.022___check###0.022___hashing###0.021___spend###0.021___proactively###0.021___eolseriously###0.021___forcibly###0.021___talked###0.021___employs###0.021___one-way###0.021___encrypted###0.021___intelligently###0.021___worried###0.021___files###0.021___try###0.020___bound###0.019___crack###0.019___guess###0.019___success###0.017___dedicated###0.017___money###0.017___passwd###0.017___selecting###0.017___modifying###0.016___quick###0.016___hardware###0.016___string###0.016___turn###0.016___decode###0.016___users###0.015___guarantee###0.015___back###0.014___they_are###0.014___original###0.014___eol###0.014___bad###0.012___hashes###0.012___best###0.011___change###0.011___programs###0.010___whether###0.009___hash###0.009___for_example###0.009___something###0.009___system###0.008___it's###0.008___don't###0.008___you're###0.007___eolif###0.007___
235:249###0.26,248###0.25,258###0.24,236###0.17,259###0.16,247###0.16,257###0.15,264###0.15,262###0.15,146###0.11:How do I start a process in the background?  EOL EOL:You could use EOL EOL    system("cmd &")  EOL EOLor you could use fork as documented in perlfunc/"fork", with further examples in perlipc. Some things to be aware of, if you're on a Unix-like system!: EOL EOLSTDIN, STDOUT, and STDERR are shared EOLBoth the main process and the backgrounded one (the "child" process) share the same STDIN, STDOUT and STDERR filehandles. If both try to access them at once, strange things can happen. You may want to close or reopen these for the child. You can get around this with opening a pipe (see perlfunc/"open") but on some systems this means that the child process cannot outlive the parent. EOLSignals EOLYou'll have to catch the SIGCHLD signal, and possibly SIGPIPE too. SIGCHLD is sent when the backgrounded process finishes. SIGPIPE is sent when you write to a filehandle whose child process has closed (an untrapped SIGPIPE can cause your program to silently die). This is not an issue with system("cmd&"). EOLZombies EOL EOLYou have to be prepared to "reap" the child process when it finishes EOL EOL    $SIG{CHLD} = sub { wait };  EOL EOLSee perlipc/"Signals" for other examples of code to do this. Zombies are not an issue with system("prog &"). EOL EOL:background###0.14953___scope###0.07477___stuff###0.00935___service###0.00935___top###0.00935___environment###0.00935___scenery###0.00935___perception###0.00935___position###0.00935___screen###0.00935___panorama###0.00935___connecter###0.00935___stage###0.00935___connection###0.00935___vista###0.00935___setting###0.07477___military_position###0.00935___aspect###0.00935___upside###0.00935___physical_object###0.00935___magnifier###0.00935___view###0.00935___surround###0.00935___desktop###0.07477___table_service###0.00935___object###0.00935___backdrop###0.07477___extent###0.00935___environs###0.00935___surface###0.00935___prospect###0.00935___coat_of_paint###0.00935___electronic_equipment###0.00935___connective###0.00935___rational_motive###0.00935___upper_side###0.00935___connexion###0.00935___surroundings###0.00935___ground###0.07477___mounting###0.00935___crt_screen###0.00935___perceptual_experience###0.00935___top_side###0.00935___connector###0.00935___foundation###0.00935___percept###0.00935___backcloth###0.07477___material###0.00935___scene###0.00935___place###0.00935:how###1.00000:how do###1.00000:child###0.058___process###0.052___sigpipe###0.035___backgrounded###0.026___finishes###0.023___sigchld###0.021___system###0.020___cmd###0.020___sent###0.019___fork###0.018___stderr###0.018___perlipc###0.017___eol###0.017___issue###0.016___stdout###0.016___perlfunc###0.015___examples###0.015___eolsignals###0.013___outlive###0.013___reap###0.013___eolzombies###0.013___chld###0.013___silently###0.013___eolstdin###0.013___unix-like###0.013___things###0.013___prog###0.011___reopen###0.011___background###0.011___share###0.011___untrapped###0.011___zombies###0.011___eolboth###0.010___aware###0.010___parent###0.010___prepared###0.010___closed###0.010___sig###0.010___further###0.010___strange###0.010___get_around###0.010___catch###0.010___opening###0.009___whose###0.009___shared###0.009___signals###0.009___eolyou'll###0.009___cause###0.009___at_once###0.009___happen###0.009___wait###0.009___filehandles###0.009___pipe###0.009___possibly###0.009___signal###0.008___main###0.008___are_not###0.008___cannot###0.008___start###0.007___access###0.007___filehandle###0.007___eolsee###0.007___means###0.007___close###0.007___stdin###0.007___eolyou###0.006___documented###0.006___is_not###0.006___try###0.006___eolor###0.006___systems###0.005___die###0.005___sub###0.005___write###0.005___open###0.005___may###0.005___code###0.004___you're###0.004___program###0.004___one###0.004___
236:260###0.38,241###0.26,264###0.20,262###0.19,235###0.17,218###0.14,257###0.12,211###0.11,247###0.11,233###0.11:How do I trap control characters/signals?  EOL EOL:You don't actually "trap" a control character. Instead, that character generates a signal which is sent to your terminal's currently foregrounded process group, which you then trap in your process. Signals are documented in perlipc/"Signals" and the section on ``Signals'' in the Camel. EOL EOLBe warned that very few C libraries are re-entrant. Therefore, if you attempt to print() in a handler that got invoked during another stdio operation your internal structures will likely be in an inconsistent state, and your program will dump core. You can sometimes avoid this by using syswrite() instead of print(). EOL EOLUnless you're exceedingly careful, the only safe things to do inside a signal handler are (1) set a variable and (2) exit. In the first case, you should only set a variable in such a way that malloc() is not called (eg, by setting a variable that already has a value). EOL EOLFor example!: EOL EOL    $Interrupted = 0;# to ensure it has a value EOL    $SIG{INT} = sub { EOL        $Interrupted++; EOLsyswrite(STDERR, "ouch\n", 5); EOL    }  EOL EOLHowever, because syscalls restart by default, you'll find that if you're in a "slow" call, such as <FH>, read(), connect(), or wait(), that the only way to terminate them is by "longjumping" out; that is, by raising an exception. See the time-out handler for a blocking flock() in perlipc/"Signals" or the section on ``Signals'' in the Camel book. EOL EOL:restriction###0.00433___depression###0.00433___dominance###0.00433___availability###0.00433___munition###0.00433___bunker###0.03463___yap###0.03463___availableness###0.00433___force###0.00433___handiness###0.00433___position###0.00433___trap###0.06926___military_force###0.00433___code###0.00433___coup_de_main###0.00433___mouth###0.00433___condition###0.00433___string###0.00433___ambush###0.03463___clump###0.00433___device###0.00433___drum###0.00433___ascendance###0.03463___plainness###0.00433___clod###0.00433___ascendancy###0.03463___status###0.00433___mastery###0.03463___space###0.00433___plan###0.00433___sailor###0.00433___defect###0.00433___lump###0.00433___design###0.00433___oral_cavity###0.00433___play###0.00433___authorization###0.00433___surprise_attack###0.00433___authority###0.00433___gob###0.03463___fortification###0.00433___hazard###0.00433___control###0.06926___oral_fissure###0.00433___skillfulness###0.00433___opening###0.00433___gap###0.00433___discipline###0.00433___rima_oris###0.00433___flaw###0.00433___military_group###0.00433___say-so###0.00433___military_unit###0.00433___snare###0.03463___hole###0.03463___membranophone###0.00433___ball###0.00433___computer_code###0.00433___limitation###0.00433___surgical_instrument###0.00433___maw###0.03463___lying_in_wait###0.03463___cakehole###0.03463___period_of_play###0.00433___authorisation###0.00433___chunk###0.00433___restraint###0.03463___difficulty###0.00433___natural_depression###0.00433___command###0.03463___ascendence###0.03463___speech_act###0.00433___glob###0.00433___playing_period###0.00433___ascendency###0.03463___accessibility###0.00433___fault###0.00433___crewman###0.00433___domination###0.00433___confinement###0.00433___ambuscade###0.03463___tympan###0.00433:how###1.00000:how do###1.00000:signals###0.045___trap###0.030___handler###0.025___interrupted###0.024___eol###0.017___camel###0.016___variable###0.016___signal###0.016___perlipc###0.016___section###0.014___process###0.013___set###0.012___value###0.012___ouch###0.012___exceedingly###0.012___invoked###0.012___foregrounded###0.012___longjumping###0.012___ensure###0.012___eolsyswrite###0.012___inconsistent###0.012___syscalls###0.012___terminal's###0.012___eolunless###0.012___characters/signals###0.012___restart###0.012___re-entrant###0.012___raising###0.012___control_character###0.012___malloc###0.010___safe###0.010___terminate###0.010___time-out###0.010___careful###0.010___dump###0.010___during###0.010___libraries###0.010___syswrite###0.010___eolbe###0.010___sig###0.010___connect###0.010___warned###0.010___stdio###0.009___setting###0.009___flock###0.009___generates###0.009___blocking###0.009___sent###0.009___therefore###0.009___inside###0.009___attempt###0.009___core###0.009___print###0.008___you're###0.008___group###0.008___exception###0.008___wait###0.008___state###0.008___likely###0.008___slow###0.008___stderr###0.008___default###0.008___internal###0.008___int###0.008___eolhowever###0.008___structures###0.008___control###0.007___book###0.007___currently###0.007___exit###0.007___operation###0.007___actually###0.007___avoid###0.007___such_as###0.007___already###0.006___character###0.006___sometimes###0.006___case###0.006___that_is###0.006___instead_of###0.006___called###0.006___eolfor###0.006___call###0.006___instead###0.006___documented###0.006___is_not###0.006___things###0.006___find###0.005___example###0.005___you'll###0.005___first###0.005___sub###0.005___read###0.005___don't###0.004___program###0.004___using###0.004___
237:234###0.18,232###0.17,163###0.13,141###0.13,160###0.12,172###0.11,282###0.10,177###0.10,142###0.09,151###0.09:How do I modify the shadow password file on a Unix system?  EOL EOL:If perl was installed correctly and your shadow library was written properly, the getpw*() functions described in perlfunc should in theory provide (read-only) access to entries in the shadow password file. To change the file, make a new shadow password file (the format varies from system to system--see passwd(5) for specifics) and use pwd_mkdb(8) to install it (see pwd_mkdb(8) for more details). EOL EOL:appearance###0.00538___spoken_language###0.00538___end###0.00538___appendage###0.00538___liberation###0.00538___sacred_writing###0.00538___back###0.00538___time_period###0.00538___proposition###0.00538___promise###0.00538___freeing###0.00538___arcanum###0.00538___cue###0.00538___vestige###0.04301___line###0.00538___voice_communication###0.00538___secret###0.00538___speech###0.00538___condition###0.00538___religious_text###0.00538___apparition###0.04301___shadow###0.08602___hypostasis###0.00538___statement###0.00538___projection###0.00538___small_indefinite_amount###0.00538___illusion###0.00538___tail###0.04301___illumination###0.00538___password###0.08602___status###0.00538___parole###0.04301___order###0.00538___spoken_communication###0.00538___skin_colour###0.00538___semblance###0.00538___body_part###0.00538___info###0.00538___computer_memory_unit###0.00538___verso###0.00538___language_unit###0.00538___period_of_time###0.00538___process###0.00538___religious_writing###0.00538___reverse###0.00538___oral_communication###0.00538___complexion###0.00538___information###0.00538___signature###0.00538___speech_communication###0.00538___sacred_text###0.00538___skin_color###0.00538___unenlightenment###0.00538___suggestion###0.00538___outgrowth###0.00538___spirit###0.00538___clew###0.00538___language###0.00538___watchword###0.04301___clue###0.00538___word###0.04301___drawing###0.00538___ending###0.00538___linguistic_unit###0.00538___trace###0.04301___dark###0.04301___countersign###0.04301___follower###0.00538___rear###0.00538___darkness###0.04301___disembodied_spirit###0.00538___release###0.00538___value###0.00538___spy###0.00538___proffer###0.00538___scene###0.00538___period###0.00538___small_indefinite_quantity###0.00538___phantom###0.04301:how###1.00000:how do###1.00000:shadow###0.145___password###0.078___pwd_mkdb###0.072___file###0.052___specifics###0.036___getpw###0.036___read-only###0.032___varies###0.032___unix_system###0.030___properly###0.030___passwd###0.030___system###0.028___in_theory###0.028___entries###0.027___modify###0.026___correctly###0.023___library###0.023___installed###0.022___described###0.022___install###0.022___provide###0.022___format###0.021___perlfunc###0.021___access###0.020___change###0.019___written###0.018___details###0.017___functions###0.017___eol###0.015___new###0.014___perl###0.007___
238:78###0.22,79###0.21,77###0.18,30###0.14,80###0.13,261###0.12,270###0.12,75###0.11,150###0.11,58###0.10:How do I set the time and date?  EOL EOL:Assuming you're running under sufficient permissions, you should be able to set the system-wide date and time by running the date(1) program. (There is no way to set the time and date on a per-process basis.) This mechanism will work for Unix, MS-DOS, Windows, and NT; the VMS equivalent is set time. EOL EOLHowever, if all you want to do is change your timezone, you can probably get away with setting an environment variable!: EOL EOL    $ENV{TZ} = "MST7MDT";   # unixish EOL    $ENV{'SYS$TIMEZONE_DIFFERENTIAL'}="-5" # vms EOL    system "trn comp.lang.perl.misc";  EOL EOL:get_together###0.00556___blow###0.00556___day###0.00556___occupation###0.00556___escort###0.04444___job###0.00556___twenty-four_hours###0.00556___final_judgment###0.00556___decision###0.00556___promise###0.00556___prison_term###0.04444___comrade###0.00556___cut###0.00556___disposition###0.00556___rhythmic_pattern###0.00556___time###0.08889___line###0.00556___employment###0.00556___familiar###0.00556___example###0.00556___cutting###0.00556___meter###0.04444___action###0.00556___poetic_rhythm###0.00556___fixing###0.00556___fastening###0.00556___measuring_device###0.00556___string_of_words###0.00556___string###0.00556___instance###0.00556___rhythmicity###0.00556___group_action###0.00556___measuring_system###0.00556___word_string###0.00556___conclusion###0.00556___dimension###0.00556___jewelry###0.00556___shielder###0.00556___fastener###0.00556___contact###0.00556___soul###0.00556___disposal###0.00556___case###0.00556___holdfast###0.00556___cutting_off###0.00556___business###0.00556___linguistic_string###0.00556___striking###0.00556___fourth_dimension###0.04444___human###0.00556___protection###0.00556___metric_linear_unit###0.00556___prosody###0.00556___associate###0.00556___tender###0.00556___day_of_the_month###0.04444___protector###0.00556___jewellery###0.00556___mean_solar_day###0.00556___mortal###0.00556___engagement###0.04444___line_of_work###0.00556___final_decision###0.00556___someone###0.00556___somebody###0.00556___term###0.00556___attender###0.00556___guardian###0.00556___military_action###0.00556___sentence###0.04444___meeting###0.00556___fellow###0.00556___measuring_instrument###0.00556___appointment###0.04444___work###0.00556___supply_chamber###0.00556___solar_day###0.00556___defender###0.00556___impinging###0.00556___determination###0.00556___individual###0.00556___furnishings###0.00556___attendant###0.00556___person###0.00556___date###0.08889___companion###0.00556___clip###0.04444:how###1.00000:how do###1.00000:date###0.078___set###0.058___vms###0.048___time###0.047___env###0.043___running###0.035___timezone###0.028___timezone_differential###0.028___get_away###0.028___per-process###0.028___basis###0.028___mst7mdt###0.028___sufficient###0.028___system-wide###0.028___eol###0.028___trn###0.025___unixish###0.024___setting###0.022___mechanism###0.022___misc###0.021___permissions###0.021___able###0.021___sys###0.021___environment###0.020___comp.lang.###0.020___ms-dos###0.020___eolhowever###0.019___windows###0.019___assuming###0.019___equivalent###0.019___change###0.015___unix###0.015___variable###0.013___work###0.012___probably###0.011___system###0.011___you're###0.010___program###0.010___perl###0.005___
239:233###0.15,261###0.14,260###0.13,177###0.13,107###0.12,181###0.12,240###0.12,243###0.11,140###0.11,277###0.11:How can I sleep() or alarm() for under a second?  EOL EOL:If you want finer granularity than the 1 second that the sleep() function provides, the easiest way is to use the select() function as documented in perlfunc/"select". Try the Time!:!:HiRes and the BSD!:!:Itimer modules (available from CPAN). EOL EOL:signal###0.01316___warning###0.01316___fear###0.01316___alert###0.10526___device###0.01316___preparedness###0.01316___despair###0.01316___dismay###0.10526___sign###0.01316___fright###0.01316___alarm###0.21053___fearfulness###0.01316___readiness###0.01316___consternation###0.10526___warning_signal###0.10526___preparation###0.01316___warning_device###0.10526___alarum###0.10526___signaling###0.01316:how###1.00000:how can###1.00000:sleep###0.098___select###0.085___second###0.081___granularity###0.065___finer###0.065___itimer###0.065___hires###0.058___alarm###0.054___bsd###0.054___function###0.049___easiest###0.045___perlfunc###0.038___provides###0.037___documented###0.032___try###0.031___modules###0.029___eol###0.028___available###0.028___time###0.026___cpan###0.022___
240:183###0.33,176###0.25,169###0.18,243###0.18,205###0.18,69###0.17,101###0.17,165###0.16,51###0.16,210###0.16:How can I measure time under a second?  EOL EOL:In general, you may not be able to. The Time!:!:HiRes module (available from CPAN) provides this functionality for some systems. EOL EOLIf your system supports both the syscall() function in Perl as well as a system call like gettimeofday(2), then you may be able to do something like this!: EOL EOL    require 'sys/syscall.ph'; EOL EOL    $TIMEVAL_T = "LL"; EOL EOL    $done = $start = pack($TIMEVAL_T, ()); EOL EOL    syscall(&SYS_gettimeofday, $start, 0) !!= -1 EOL               or die "gettimeofday!: $!!"; EOL EOL       ########################## EOL       # DO YOUR OPERATION HERE # EOL       ########################## EOL EOL    syscall( &SYS_gettimeofday, $done, 0) !!= -1 EOL           or die "gettimeofday!: $!!"; EOL EOL    @start = unpack($TIMEVAL_T, $start); EOL    @done  = unpack($TIMEVAL_T, $done); EOL EOL    # fix microseconds EOL    for ($done[1], $start[1]) { $_ /= 1_000_000 } EOL EOL    $delta_time = sprintf "%.4f", ($done[0]  + $done[1]  ) EOL                                            - EOL                                 ($start[0] + $start[1] );  EOL EOL:blow###0.01163___final_judgment###0.01163___prison_term###0.09302___cut###0.01163___time###0.18605___rhythmic_pattern###0.01163___example###0.01163___cutting###0.01163___meter###0.09302___poetic_rhythm###0.01163___fixing###0.01163___fastening###0.01163___measuring_device###0.01163___string###0.01163___string_of_words###0.01163___instance###0.01163___rhythmicity###0.01163___measuring_system###0.01163___word_string###0.01163___dimension###0.01163___jewelry###0.01163___fastener###0.01163___case###0.01163___holdfast###0.01163___cutting_off###0.01163___linguistic_string###0.01163___fourth_dimension###0.09302___metric_linear_unit###0.01163___prosody###0.01163___jewellery###0.01163___final_decision###0.01163___term###0.01163___sentence###0.09302___measuring_instrument###0.01163___supply_chamber###0.01163___clip###0.09302:how###1.00000:how can###1.00000:start###0.095___timeval_t###0.092___done###0.091___eol###0.078___gettimeofday###0.069___syscall###0.052___sys_gettimeofday###0.046___able###0.034___unpack###0.031___microseconds###0.023___delta_time###0.023___die###0.020___hires###0.020___measure###0.020___time###0.019___fix###0.017___system_call###0.017___functionality###0.017___as_well_as###0.016___sprintf###0.015___pack###0.015___second###0.014___operation###0.014___may_not###0.014___in_general###0.013___provides###0.013___supports###0.013___require###0.013___systems###0.010___something###0.010___available###0.010___system###0.009___may###0.008___function###0.008___eolif###0.007___cpan###0.007___module###0.007___perl###0.004___
241:236###0.26,260###0.24,262###0.12,162###0.11,210###0.11,248###0.10,141###0.10,221###0.10,169###0.10,205###0.09:How can I do an atexit() or setjmp()/longjmp()? (Exception handling)   EOL EOL:Release 5 of Perl added the END block, which can be used to simulate atexit(). Each package's END block is called when the program or thread ends (see perlmod manpage for more details). EOL EOLFor example, you can use this to make sure your filter program managed to finish its output without filling up the disk!: EOL EOL    END { EOLclose(STDOUT) || die "stdout close failed!: $!!"; EOL    }   EOL EOLThe END block isn't called when untrapped signals kill the program, though, so if you use END blocks you should also use EOL EOLuse sigtrap qw(die normal-signals);  EOL EOLPerl's exception-handling mechanism is its eval() operator. You can use eval() as setjmp and die() as longjmp. For details of this, see the section on signals, especially the time-out handler for a blocking flock() in perlipc/"Signals" or the section on ``Signals'' in the Camel Book. EOL EOLIf exception handling is all you're interested in, try the exceptions.pl library (part of the standard perl distribution). EOL EOLIf you want the atexit() syntax (and an rmexit() as well), try the AtExit module available from CPAN. EOL EOL::how###1.00000:how can###1.00000:atexit###0.059___signals###0.044___setjmp###0.029___longjmp###0.029___block###0.027___handling###0.026___exception###0.021___eol###0.020___die###0.019___eval###0.018___stdout###0.018___section###0.017___called###0.015___program###0.015___exceptions.pl###0.014___normal-signals###0.014___exception-handling###0.014___managed###0.014___filling###0.014___rmexit###0.014___sigtrap###0.014___eolperl's###0.014___details###0.014___try###0.014___blocks###0.013___package's###0.013___manpage###0.013___simulate###0.013___finish###0.013___thread###0.013___time-out###0.013___filter###0.013___untrapped###0.013___interested###0.012___kill###0.012___disk###0.012___flock###0.011___added###0.011___syntax###0.011___mechanism###0.011___perlmod###0.011___eolclose###0.011___ends###0.011___failed###0.011___blocking###0.011___camel###0.010___eoluse###0.010___handler###0.010___eolif###0.010___as_well###0.009___perlipc###0.009___used_to###0.009___especially###0.009___library###0.009___book###0.009___make_sure###0.009___though###0.008___operator###0.008___output###0.008___close###0.008___release###0.007___eolfor###0.007___without###0.007___example###0.007___isn't###0.006___part###0.006___available###0.006___distribution###0.006___standard###0.006___perl###0.006___eolthe###0.005___you're###0.005___cpan###0.004___module###0.004___
242:271###0.15,52###0.11,254###0.10,64###0.09,140###0.09,252###0.09,233###0.08,112###0.08,133###0.08,16###0.08:Why doesn't my sockets program work under System V (Solaris)? What does the error message "Protocol not supported" mean?  EOL EOL:Some Sys-V based systems, notably Solaris 2.X, redefined some of the standard socket constants. Since these were constant across all architectures, they were often hardwired into perl code. The proper way to deal with this is to "use Socket" to get the correct values. EOL EOLNote that even though SunOS and Solaris are binary compatible, these values are different. Go figure. EOL EOL:organisation###0.00775___platform###0.06202___papers###0.00775___adps###0.00775___sockets###0.12403___socket###0.06202___pedagogy###0.00775___construction###0.00775___receptacle###0.00775___message###0.00775___teaching###0.00775___curriculum###0.06202___program###0.12403___system###0.00775___plan###0.06202___idea###0.00775___info###0.00775___structure###0.00775___bodily_cavity###0.00775___information###0.00775___adp_system###0.00775___written_document###0.00775___education###0.00775___computer_system###0.00775___educational_activity###0.00775___organization###0.00775___political_platform###0.06202___syllabus###0.06202___shoe###0.00775___horizontal_surface###0.00775___computing_system###0.00775___instruction###0.00775___arrangement###0.00775___show###0.00775___cavum###0.00775___drawing###0.00775___broadcast###0.06202___document###0.00775___course_of_study###0.06202___automatic_data_processing_system###0.00775___thought###0.00775___level###0.00775___cavity###0.00775:why###0.50000___what###0.50000:what does###0.50000___why doesn't###0.50000:solaris###0.086___socket###0.048___sys-v###0.034___figure###0.034___hardwired###0.034___sunos###0.034___redefined###0.034___values###0.033___compatible###0.031___notably###0.031___constants###0.028___even_though###0.028___architectures###0.028___sockets###0.028___protocol###0.027___based###0.027___across###0.026___constant###0.026___supported###0.025___deal###0.024___message###0.022___correct###0.021___proper###0.021___error###0.020___binary###0.020___eolnote###0.020___mean###0.020___often###0.019___eol###0.018___different###0.017___systems###0.015___work###0.015___why###0.015___standard###0.014___system###0.013___doesn't###0.013___code###0.012___program###0.012___perl###0.007___
243:62###0.26,244###0.18,240###0.18,216###0.16,266###0.15,205###0.13,169###0.12,239###0.11,100###0.11,7###0.10:How can I call my system's unique C functions from Perl?  EOL EOL:In most cases, you write an external module to do it--see the answer to "Where can I learn about linking C with Perl? [h2xs, xsubpp]". However, if the function is a system call, and your system supports syscall(), you can use the syscall function (documented in perlfunc). EOL EOLRemember to check the modules that came with your distribution, and CPAN as well--someone may already have written a module to do it. EOL EOL:layer###0.01724___hundred###0.13793___constant###0.01724___c###0.27586___large_integer###0.01724___speed###0.01724___speed_of_light###0.13793___velocity###0.01724___author###0.01724___light_speed###0.13793___precipitation###0.01724___downfall###0.01724___hard_drug###0.01724___writer###0.01724___snow###0.13793:how###1.00000:how can###1.00000:syscall###0.067___do_it###0.054___eolremember###0.045___external###0.040___xsubpp###0.040___unique###0.035___h2xs###0.035___system's###0.035___function###0.034___system_call###0.033___linking###0.033___someone###0.032___as_well###0.030___module###0.028___learn###0.027___however###0.027___perlfunc###0.026___answer###0.026___supports###0.025___already###0.025___cases###0.024___eol###0.024___check###0.024___call###0.023___written###0.022___documented###0.022___functions###0.022___modules###0.020___write###0.019___distribution###0.019___perl###0.018___system###0.017___may###0.017___cpan###0.015___
244:243###0.18,65###0.18,266###0.18,166###0.15,202###0.15,285###0.14,240###0.12,171###0.11,62###0.11,58###0.11:Where do I get the include files to do ioctl() or syscall()?  EOL EOL:Historically, these would be generated by the h2ph tool, part of the standard perl distribution. This program converts cpp(1) directives in C header files to files containing subroutine definitions, like &SYS_getitimer, which you can use as arguments to your functions. It doesn't work perfectly, but it usually gets most of the job done. Simple files like errno.h, syscall.h, and socket.h were fine, but the hard ones like ioctl.h nearly always need to hand-edited. Here's how to install the *.ph files!: EOL EOL    1.  become super-user EOL    2.  cd /usr/include EOL    3.  h2ph *.h */*.h  EOL EOLIf your system supports dynamic loading, for reasons of portability and sanity you probably ought to use h2xs (also part of the standard perl distribution). This tool converts C header files to Perl extensions. See perlxstut for how to get started with h2xs. EOL EOLIf your system doesn't support dynamic loading, you still probably ought to use h2xs. See perlxstut and ExtUtils!:!:MakeMaker for more information (in brief, just use make perl instead of a plain make to rebuild perl with a new static extension). EOL EOL:data_file###0.11765___line###0.01471___Indian_file###0.11765___record###0.01471___filing_cabinet###0.11765___single_file###0.11765___hand_tool###0.01471___file###0.11765___files###0.23529___office_furniture###0.01471___file_cabinet###0.11765:where###1.00000:where do###1.00000:files###0.045___h2xs###0.036___ought###0.027___converts###0.027___h2ph###0.025___tool###0.024___loading###0.022___syscall###0.022___perlxstut###0.022___header###0.022___dynamic###0.022___ioctl###0.022___eol###0.016___perl###0.015___directives###0.015___hand-edited###0.015___in_brief###0.015___get_started###0.015___historically###0.015___cpp###0.015___errno###0.015___rebuild###0.015___sanity###0.015___super-user###0.015___sys_getitimer###0.015___definitions###0.015___part###0.014___perfectly###0.013___generated###0.013___usr/include###0.013___distribution###0.013___standard###0.012___plain###0.012___makemaker###0.012___become###0.012___job###0.012___static###0.012___probably###0.012___system###0.012___containing###0.012___extutils###0.012___doesn't###0.011___nearly###0.011___portability###0.011___extensions###0.011___fine###0.011___socket###0.010___eolif###0.010___gets###0.010___reasons###0.009___arguments###0.009___extension###0.009___hard###0.009___ones###0.009___subroutine###0.009___install###0.009___supports###0.008___usually###0.008___done###0.008___support###0.008___instead_of###0.008___include###0.008___always###0.008___here's###0.007___simple###0.007___information###0.007___functions###0.007___work###0.006___need###0.006___new###0.006___program###0.005___
245:133###0.11,70###0.08,10###0.07,39###0.07,24###0.07,52###0.07,19###0.07,59###0.07,60###0.07,54###0.06:Why do setuid perl scripts complain about kernel problems?  EOL EOL:Some operating systems have bugs in the kernel that make setuid scripts inherently insecure. Perl gives you a number of options (described in perlsec) to work around such systems. EOL EOL::why###1.00000:why do###1.00000:setuid###0.119___kernel###0.106___scripts###0.080___complain###0.059___inherently###0.059___systems###0.053___insecure###0.049___options###0.049___perlsec###0.049___operating###0.043___bugs###0.043___around###0.041___gives###0.039___problems###0.036___described###0.036___number###0.027___work###0.026___eol###0.025___why###0.025___perl###0.024___
246:249###0.15,233###0.11,235###0.09,248###0.09,65###0.09,251###0.08,23###0.08,258###0.07,201###0.07,88###0.07:How can I open a pipe both to and from a command?  EOL EOL:The IPC!:!:Open2 module (part of the standard perl distribution) is an easy-to-use approach that internally uses pipe(), fork(), and exec() to do the job. Make sure you read the deadlock warnings in its documentation, though (see IPC!:!:Open2). See perlipc/"Bidirectional Communication with Another Process" and perlipc/"Bidirectional Communication with Yourself" EOL EOLYou may also use the IPC!:!:Open3 module (part of the standard perl distribution), but be warned that it has a different order of arguments from IPC!:!:Open2 (see IPC!:!:Open3). EOL EOL:dominance###0.00581___spoken_language###0.00581___bid###0.04651___commercial_instrument###0.00581___cord###0.00581___melodic_theme###0.00581___voice_communication###0.00581___offer###0.00581___code###0.00581___bidding###0.04651___try###0.00581___speech###0.00581___condition###0.00581___message###0.00581___statement###0.04651___musical_theme###0.00581___substance###0.00581___ascendance###0.00581___powerfulness###0.00581___body_process###0.00581___ascendancy###0.00581___status###0.00581___mechanism###0.00581___spoken_communication###0.00581___mastery###0.04651___invitation###0.00581___theme###0.00581___idea###0.00581___dictation###0.04651___bodily_function###0.00581___oral_communication###0.00581___control###0.04651___power###0.00581___bodily_process###0.00581___skillfulness###0.00581___discipline###0.00581___speech_communication###0.00581___standard###0.00581___fee###0.00581___education###0.00581___economic_policy###0.00581___relation###0.00581___pipage###0.04651___piping###0.04651___offering###0.00581___computer_code###0.00581___evidence###0.00581___spirit###0.00581___tubing###0.00581___instruction###0.04651___language###0.00581___tube###0.00581___program_line###0.04651___activity###0.00581___playing###0.00581___commercial_document###0.00581___criterion###0.00581___attempt###0.00581___endeavor###0.00581___pipe###0.09302___matter###0.00581___command###0.09302___ascendence###0.00581___disembodied_spirit###0.00581___declaration###0.00581___speech_act###0.00581___ascendency###0.00581___domination###0.00581___effort###0.00581___subject_matter###0.00581___content###0.00581___endeavour###0.00581:how###1.00000:how can###1.00000:ipc###0.129___open2###0.077___bidirectional###0.058___open3###0.058___communication###0.051___pipe###0.040___perlipc###0.038___deadlock###0.029___part###0.026___easy-to-use###0.025___distribution###0.025___standard###0.024___job###0.024___internally###0.024___warned###0.024___exec###0.020___order###0.020___fork###0.020___warnings###0.019___arguments###0.018___module###0.018___make_sure###0.018___though###0.017___documentation###0.017___yourself###0.016___command###0.016___uses###0.016___process###0.016___eol###0.015___eolyou###0.015___approach###0.014___different###0.014___open###0.012___read###0.011___perl###0.011___may###0.011___
247:250###0.24,264###0.23,248###0.23,235###0.16,257###0.13,69###0.13,59###0.13,144###0.12,120###0.11,51###0.11:Why can't I get the output of a command with system()?  EOL EOL:You're confusing the purpose of system() and backticks (``). system() runs a command and returns exit status information (as a 16 bit value!: the low 7 bits are the signal the process died from, if any, and the high 8 bits are the actual exit value). Backticks (``) run a command and return what it sent to STDOUT. EOL EOL    $exit_status   = system("mail-users"); EOL    $output_string = `ls`;  EOL EOL:dominance###0.00526___spoken_language###0.00526___bid###0.04211___commercial_instrument###0.00526___melodic_theme###0.00526___voice_communication###0.00526___offer###0.00526___code###0.00526___bidding###0.04211___try###0.00526___speech###0.00526___condition###0.00526___message###0.00526___statement###0.04211___musical_theme###0.00526___income###0.00526___assemblage###0.00526___substance###0.00526___ascendance###0.00526___end_product###0.04211___powerfulness###0.00526___body_process###0.00526___ascendancy###0.00526___status###0.00526___mechanism###0.00526___spoken_communication###0.00526___mastery###0.04211___invitation###0.00526___theme###0.00526___attending###0.00526___idea###0.00526___dictation###0.04211___bodily_function###0.00526___oral_communication###0.00526___production###0.00526___control###0.04211___power###0.00526___bodily_process###0.00526___skillfulness###0.00526___discipline###0.00526___speech_communication###0.00526___attendance###0.00526___standard###0.00526___education###0.00526___economic_policy###0.00526___relation###0.00526___offering###0.00526___computer_code###0.00526___evidence###0.00526___output###0.08421___spirit###0.00526___instruction###0.04211___language###0.00526___outturn###0.04211___program_line###0.04211___activity###0.00526___commercial_document###0.00526___criterion###0.00526___attempt###0.00526___endeavor###0.00526___matter###0.00526___command###0.08421___turnout###0.04211___ascendence###0.00526___disembodied_spirit###0.00526___declaration###0.00526___speech_act###0.00526___ascendency###0.00526___yield###0.04211___domination###0.00526___product###0.00526___effort###0.00526___subject_matter###0.00526___content###0.00526___endeavour###0.00526___gathering###0.00526:why###1.00000:why can't###1.00000:command###0.067___system###0.061___backticks###0.058___bits###0.056___exit###0.047___value###0.039___exit_status###0.039___purpose###0.039___died###0.039___mail-users###0.039___output_string###0.039___high###0.034___confusing###0.034___status###0.034___actual###0.032___eol###0.029___sent###0.029___returns###0.028___signal###0.026___stdout###0.024___runs###0.024___bit###0.023___process###0.022___output###0.021___run###0.021___information###0.019___return###0.018___why###0.016___can't###0.015___you're###0.014___
248:235###0.25,247###0.23,162###0.22,168###0.20,250###0.19,249###0.17,259###0.15,264###0.15,151###0.15,144###0.15:How can I capture STDERR from an external command?  EOL EOL:There are three basic ways of running external commands!: EOL EOL    system $cmd;# using system() EOL    $output = `$cmd`;# using backticks (``) EOL    open (PIPE, "cmd |");# using open()  EOL EOLWith system(), both STDOUT and STDERR will go the same place as the script's STDOUT and STDERR, unless the system() command redirects them. Backticks and open() read only the STDOUT of your command. EOL EOLWith any of these, you can change file descriptors before the call!: EOL EOL    open(STDOUT, ">logfile"); EOL    system("ls");  EOL EOLor you can use Bourne shell file-descriptor redirection!: EOL EOL    $output = `$cmd 2>some_file`; EOL    open (PIPE, "cmd 2>some_file |");  EOL EOLYou can also use file-descriptor redirection to make STDERR a duplicate of STDOUT!: EOL EOL    $output = `$cmd 2>&1`; EOL    open (PIPE, "cmd 2>&1 |");  EOL EOLNote that you cannot simply open STDERR to be a dup of STDOUT in your Perl program and avoid calling the shell to do the redirection. This doesn't work!: EOL EOL    open(STDERR, ">&STDOUT"); EOL    $alloutput = `cmd args`;  # stderr still escapes  EOL EOLThis fails because the open() makes STDERR go to where STDOUT was going at the time of the open(). The backticks then make STDOUT go to a string, but don't change STDERR (which still goes to the old STDOUT). EOL EOLNote that you must use Bourne shell (sh(1)) redirection syntax in backticks, not csh(1)!! Details on why Perl's system() and backtick and pipe opens all use the Bourne shell are in http!://www.perl.com/CPAN/doc/FMTEYEWTK/versus/ csh.whynot . To capture a command's STDERR and STDOUT together!: EOL EOL    $output = `cmd 2>&1`;                       # either with backticks EOL    $pid = open(PH, "cmd 2>&1 |");              # or with an open pipe EOL    while (<PH>) { }                            #    plus a read  EOL EOLTo capture a command's STDOUT but discard its STDERR!: EOL EOL    $output = `cmd 2>/dev/null`;                # either with backticks EOL    $pid = open(PH, "cmd 2>/dev/null |");       # or with an open pipe EOL    while (<PH>) { }                            #    plus a read  EOL EOLTo capture a command's STDERR but discard its STDOUT!: EOL EOL    $output = `cmd 2>&1 1>/dev/null`;           # either with backticks EOL    $pid = open(PH, "cmd 2>&1 1>/dev/null |");  # or with an open pipe EOL    while (<PH>) { }                            #    plus a read  EOL EOLTo exchange a command's STDOUT and STDERR in order to capture the STDERR but leave its STDOUT to come out our old STDERR!: EOL EOL    $output = `cmd 3>&1 1>&2 2>&3 3>&-`;        # either with backticks EOL    $pid = open(PH, "cmd 3>&1 1>&2 2>&3 3>&-|");# or with an open pipe EOL    while (<PH>) { }                            #    plus a read  EOL EOLTo read both a command's STDOUT and its STDERR separately, it's easiest and safest to redirect them separately to files, and then read from those files when the program is done!: EOL EOL    system("program args 1>/tmp/program.stdout 2>/tmp/program.stderr");  EOL EOLOrdering is important in all these examples. That's because the shell processes file descriptor redirections in strictly left to right order. EOL EOL    system("prog args 1>tmpfile 2>&1"); EOL    system("prog args 2>&1 1>tmpfile");  EOL EOLThe first command sends both standard out and standard error to the temporary file. The second command sends only the old standard output there, and the old standard error shows up on the old standard out. EOL EOL:dominance###0.00741___spoken_language###0.00741___bid###0.05926___commercial_instrument###0.00741___melodic_theme###0.00741___voice_communication###0.00741___offer###0.00741___code###0.00741___bidding###0.05926___try###0.00741___speech###0.00741___condition###0.00741___message###0.00741___statement###0.05926___musical_theme###0.00741___substance###0.00741___ascendance###0.00741___powerfulness###0.00741___body_process###0.00741___ascendancy###0.00741___status###0.00741___mechanism###0.00741___spoken_communication###0.00741___mastery###0.05926___invitation###0.00741___theme###0.00741___idea###0.00741___dictation###0.05926___bodily_function###0.00741___oral_communication###0.00741___control###0.05926___power###0.00741___bodily_process###0.00741___skillfulness###0.00741___discipline###0.00741___speech_communication###0.00741___standard###0.00741___education###0.00741___economic_policy###0.00741___relation###0.00741___offering###0.00741___computer_code###0.00741___evidence###0.00741___spirit###0.00741___instruction###0.05926___language###0.00741___program_line###0.05926___activity###0.00741___commercial_document###0.00741___criterion###0.00741___attempt###0.00741___endeavor###0.00741___matter###0.00741___command###0.11852___ascendence###0.00741___disembodied_spirit###0.00741___declaration###0.00741___speech_act###0.00741___ascendency###0.00741___domination###0.00741___effort###0.00741___subject_matter###0.00741___content###0.00741___endeavour###0.00741:how###1.00000:how can###1.00000:cmd###0.065___stderr###0.061___stdout###0.056___open###0.039___backticks###0.031___eol###0.030___pipe###0.029___command's###0.026___capture###0.023___output###0.023___dev/null###0.020___redirection###0.020___system###0.018___args###0.018___pid###0.018___plus###0.015___command###0.015___read###0.015___shell###0.014___bourne###0.013___eolto###0.011___standard###0.010___either###0.010___tmp/program###0.010___tmpfile###0.010___file-descriptor###0.010___some_file###0.010___discard###0.009___csh###0.009___prog###0.009___external###0.009___separately###0.008___go_to###0.008___eolwith###0.008___sends###0.008___error###0.006___eolnote###0.006___file###0.005___program###0.005___change###0.005___using###0.005___alloutput###0.005___backtick###0.005___safest###0.005___redirections###0.005___up_on###0.005___whynot###0.005___http!://www.perl.com/cpan/doc/fmteyewtk/versus/###0.005___logfile###0.005___descriptors###0.005___exchange###0.005___eolordering###0.005___files###0.005___redirect###0.004___come_out###0.004___redirects###0.004___strictly###0.004___shows###0.004___opens###0.004___in_all###0.004___descriptor###0.004___dup###0.004___in_order###0.004___script's###0.004___escapes###0.004___together###0.004___syntax###0.004___processes###0.004___basic###0.004___goes###0.003___commands###0.003___leave###0.003___duplicate###0.003___important###0.003___calling###0.003___temporary###0.003___order###0.003___fails###0.003___three###0.003___easiest###0.003___going###0.003___simply###0.003___cannot###0.003___left###0.003___second###0.003___running###0.003___place###0.003___ways###0.003___unless###0.003___and_then###0.003___avoid###0.003___right###0.003___examples###0.003___done###0.002___that's###0.002___makes###0.002___perl's###0.002___call###0.002___eolyou###0.002___details###0.002___eolor###0.002___work###0.002___eolthis###0.002___first###0.002___why###0.002___time###0.002___eolthe###0.002___doesn't###0.002___string###0.002___it's###0.002___don't###0.002___perl###0.001___
249:235###0.26,251###0.20,248###0.17,225###0.15,258###0.15,246###0.15,256###0.14,253###0.13,151###0.13,168###0.12:Why doesn't open() return an error when a pipe open fails?  EOL EOL:Because the pipe open takes place in two steps!: first Perl calls fork() to start a new process, then this new process calls exec() to run the program you really wanted to open. The first step reports success or failure to your process, so open() can only tell you whether the fork() succeeded or not. EOL EOLTo find out if the exec() step succeeded, you have to catch SIGCHLD and wait() to get the exit status. You should also catch SIGPIPE if you're writing to the child--you may not have found out the exec() failed by the time you write. This is documented in perlipc. EOL EOLIn some cases, even this won't work. If the second argument to a piped open() contains shell metacharacters, perl fork()s, then exec()s a shell to decode the metacharacters and eventually run the desired program. Now when you call wait(), you only learn whether or not the shell could be successfully started...it's best to avoid shell metacharacters. EOL EOLOn systems that follow the spawn() paradigm, open() might do what you expect--unless perl uses a shell to start your command. In this case the fork()/exec() description still applies. EOL EOL:worth###0.00800___service###0.00800___crack###0.00800___erroneousness###0.06400___cord###0.00800___responsibility###0.00800___breakdown###0.00800___misstatement###0.00800___fissure###0.00800___error###0.12800___misconception###0.00800___imperfection###0.00800___scissure###0.00800___nonaccomplishment###0.00800___incorrectness###0.00800___evilness###0.00800___fee###0.00800___responsibleness###0.00800___pipage###0.06400___wrongness###0.00800___piping###0.06400___evil###0.00800___equipment_failure###0.00800___misplay###0.06400___erroneous_belief###0.06400___mistake###0.06400___tubing###0.00800___cleft###0.00800___tube###0.00800___serve###0.00800___failure###0.00800___activity###0.00800___playing###0.00800___pipe###0.12800___imperfectness###0.00800___crevice###0.00800___fault###0.06400___nonachievement###0.00800___wrongdoing###0.06400:why###0.50000___when###0.50000:when a###0.50000___why doesn't###0.50000:exec###0.048___open###0.039___fork###0.037___shell###0.036___metacharacters###0.036___succeeded###0.027___process###0.022___catch###0.021___wait###0.019___pipe###0.018___start###0.015___calls###0.015___run###0.014___piped###0.013___spawn###0.013___desired###0.013___first_step###0.013___whether_or_not###0.013___description###0.013___status###0.012___applies###0.012___successfully###0.012___sigpipe###0.012___child###0.012___started###0.011___success###0.011___eventually###0.011___paradigm###0.011___sigchld###0.011___new###0.010___steps###0.010___failure###0.010___step###0.010___eol###0.010___failed###0.010___decode###0.010___eolon###0.009___expect###0.009___program###0.009___fails###0.009___reports###0.009___find_out###0.009___follow###0.009___perlipc###0.008___wanted###0.008___argument###0.008___tell###0.008___second###0.008___takes###0.008___perl###0.008___exit###0.008___may_not###0.008___learn###0.008___writing###0.008___unless###0.008___error###0.008___place###0.008___in_this###0.007___avoid###0.007___command###0.007___uses###0.007___case###0.007___best###0.007___contains###0.007___eolto###0.007___cases###0.007___won't###0.007___eolin###0.007___found###0.007___call###0.007___documented###0.006___even###0.006___return###0.006___really###0.006___whether###0.006___two###0.006___systems###0.006___work###0.006___first###0.005___write###0.005___why###0.005___you_have###0.005___time###0.005___doesn't###0.005___it's###0.005___you're###0.004___
250:247###0.24,163###0.20,248###0.19,141###0.14,251###0.14,183###0.14,149###0.13,100###0.13,140###0.13,177###0.13:What's wrong with using backticks in a void context?  EOL EOL:Strictly speaking, nothing. Stylistically speaking, it's not a good way to write maintainable code because backticks have a (potentially humongous) return value, and you're ignoring it. It's may also not be very efficient, because you have to read in all the lines of output, allocate memory for them, and then throw it away. Too often people are lulled to writing!: EOL EOL    `cp file file.bak`;  EOL EOLAnd now they think "Hey, I'll just always use backticks to run programs." Bad idea!: backticks are for capturing a program's output; the system() function is for running programs. EOL EOLConsider this line!: EOL EOL    `cat /etc/termcap`;  EOL EOLYou haven't assigned the output anywhere, so it just wastes memory (for a little while). You forgot to check $? to see whether the program even ran correctly, too. Even if you wrote EOL EOL    print `cat /etc/termcap`;  EOL EOLthis code could and probably should be written as EOL EOL    system("cat /etc/termcap") == 0 EOLor die "cat program failed!!";  EOL EOLwhich will get the output quickly (as it is generated, instead of only at the end) and also check the return value. EOL EOLsystem() also provides direct control over whether shell wildcard processing may take place, whereas backticks do not. EOL EOL:environment###0.03125___condition###0.03125___status###0.03125___circumstance###0.25000___information###0.03125___context###0.50000___ceremonial###0.03125___ceremonial_occasion###0.03125___ceremony###0.03125___observance###0.03125:what###1.00000:what's wrong###1.00000:backticks###0.047___etc/termcap###0.037___cat###0.034___output###0.027___eol###0.024___memory###0.015___check###0.013___value###0.012___wastes###0.012___take_place###0.012___stylistically###0.012___as_it_is###0.012___ran###0.012___hey###0.012___lulled###0.012___eolconsider###0.012___ignoring###0.012___humongous###0.012___i'll###0.012___wildcard###0.012___programs###0.012___return###0.011___whether###0.011___wrote###0.011___program's###0.011___forgot###0.011___allocate###0.011___generated###0.011___eolsystem###0.011___eolwhich###0.011___capturing###0.011___bak###0.011___maintainable###0.011___speaking###0.011___whereas###0.010___assigned###0.010___throw###0.010___strictly_speaking###0.010___in_all###0.010___system###0.009___anywhere###0.009___haven't###0.009___potentially###0.009___void###0.009___quickly###0.009___it's###0.009___may###0.009___away###0.009___failed###0.009___think###0.009___code###0.009___processing###0.009___direct###0.009___idea###0.009___a_little###0.009___file###0.009___program###0.008___even_if###0.008___eoland###0.008___efficient###0.008___correctly###0.008___nothing###0.008___do_not###0.008___control###0.008___running###0.007___writing###0.007___and_then###0.007___context###0.007___bad###0.007___people###0.007___provides###0.007___good###0.007___what's###0.007___wrong###0.006___often###0.006___run###0.006___instead_of###0.006___shell###0.006___always###0.006___eolyou###0.006___lines###0.006___written###0.006___even###0.006___eolor###0.005___line###0.005___die###0.005___eolthis###0.005___write###0.005___you_have###0.005___read###0.005___probably###0.005___function###0.004___print###0.004___you're###0.004___using###0.004___
251:104###0.25,194###0.23,249###0.20,183###0.16,105###0.14,250###0.14,83###0.13,51###0.13,101###0.13,248###0.13:How can I call backticks without shell processing?  EOL EOL:This is a bit tricky. Instead of writing EOL EOL    @ok = `grep @opts '$search_string' @filenames`;  EOL EOLYou have to do this!: EOL EOL    my @ok = (); EOL    if (open(GREP, "-|")) { EOL        while (<GREP>) { EOL    chomp; EOL            push(@ok, $_); EOL        } EOLclose GREP; EOL    } else { EOL        exec 'grep', @opts, $search_string, @filenames; EOL    }  EOL EOLJust as with system(), no shell escapes happen when you exec() a list. Further examples of this can be found in perlipc/"Safe Pipe Opens". EOL EOLNote that if you're stuck on Microsoft, no solution to this vexing issue is even possible. Even if Perl were to emulate fork(), you'd still be hosed, because Microsoft gives no argc/argv-style API. Their API always reparses from a single string, which is fundamentally wrong, but you're not likely to get the Gods of Redmond to acknowledge this and fix it for you. EOL EOL:anode###0.00699___happening###0.00699___exoskeleton###0.00699___scale###0.05594___entree###0.00699___proceeding###0.00699___cover###0.00699___position###0.00699___grownup###0.00699___plate###0.05594___base###0.00699___occurrence###0.00699___bit###0.00699___flake###0.00699___complex_body_part###0.00699___main_course###0.00699___foliage###0.00699___chip###0.00699___lithosphere###0.00699___touchstone###0.00699___receptacle###0.00699___measuring_device###0.00699___statement###0.00699___proportion###0.00699___shield###0.00699___sheet###0.00699___argument###0.00699___bed_linen###0.00699___measuring_system###0.00699___illustration###0.00699___circumstance###0.00699___casing###0.05594___housing###0.00699___fleck###0.00699___proportionality###0.00699___dish###0.00699___measure###0.00699___anatomical_structure###0.00699___container###0.00699___syntactic_category###0.00699___soul###0.00699___state_of_mind###0.00699___natural_covering###0.00699___case###0.05594___geosphere###0.00699___structure###0.00699___leaf###0.00699___leafage###0.00699___problem###0.00699___human###0.00699___stratum###0.00699___grammatical_category###0.00699___bag###0.00699___frame###0.00699___covering###0.00699___fact###0.00699___magnitude_relation###0.00699___natural_event###0.00699___scrap###0.00699___framing###0.00699___standard###0.00699___framework###0.00699___proceedings###0.00699___flat_solid###0.00699___indicator###0.00699___dental_appliance###0.00699___containerful###0.00699___carapace###0.05594___frame_of_mind###0.00699___mortal###0.00699___cuticle###0.05594___somebody###0.00699___someone###0.00699___quantitative_relation###0.00699___shell###0.11189___measuring_instrument###0.00699___criterion###0.00699___structural_member###0.00699___individual###0.00699___legal_proceeding###0.00699___musical_notation###0.00699___adult###0.00699___cut_of_beef###0.00699___person###0.00699___bodily_structure###0.00699___body_structure###0.00699:how###1.00000:how can###1.00000:grep###0.069___eol###0.038___search_string###0.037___opts###0.037___api###0.030___microsoft###0.029___filenames###0.029___exec###0.026___shell###0.020___reparses###0.018___redmond###0.018___acknowledge###0.018___argc/argv-style###0.018___emulate###0.018___hosed###0.018___vexing###0.018___fundamentally###0.016___safe###0.016___eoljust###0.016___stuck###0.016___tricky###0.016___gods###0.016___further###0.015___opens###0.015___chomp###0.014___a_bit###0.014___eolclose###0.014___escapes###0.014___backticks###0.013___fix###0.013___you're###0.013___happen###0.013___processing###0.013___fork###0.013___likely###0.013___pipe###0.013___even_if###0.012___you'd###0.012___perlipc###0.012___gives###0.012___issue###0.011___push###0.011___single###0.011___writing###0.011___possible###0.011___eolnote###0.010___examples###0.010___wrong###0.010___solution###0.010___instead_of###0.010___always###0.009___call###0.009___found###0.009___eolyou###0.009___without###0.009___even###0.009___list###0.008___open###0.007___system###0.007___string###0.007___perl###0.003___
252:167###0.21,141###0.16,165###0.13,20###0.13,168###0.12,273###0.12,176###0.12,163###0.12,177###0.11,214###0.11:Why can't my script read from STDIN after I gave it EOF (^D on Unix, ^Z on MS-DOS)?  EOL EOL:Some stdio's set error and eof flags that need clearing. The POSIX module defines clearerr() that you can use. That is the technically correct way to do it. Here are some less reliable workarounds!: EOL EOLTry keeping around the seekpointer and go there, like this!: EOL EOL    $where = tell(LOG); EOL    seek(LOG, $where, 0);  EOL EOLIf that doesn't work, try seeking to a different part of the file and then back. EOLIf that doesn't work, try seeking to a different part of the file, reading something, and then seeking back. EOLIf that doesn't work, give up on your stdio package and use sysread. EOL EOL:laborer###0.01235___handsbreadth###0.01235___forepaw###0.01235___collection###0.01235___pointer###0.01235___sacred_writing###0.01235___extremity###0.01235___hand###0.09877___hand_clapping###0.01235___jack###0.01235___handbreadth###0.01235___side###0.01235___religious_text###0.01235___assist###0.01235___applause###0.01235___assemblage###0.01235___dramatic_work###0.01235___handwriting###0.09877___sailor###0.01235___committal_to_writing###0.01235___record###0.01235___religious_writing###0.01235___production###0.01235___power###0.01235___section###0.01235___book###0.09877___accumulation###0.01235___card_player###0.01235___labourer###0.01235___fact###0.01235___sacred_text###0.01235___script###0.19753___manual_laborer###0.01235___aggregation###0.01235___dramatic_composition###0.01235___help###0.01235___assistance###0.01235___subdivision###0.01235___publication###0.01235___clapping###0.01235___writing###0.01235___aid###0.01235___ability###0.01235___crewman###0.01235___product###0.01235:why###1.00000:why can't###1.00000:seeking###0.071___log###0.037___eof###0.034___back###0.032___work###0.031___and_then###0.028___doesn't###0.027___different###0.024___eolif###0.024___give_up###0.023___workarounds###0.023___clearing###0.023___eoltry###0.023___stdio's###0.023___seekpointer###0.023___eol###0.023___try###0.022___part###0.021___flags###0.021___clearerr###0.021___defines###0.021___technically###0.019___keeping###0.019___reliable###0.018___gave###0.018___stdio###0.018___sysread###0.017___ms-dos###0.017___file###0.017___around###0.016___seek###0.016___tell###0.015___correct###0.014___do_it###0.014___reading###0.014___less###0.014___error###0.014___stdin###0.013___posix###0.013___package###0.013___script###0.013___that_is###0.013___unix###0.012___set###0.011___something###0.010___why###0.010___read###0.009___need###0.009___can't###0.009___module###0.007___
253:36###0.14,7###0.13,249###0.13,256###0.11,41###0.10,9###0.10,58###0.09,83###0.08,11###0.08,251###0.07:How can I convert my shell script to perl?  EOL EOL:Learn Perl and rewrite it. Seriously, there's no simple converter. Things that are awkward to do in the shell are easy to do in Perl, and this very awkwardness is what would make a shell->perl converter nigh-on impossible to write. By rewriting it, you'll think about what you're really trying to do, and hopefully will escape the shell's pipeline datastream paradigm, which while convenient for some matters, causes many inefficiencies. EOL EOL:anode###0.00448___laborer###0.00448___happening###0.00448___handsbreadth###0.00448___exoskeleton###0.00448___forepaw###0.00448___scale###0.03587___collection###0.00448___pointer###0.00448___sacred_writing###0.00448___extremity###0.00448___entree###0.00448___hand###0.03587___proceeding###0.00448___hand_clapping###0.00448___cover###0.00448___position###0.00448___grownup###0.00448___plate###0.03587___base###0.00448___jack###0.00448___occurrence###0.00448___bit###0.00448___handbreadth###0.00448___flake###0.00448___side###0.00448___complex_body_part###0.00448___main_course###0.00448___foliage###0.00448___chip###0.00448___lithosphere###0.00448___touchstone###0.00448___receptacle###0.00448___measuring_device###0.00448___religious_text###0.00448___statement###0.00448___proportion###0.00448___assist###0.00448___sheet###0.00448___shield###0.00448___applause###0.00448___argument###0.00448___assemblage###0.00448___bed_linen###0.00448___measuring_system###0.00448___dramatic_work###0.00448___illustration###0.00448___handwriting###0.03587___circumstance###0.00448___casing###0.03587___housing###0.00448___fleck###0.00448___sailor###0.00448___proportionality###0.00448___dish###0.00448___measure###0.00448___anatomical_structure###0.00448___committal_to_writing###0.00448___record###0.00448___syntactic_category###0.00448___container###0.00448___soul###0.00448___state_of_mind###0.00448___natural_covering###0.00448___case###0.03587___geosphere###0.00448___structure###0.00448___leaf###0.00448___religious_writing###0.00448___leafage###0.00448___production###0.00448___power###0.00448___section###0.00448___problem###0.00448___human###0.00448___stratum###0.00448___book###0.03587___accumulation###0.00448___card_player###0.00448___grammatical_category###0.00448___bag###0.00448___frame###0.00448___labourer###0.00448___covering###0.00448___fact###0.00448___magnitude_relation###0.00448___sacred_text###0.00448___scrap###0.00448___natural_event###0.00448___framing###0.00448___standard###0.00448___framework###0.00448___proceedings###0.00448___script###0.07175___flat_solid###0.00448___indicator###0.00448___dental_appliance###0.00448___containerful###0.00448___carapace###0.03587___frame_of_mind###0.00448___mortal###0.00448___manual_laborer###0.00448___aggregation###0.00448___dramatic_composition###0.00448___cuticle###0.03587___somebody###0.00448___someone###0.00448___quantitative_relation###0.00448___shell###0.07175___help###0.00448___measuring_instrument###0.00448___assistance###0.00448___subdivision###0.00448___publication###0.00448___criterion###0.00448___structural_member###0.00448___individual###0.00448___legal_proceeding###0.00448___musical_notation###0.00448___adult###0.00448___cut_of_beef###0.00448___person###0.00448___clapping###0.00448___writing###0.00448___aid###0.00448___ability###0.00448___crewman###0.00448___product###0.00448___bodily_structure###0.00448___body_structure###0.00448:how###1.00000:how can###1.00000:converter###0.068___do_in###0.060___shell###0.055___inefficiencies###0.034___impossible###0.034___pipeline###0.034___datastream###0.034___nigh-on###0.034___awkward###0.034___awkwardness###0.034___shell's###0.034___rewriting###0.030___seriously###0.030___hopefully###0.030___paradigm###0.028___think_about###0.028___causes###0.028___perl###0.027___rewrite###0.026___convenient###0.025___matters###0.025___convert###0.024___escape###0.024___trying###0.023___easy###0.022___learn###0.020___there's###0.018___script###0.018___simple###0.017___things###0.016___you'll###0.016___really###0.015___eol###0.014___write###0.014___you're###0.012___
254:177###0.33,295###0.18,198###0.16,165###0.13,140###0.12,168###0.12,259###0.11,183###0.11,146###0.11,242###0.10:Can I use perl to run a telnet or ftp session?  EOL EOL:Try the Net!:!:FTP, TCP!:!:Client, and Net!:!:Telnet modules (available from CPAN). http!://www.perl.com/CPAN/scripts/ netstuff/telnet.emul.shar will also help for emulating the telnet protocol, but Net!:!:Telnet is quite probably easier to use.. EOL EOLIf all you want to do is pretend to be telnet but don't need the initial telnet handshaking, then the standard dual-process approach will suffice!: EOL EOL    use IO!:!:Socket;     # new in 5.004 EOL    $handle = IO!:!:Socket!:!:INET->new('www.perl.com!:80') EOL    || die "can't connect to port 80 on www.perl.com!: $!!"; EOL    $handle->autoflush(1); EOL    if (fork()) {     # XXX!: undef means failure EOLselect($handle); EOLprint while <STDIN>;    # everything from stdin to socket EOL    } else { EOLprint while <$handle>;  # everything from socket to stdout EOL    } EOL    close $handle; EOL    exit;  EOL EOL::::telnet###0.105___handle###0.056___socket###0.041___net###0.037___eol###0.032___ftp###0.031___everything###0.027___eolprint###0.023___stdin###0.022___emulating###0.019___http!://www.perl.com/cpan/scripts/###0.019___io!:!:socket!:!:inet->new('www.perl.com###0.019___eolselect###0.019___netstuff/telnet###0.019___session###0.019___dual-process###0.019___initial###0.019___shar###0.019___handshaking###0.019___emul###0.019___tcp###0.017___xxx###0.017___connect###0.016___autoflush###0.016___client###0.016___pretend###0.016___failure###0.015___protocol###0.015___suffice###0.014___fork###0.013___easier###0.013___quite###0.013___www.perl.com###0.013___port###0.013___stdout###0.012___exit###0.012___help###0.011___means###0.011___close###0.011___undef###0.010___run###0.010___approach###0.010___try###0.009___die###0.008___modules###0.008___available###0.008___standard###0.008___probably###0.008___need###0.008___can't###0.007___new###0.007___don't###0.007___eolif###0.006___cpan###0.006___perl###0.004___
255:266###0.11,65###0.11,79###0.11,233###0.11,188###0.11,58###0.11,71###0.11,21###0.10,49###0.10,228###0.10:How can I write expect in Perl?  EOL EOL:Once upon a time, there was a library called chat2.pl (part of the standard perl distribution), which never really got finished. If you find it somewhere, don't use it. These days, your best bet is to look at the Expect module available from CPAN, which also requires two other modules from CPAN, IO!:!:Pty and IO!:!:Stty. EOL EOL::how###1.00000:how can###1.00000:expect###0.074___bet###0.051___chat2.pl###0.051___finished###0.051___pty###0.051___look_at###0.046___upon###0.042___somewhere###0.042___stty###0.040___requires###0.038___days###0.038___cpan###0.034___library###0.033___once###0.031___best###0.028___called###0.027___find###0.025___really###0.024___two###0.023___part###0.023___modules###0.022___eol###0.022___available###0.022___distribution###0.022___write###0.022___standard###0.021___time###0.021___perl###0.021___don't###0.019___module###0.016___
256:12###0.15,249###0.14,258###0.13,284###0.13,272###0.12,211###0.12,253###0.11,58###0.11,60###0.11,59###0.11:Is there a way to hide perl's command line from programs such as "ps"?  EOL EOL:First of all note that if you're doing this for security reasons (to avoid people seeing passwords, for example) then you should rewrite your program so that critical information is never given as an argument. Hiding the arguments won't make your program completely secure. EOL EOLTo actually alter the visible command line, you can assign to the variable $0 as documented in perlvar. This won't work on all operating systems, though. Daemon programs like sendmail place their state there, as in!: EOL EOL    $0 = "orcus [accepting connections]";  EOL EOLI {changed directory, modified my environment} in a perl script. How come the change disappeared when I exited the script? How do I get my changes to be visible?  EOL EOLUnix EOLIn the strictest sense, it can't be done--the script executes as a different process from the shell it was started from. Changes to a process are not reflected in its parent--only in any children created after the change. There is shell magic that may allow you to fake it by eval()ing the script's output in your shell; check out the comp.unix.questions FAQ for details. EOL EOL::::visible###0.025___script###0.023___shell###0.022___changes###0.021___command_line###0.020___process###0.016___won't###0.015___change###0.015___reflected###0.014___connections###0.014___exited###0.014___assign###0.014___eolunix###0.014___disappeared###0.014___orcus###0.014___children###0.014___fake###0.014___strictest###0.014___eoli###0.014___first_of_all###0.014___accepting###0.014___programs###0.014___eol###0.013___alter###0.012___hide###0.012___ing###0.012___seeing###0.012___critical###0.012___passwords###0.012___hiding###0.012___started###0.011___completely###0.011___how_come###0.011___changed###0.011___executes###0.011___magic###0.011___parent###0.011___script's###0.011___secure###0.011___sendmail###0.011___modified###0.011___comp.###0.011___sense###0.011___rewrite###0.011___daemon###0.010___environment###0.010___operating###0.010___state###0.010___program###0.010___work_on###0.009___created###0.009___allow###0.009___questions###0.009___perlvar###0.009___security###0.009___are_not###0.009___reasons###0.009___check_out###0.009___doing###0.009___arguments###0.009___eval###0.009___argument###0.009___note###0.008___so_that###0.008___actually###0.008___place###0.008___though###0.008___directory###0.008___such_as###0.008___faq###0.008___avoid###0.008___people###0.008___done###0.008___given###0.007___output###0.007___eolto###0.007___eolin###0.007___unix###0.007___perl's###0.007___different###0.007___documented###0.007___information###0.007___details###0.006___variable###0.006___systems###0.006___for_example###0.006___can't###0.005___may###0.005___you're###0.005___perl###0.002___
257:264###0.34,207###0.21,235###0.15,247###0.13,236###0.12,228###0.11,229###0.11,226###0.11,146###0.10,260###0.10:How do I close a process's filehandle without waiting for it to complete?  EOL EOL:Assuming your system supports such things, just send an appropriate signal to the process (see perlfunc/"kill"). It's common to first send a TERM signal, wait a little bit, and then send a KILL signal to finish it off. EOL EOL::how###1.00000:how do###1.00000:signal###0.102___send###0.099___kill###0.083___process's###0.050___finish###0.045___waiting###0.039___appropriate###0.037___a_little###0.036___wait###0.036___common###0.034___assuming###0.033___bit###0.030___term###0.030___and_then###0.030___complete###0.030___perlfunc###0.029___supports###0.028___process###0.028___filehandle###0.028___close###0.028___without###0.025___things###0.025___first###0.022___eol###0.021___system###0.020___it's###0.019___
258:235###0.24,259###0.24,249###0.15,228###0.15,165###0.14,256###0.13,231###0.12,118###0.12,143###0.11,248###0.11:How do I fork a daemon process?  EOL EOL:If by daemon process you mean one that's detached (disassociated from its tty), then the following process is reported to work on most Unixish systems. Non-Unix users should check their Your_OS!:!:Process module for other solutions. EOL EOLOpen /dev/tty and use the TIOCNOTTY ioctl on it. See tty(4) for details. Or better yet, you can just use the POSIX!:!:setsid() function, so you don't have to worry about process groups. EOLChange directory to / EOLReopen STDIN, STDOUT, and STDERR so they're not connected to the old tty. EOL EOLBackground yourself like this!: EOL EOL    fork && exit;  EOL EOLThe Proc!:!:Daemon module, available from CPAN, provides a function to perform these actions for you. EOL EOL:fiend###0.04790___troubler###0.00599___reproductive_organ###0.00599___effect###0.00599___spiritual_being###0.00599___watercourse###0.00599___leader###0.00599___evil_spirit###0.00599___crotch###0.04790___branching###0.04790___limb###0.00599___enthusiast###0.00599___sex_organ###0.00599___cut###0.00599___devil###0.04790___prosthetic_device###0.00599___placement###0.00599___traveling###0.00599___fork###0.09581___projection###0.00599___cloth_covering###0.00599___troublemaker###0.00599___unpleasant_person###0.00599___partisan###0.00599___event###0.00599___travel###0.00599___development###0.00599___daimon###0.04790___stem###0.00599___demigod###0.04790___result###0.00599___deity###0.00599___travelling###0.00599___exclamation###0.00599___division###0.00599___prosthesis###0.00599___ramification###0.04790___exclaiming###0.00599___god###0.00599___consequence###0.00599___actor###0.00599___stalk###0.00599___length###0.00599___branch###0.04790___immortal###0.00599___stream###0.00599___subfigure###0.00599___doer###0.00599___bad_hat###0.00599___worker###0.00599___trouble_maker###0.00599___disagreeable_person###0.00599___partizan###0.00599___outcome###0.00599___arrangement###0.00599___leg###0.04790___distance###0.00599___demon###0.04790___support###0.00599___daemon###0.09581___divinity###0.00599___supernatural_being###0.00599___cut_of_meat###0.00599___issue###0.00599___upshot###0.00599___mischief-maker###0.00599___angle###0.00599:how###1.00000:how do###1.00000:process###0.065___daemon###0.052___tty###0.048___fork###0.032___actions###0.023___setsid###0.023___tiocnotty###0.023___your_os###0.023___proc###0.023___disassociated###0.023___eolreopen###0.023___detached###0.023___eolbackground###0.023___on_it###0.023___eolchange###0.023___eol###0.022___perform###0.020___reported###0.020___connected###0.019___unixish###0.019___worry###0.019___groups###0.018___non-unix###0.018___function###0.017___solutions###0.017___ioctl###0.016___users###0.016___eolopen###0.016___dev/tty###0.016___stderr###0.016___they're###0.016___work_on###0.016___stdout###0.014___module###0.014___exit###0.014___directory###0.013___provides###0.013___mean###0.013___yourself###0.013___stdin###0.012___posix###0.012___better###0.012___that's###0.012___check###0.012___following###0.011___details###0.011___systems###0.010___available###0.010___eolthe###0.009___don't###0.008___cpan###0.007___one###0.007___
259:258###0.24,165###0.22,228###0.22,162###0.17,183###0.17,134###0.17,235###0.16,51###0.16,210###0.15,248###0.15:How do I find out if I'm running interactively or not?  EOL EOL:Good question. Sometimes -t STDIN and -t STDOUT can give clues, sometimes not. EOL EOL    if (-t STDIN && -t STDOUT) { EOLprint "Now what? "; EOL    }  EOL EOLOn POSIX systems, you can test whether your own process group matches the current process group of your controlling terminal as follows!: EOL EOL    use POSIX qw/getpgrp tcgetpgrp/; EOL    open(TTY, "/dev/tty") or die $!!; EOL    $tpgrp = tcgetpgrp(fileno(*TTY)); EOL    $pgrp = getpgrp(); EOL    if ($tpgrp == $pgrp) { EOL        print "foreground\n"; EOL    } else { EOL        print "background\n"; EOL    }  EOL EOL::how###1.00000:how do###1.00000:tcgetpgrp###0.054___pgrp###0.054___tpgrp###0.054___eol###0.053___group###0.039___tty###0.037___stdout###0.034___sometimes###0.030___process###0.030___stdin###0.030___posix###0.030___as_follows###0.027___clues###0.027___foreground###0.027___qw/getpgrp###0.027___getpgrp###0.027___controlling###0.024___interactively###0.024___background###0.024___i'm###0.022___terminal###0.020___fileno###0.020___matches###0.020___print###0.019___eolon###0.019___dev/tty###0.019___test###0.018___find_out###0.018___give###0.016___running###0.016___eolprint###0.016___good###0.015___own###0.015___question###0.014___current###0.014___whether###0.012___die###0.012___systems###0.012___open###0.011___
260:236###0.38,241###0.24,264###0.20,262###0.17,239###0.13,257###0.10,188###0.10,235###0.09,243###0.09,99###0.08:How do I timeout a slow event?  EOL EOL:Use the alarm() function, probably in conjunction with a signal handler, as documented in perlipc/"Signals" and the section on ``Signals'' in the Camel. You may instead use the more flexible Sys!:!:AlarmCall module available from CPAN. EOL EOL:happening###0.00794___effect###0.06349___import###0.00794___appearance###0.00794___provisions###0.00794___provision###0.00794___proceeding###0.00794___relative###0.00794___cover###0.00794___grownup###0.00794___occurrence###0.00794___notion###0.00794___opinion###0.00794___supplies###0.00794___statement###0.00794___signification###0.00794___cognitive_content###0.00794___stores###0.00794___impression###0.00794___argument###0.00794___income###0.00794___mental_object###0.00794___bed_linen###0.00794___phenomenon###0.00794___event###0.12698___circumstance###0.00794___result###0.00794___supply###0.00794___housing###0.00794___feeling###0.00794___syntactic_category###0.00794___container###0.00794___symptom###0.00794___soul###0.00794___state_of_mind###0.00794___natural_covering###0.00794___case###0.06349___consequence###0.06349___problem###0.00794___human###0.00794___opening###0.00794___grammatical_category###0.00794___frame###0.00794___beginning###0.00794___covering###0.00794___fact###0.00794___natural_event###0.00794___framing###0.00794___periodical###0.00794___framework###0.00794___proceedings###0.00794___relation###0.00794___containerful###0.00794___frame_of_mind###0.00794___mortal###0.00794___printing###0.00794___resultant###0.00794___validity###0.00794___belief###0.00794___someone###0.00794___somebody###0.00794___outcome###0.00794___validness###0.00794___significance###0.00794___termination###0.00794___individual###0.00794___legal_proceeding###0.00794___adult###0.00794___issue###0.06349___upshot###0.06349___person###0.00794___final_result###0.00794___supplying###0.00794___visual_aspect###0.00794___meaning###0.00794___content###0.00794:how###1.00000:how do###1.00000:signals###0.098___event###0.065___alarmcall###0.065___alarm###0.054___flexible###0.054___in_conjunction_with###0.051___timeout###0.051___sys###0.049___handler###0.045___slow###0.045___camel###0.045___signal###0.044___perlipc###0.043___section###0.039___instead###0.033___documented###0.033___eol###0.028___available###0.028___probably###0.027___may###0.025___function###0.024___cpan###0.022___module###0.020___
261:38###0.16,266###0.15,205###0.14,239###0.14,183###0.12,188###0.12,238###0.12,165###0.11,101###0.10,51###0.10:How do I set CPU limits?  EOL EOL:Use the BSD!:!:Resource module from CPAN. EOL EOL:boundary###0.04545___end###0.00568___limit###0.04545___C.P.U.###0.04545___hardware###0.00568___extremity###0.00568___differentiation###0.00568___business_organization###0.00568___limits###0.09091___line###0.00568___regulating###0.00568___digital_computer###0.00568___time_limit###0.00568___central_processing_unit###0.04545___regulation###0.00568___bounds###0.04545___processor###0.04545___demarcation###0.04545___business_organisation###0.00568___extent###0.00568___business###0.00568___central_processor###0.04545___computer_hardware###0.00568___rule###0.00568___electronic_equipment###0.00568___limitation###0.04545___worker###0.00568___distinction###0.00568___business_concern###0.00568___terminus_ad_quem###0.04545___mainframe###0.04545___concern###0.00568___terminal_point###0.04545___demarcation_line###0.04545___ending###0.00568___cpu###0.09091___bound###0.00568___indefinite_quantity###0.00568___disadvantage###0.00568___point_of_accumulation###0.04545___limit_point###0.04545:how###1.00000:how do###1.00000:limits###0.194___cpu###0.173___resource###0.161___bsd###0.161___set###0.097___eol###0.084___cpan###0.065___module###0.061___
262:236###0.19,260###0.17,235###0.15,241###0.12,249###0.10,175###0.10,58###0.09,264###0.09,183###0.08,210###0.08:How do I avoid zombies on a Unix system?  EOL EOL:Use the reaper code from perlipc/"Signals" to call wait() when a SIGCHLD is received, or else use the double-fork technique described in perlfunc/fork. EOL EOL:organisation###0.04762___zombie_spirit###0.04762___provision###0.00595___composition###0.00595___position###0.00595___zombi_spirit###0.04762___automaton###0.04762___zombies###0.09524___zombie###0.04762___opus###0.00595___snake_god###0.04762___spatial_relation###0.00595___deceased_person###0.00595___unix###0.09524___highball###0.00595___system###0.09524___piece_of_music###0.00595___dead_person###0.00595___mechanism###0.00595___grouping###0.00595___departed###0.00595___deity###0.00595___administration###0.00595___the_living_dead###0.04762___musical_composition###0.00595___anomaly###0.00595___dead_soul###0.00595___disposal###0.00595___god###0.00595___group###0.00595___structure###0.00595___beginning###0.00595___piece###0.00595___immortal###0.00595___commencement###0.00595___organization###0.04762___composing###0.00595___social_group###0.00595___spirit###0.00595___zombi###0.04762___arrangement###0.04762___activity###0.00595___unusual_person###0.00595___orderliness###0.00595___preparation###0.00595___methodicalness###0.00595___planning###0.00595___divinity###0.00595___body###0.00595___disembodied_spirit###0.00595___deceased###0.00595___decedent###0.00595___start###0.00595:how###1.00000:how do###1.00000:perlfunc/fork###0.080___double-fork###0.080___reaper###0.071___zombies###0.071___unix_system###0.066___technique###0.066___sigchld###0.066___received###0.063___signals###0.060___wait###0.058___or_else###0.056___perlipc###0.052___described###0.049___avoid###0.046___call###0.042___eol###0.035___code###0.030___
263:21###0.19,275###0.08,71###0.07,43###0.07,183###0.07,86###0.07,210###0.06,283###0.06,188###0.06,60###0.06:How do I use an SQL database?  EOL EOL:There are a number of excellent interfaces to SQL databases. See the DBD!:!:* modules available from http!:// www.perl.com/CPAN/modules/DBD . A lot of information on this can be found at http!://www.symbolstone.org/ technology/perl/DBI/ EOL EOL:database###1.00000:how###1.00000:how do###1.00000:sql###0.154___dbd###0.077___technology/perl/dbi###0.077___http!://www.symbolstone.org/###0.077___excellent###0.068___interfaces###0.068___database###0.057___databases###0.057___www.perl.com###0.052___http!://###0.046___a_lot###0.045___found###0.040___information###0.038___number###0.035___modules###0.034___eol###0.033___available###0.033___
264:257###0.34,247###0.23,260###0.20,236###0.20,235###0.15,248###0.15,207###0.13,218###0.13,51###0.11,183###0.10:How do I make a system() exit on control-C?  EOL EOL:You can't. You need to imitate the system() call (see perlipc for sample code) and then have a signal handler for the INT signal that passes the signal on to the subprocess. Or you can check for it!: EOL EOL    $rc = system($cmd); EOL    if ($rc & 127) { die "signal death" }   EOL EOL:instrument###0.00450___organisation###0.03604___achievement###0.00450___diminution###0.00450___end###0.00450___relinquishing###0.00450___provisions###0.00450___provision###0.00450___exit###0.07207___composition###0.00450___relative###0.00450___position###0.00450___legal_document###0.00450___response###0.00450___place_of_business###0.00450___opus###0.00450___official_document###0.00450___sum###0.00450___supplies###0.00450___action###0.00450___motion###0.00450___spatial_relation###0.00450___receptacle###0.00450___feat###0.00450___sum_of_money###0.00450___expiration###0.03604___cognitive_content###0.00450___relinquishment###0.00450___stores###0.00450___income###0.00450___mental_object###0.00450___conclusion###0.00450___phenomenon###0.00450___system###0.07207___piece_of_music###0.00450___supply###0.00450___grouping###0.00450___administration###0.00450___musical_composition###0.00450___experience###0.00450___amount_of_money###0.00450___passing###0.03604___reaction###0.00450___disposal###0.00450___natural_process###0.00450___group###0.00450___announcement###0.00450___transferred_possession###0.00450___decline###0.00450___structure###0.00450___final_stage###0.00450___flow###0.00450___way_out###0.03604___business_establishment###0.00450___reordering###0.00450___opening###0.00450___fluctuation###0.00450___beginning###0.00450___movement###0.00450___variation###0.00450___piece###0.00450___decease###0.00450___periodical###0.00450___transferred_property###0.00450___commencement###0.00450___stream###0.00450___relation###0.00450___natural_action###0.00450___organization###0.03604___merchandise###0.00450___wares###0.00450___composing###0.00450___printing###0.00450___loss###0.03604___social_group###0.00450___going###0.03604___deed###0.00450___success###0.00450___breath###0.00450___arrangement###0.03604___accomplishment###0.00450___failure###0.00450___activity###0.00450___legal_instrument###0.00450___orderliness###0.00450___ending###0.00450___preparation###0.00450___methodicalness###0.00450___football_play###0.00450___death###0.00450___termination###0.00450___planning###0.00450___casualty###0.00450___body###0.00450___outlet###0.03604___disadvantage###0.00450___release###0.03604___issue###0.03604___departure###0.03604___supplying###0.00450___amount###0.00450___product###0.00450___effort###0.00450___last###0.00450___content###0.00450___start###0.00450___promulgation###0.00450___exploit###0.00450:how###1.00000:how do###1.00000:signal###0.150___system###0.066___death###0.055___control-c###0.055___imitate###0.055___subprocess###0.055___passes###0.055___on_to###0.046___cmd###0.043___sample###0.043___eol###0.042___handler###0.038___int###0.037___perlipc###0.036___exit###0.034___and_then###0.033___check###0.029___call###0.029___die###0.024___need###0.022___can't###0.022___code###0.020___
265:151###0.40,143###0.19,233###0.18,154###0.17,157###0.15,141###0.14,158###0.13,163###0.13,142###0.11,183###0.11:How do I open a file without blocking?  EOL EOL:If you're lucky enough to be using a system that supports non-blocking reads (most Unixish systems do), you need only to use the O_NDELAY or O_NONBLOCK flag from the Fcntl module in conjunction with sysopen()!: EOL EOL    use Fcntl; EOL    sysopen(FH, "/tmp/somefile", O_WRONLY|O_NDELAY|O_CREAT, 0644) EOL        or die "can't open /tmp/somefile!: $!!"!:  EOL EOL::how###1.00000:how do###1.00000:tmp/somefile###0.083___o_ndelay###0.077___fcntl###0.065___sysopen###0.063___o_nonblock###0.046___non-blocking###0.041___lucky###0.041___eol###0.040___open###0.039___unixish###0.038___in_conjunction_with###0.036___flag###0.036___enough###0.036___blocking###0.035___reads###0.035___o_wronly###0.035___o_creat###0.033___supports###0.026___without###0.023___die###0.020___systems###0.020___need###0.019___can't###0.018___system###0.018___you're###0.016___file###0.016___using###0.016___module###0.014___
266:65###0.33,202###0.22,205###0.21,48###0.18,244###0.18,143###0.17,183###0.17,188###0.17,57###0.16,58###0.16:How do I install a module from CPAN?  EOL EOL:The easiest way is to have a module also named CPAN do it for you. This module comes with perl version 5.004 and later. To manually install the CPAN module, or any well-behaved CPAN module for that matter, follow these steps!: EOL EOLUnpack the source into a temporary area. EOL EOL    perl Makefile.PL  EOL EOL    make  EOL EOL    make test  EOL EOL    make install  EOL EOLIf your version of perl is compiled without dynamic loading, then you just need to replace step 3 (make) with make perl and you will get a new perl binary with your extension linked in. EOL EOLSee ExtUtils!:!:MakeMaker for more details on building extensions. See also the next question, ``What's the difference between require and use?''. EOL EOL:module###0.45714___power###0.02857___mental_faculty###0.22857___faculty###0.22857___body###0.02857___ability###0.02857:how###1.00000:how do###1.00000:install###0.048___eol###0.043___module###0.041___cpan###0.035___perl###0.027___you_will###0.026___well-behaved###0.026___area###0.026___for_that_matter###0.026___version###0.026___eolunpack###0.023___manually###0.023___replace###0.022___makemaker###0.022___makefile.pl###0.022___linked###0.020___extutils###0.020___steps###0.020___step###0.020___see_also###0.020___loading###0.019___named###0.019___building###0.019___temporary###0.019___in.###0.019___dynamic###0.019___extensions###0.019___easiest###0.018___test###0.018___follow###0.017___next###0.017___extension###0.017___compiled###0.017___later###0.016___comes###0.016___binary###0.015___do_it###0.015___require###0.015___eolsee###0.015___what's###0.015___difference###0.015___question###0.014___source###0.014___without###0.013___details###0.013___need###0.010___new###0.010___eolif###0.009___
267:163###0.18,266###0.16,141###0.15,177###0.13,160###0.13,103###0.13,142###0.13,205###0.13,143###0.12,172###0.12:What's the difference between require and use?  EOL EOL:Perl offers several different ways to include code from one file into another. Here are the deltas between the various inclusion constructs!: EOL EOL    1)  do $file is like eval `cat $file`, except the former EOL1.1!: searches @INC and updates %INC. EOL1.2!: bequeaths an *unrelated* lexical scope on the eval'ed code. EOL EOL    2)  require $file is like do $file, except the former EOL2.1!: checks for redundant loading, skipping already loaded files. EOL2.2!: raises an exception on failure to find, compile, or execute $file. EOL EOL    3)  require Module is like require "Module.pm", except the former EOL3.1!: translates each "!:!:" into your system's directory separator. EOL3.2!: primes the parser to disambiguate class Module as an indirect object. EOL EOL    4)  use Module is like require Module, except the former EOL4.1!: loads the module at compile time, not run-time. EOL4.2!: imports symbols and semantics from that package to the current one.  EOL EOLIn general, you usually want use and a proper Perl module. EOL EOL:component###0.01000___state###0.01000___erroneousness###0.01000___deviation###0.08000___series###0.01000___resistance###0.01000___turning###0.01000___component_part###0.01000___separation###0.01000___action###0.01000___feat###0.01000___group_action###0.01000___number###0.01000___piece_of_material###0.01000___abnormality###0.01000___error###0.01000___opposition###0.01000___part###0.01000___remainder###0.08000___piece_of_cloth###0.01000___disagreement###0.01000___portion###0.01000___fluctuation###0.01000___variation###0.01000___decease###0.01000___interval###0.01000___statistic###0.01000___conflict###0.08000___difference###0.16000___ambivalence###0.01000___dispute###0.08000___deed###0.01000___ambivalency###0.01000___military_action###0.01000___death###0.01000___turn###0.01000___irregularity###0.01000___oppositeness###0.01000___departure###0.08000___divergence###0.08000___effort###0.01000___incompatibility###0.01000___exploit###0.01000:what###1.00000:what's the###1.00000:former###0.053___except###0.044___require###0.042___file###0.032___eol4###0.029___module###0.028___eol3###0.026___eol2###0.026___eol1###0.024___eol###0.021___compile###0.018___imports###0.014___deltas###0.014___bequeaths###0.014___translates###0.014___skipping###0.014___redundant###0.014___disambiguate###0.014___inclusion###0.014___eval'ed###0.014___raises###0.014___inc.###0.014___unrelated###0.013___indirect_object###0.013___constructs###0.013___execute###0.013___loaded###0.013___loads###0.013___primes###0.013___searches###0.013___separator###0.013___offers###0.012___run-time###0.012___updates###0.012___symbols###0.012___inc###0.011___failure###0.011___checks###0.011___system's###0.011___loading###0.011___code###0.011___semantics###0.010___exception###0.010___various###0.010___scope###0.010___cat###0.010___lexical###0.010___parser###0.010___one###0.009___eval###0.009___class###0.009___proper###0.009___general###0.009___ways###0.008___directory###0.008___usually###0.008___already###0.008___difference###0.008___what's###0.008___package###0.008___several###0.008___include###0.007___eolin###0.007___current###0.007___different###0.007___find###0.007___files###0.007___time###0.006___perl###0.006___
268:270###0.27,269###0.21,19###0.15,183###0.13,205###0.13,221###0.12,51###0.12,210###0.12,58###0.12,165###0.12:How do I keep my own module/library directory?  EOL EOL:When you build modules, use the PREFIX option when generating Makefiles!: EOL EOL    perl Makefile.PL PREFIX=/u/mydir/perl  EOL EOLthen either set the PERL5LIB environment variable before you run scripts that use the modules/libraries (see perlrun) or say EOL EOL    use lib '/u/mydir/perl';  EOL EOLThis is almost the same as EOL EOL    BEGIN { EOLunshift(@INC, '/u/mydir/perl'); EOL    }  EOL EOLexcept that the lib module checks for machine-dependent subdirectories. See Perl's lib for more information. EOL EOL:directory###1.00000:how###1.00000:how do###1.00000:u/mydir/perl###0.092___lib###0.076___prefix###0.061___eol###0.046___eolunshift###0.030___machine-dependent###0.030___makefiles###0.030___modules/libraries###0.030___subdirectories###0.030___perl5lib###0.027___eolexcept###0.027___makefile.pl###0.025___generating###0.025___module/library###0.025___inc###0.024___checks###0.024___option###0.024___perlrun###0.024___eolthen###0.023___build###0.022___environment###0.022___keep###0.020___scripts###0.020___almost###0.020___begin###0.019___directory###0.018___say###0.017___own###0.017___run###0.016___perl's###0.016___set###0.015___either###0.015___information###0.015___variable###0.014___eolthis###0.013___modules###0.013___module###0.009___perl###0.006___
269:268###0.21,270###0.20,151###0.14,205###0.11,183###0.11,210###0.10,221###0.10,58###0.10,165###0.09,101###0.09:How do I add the directory my program lives in to the module/library search path?  EOL: EOL    use FindBin; EOL    use lib "$FindBin!:!:Bin"; EOL    use your_own_modules;  EOL EOL:organisation###0.00855___platform###0.06838___papers###0.00855___adps###0.00855___pedagogy###0.00855___construction###0.00855___message###0.00855___teaching###0.00855___program###0.13675___curriculum###0.06838___system###0.00855___plan###0.06838___idea###0.00855___info###0.00855___structure###0.00855___information###0.00855___adp_system###0.00855___written_document###0.00855___education###0.00855___computer_system###0.00855___educational_activity###0.00855___organization###0.00855___political_platform###0.06838___syllabus###0.06838___shoe###0.00855___horizontal_surface###0.00855___computing_system###0.00855___instruction###0.00855___arrangement###0.00855___show###0.00855___directory###0.13675___drawing###0.00855___broadcast###0.06838___document###0.00855___course_of_study###0.06838___automatic_data_processing_system###0.00855___thought###0.00855___level###0.00855:how###1.00000:how do###1.00000:findbin###0.210___bin###0.105___your_own_modules###0.105___lives###0.093___module/library###0.087___lib###0.087___search###0.073___path###0.070___eol###0.068___directory###0.061___program###0.037___
270:268###0.27,269###0.20,58###0.16,151###0.16,150###0.14,210###0.13,183###0.12,205###0.12,165###0.12,103###0.12:How do I add a directory to my include path at runtime?  EOL EOL:Here are the suggested ways of modifying your include path!: EOL EOL    the PERLLIB environment variable EOL    the PERL5LIB environment variable EOL    the perl -Idir command line flag EOL    the use lib pragma, as in EOL        use lib "$ENV{HOME}/myown_perllib";  EOL EOLThe latter is particularly useful because it knows about machine dependent architectures. The lib.pm pragmatic module was first included with the 5.002 release of Perl. EOL EOL:guidebook###0.00917___layer###0.00917___nutrition###0.00917___excerpt###0.00917___course_of_action###0.00917___course###0.07339___groove###0.00917___line###0.00917___series###0.00917___victuals###0.00917___pedagogy###0.00917___track_and_field###0.00917___grounds###0.00917___action###0.00917___plan_of_action###0.00917___artefact###0.00917___guide###0.00917___teaching###0.00917___selection###0.00917___direction###0.00917___route###0.07339___way_of_life###0.07339___belt###0.00917___nutriment###0.00917___path###0.14679___bar###0.00917___aliment###0.00917___education###0.00917___educational_activity###0.00917___way###0.00917___nourishment###0.00917___evidence###0.00917___extract###0.00917___installation###0.00917___instruction###0.00917___alimentation###0.00917___road###0.00917___directory###0.14679___sustenance###0.00917___track###0.07339___artifact###0.00917___channel###0.00917___itinerary###0.07339___facility###0.00917:how###1.00000:how do###1.00000:lib###0.056___environment###0.048___path###0.045___eol###0.040___include###0.036___knows###0.034___perllib###0.034___pragmatic###0.034___idir###0.034___lib.pm###0.034___myown_perllib###0.034___variable###0.031___dependent###0.030___runtime###0.030___latter###0.030___perl5lib###0.030___architectures###0.028___suggested###0.026___modifying###0.026___flag###0.026___home###0.026___included###0.025___machine###0.025___env###0.025___command_line###0.024___pragma###0.024___particularly###0.022___useful###0.021___ways###0.020___directory###0.019___release###0.018___first###0.014___perl###0.013___eolthe###0.013___module###0.010___
271:242###0.15,150###0.11,244###0.10,163###0.10,183###0.09,53###0.09,198###0.09,43###0.09,141###0.09,58###0.08:What is socket.ph and where do I get it?  EOL EOL:It's a perl4-style file defining values for system networking constants. Sometimes it is built using h2ph when Perl is installed, but other times it is not. Modern programs use Socket; instead. EOL EOL::what###0.50000___where###0.50000:where do###0.50000___what is###0.50000:defining###0.069___perl4-style###0.069___socket.ph###0.069___modern###0.061___get_it###0.057___constants###0.057___h2ph###0.057___networking###0.054___built###0.048___socket###0.048___installed###0.043___sometimes###0.039___times###0.039___instead###0.035___is_not###0.034___programs###0.034___values###0.033___eol###0.030___system###0.027___it's###0.026___file###0.024___using###0.023___perl###0.014___
272:60###0.71,284###0.28,24###0.27,273###0.24,53###0.20,183###0.20,278###0.18,47###0.18,282###0.18,274###0.17:My CGI script runs from the command line but not the browser. (500 Server Error)  EOL EOL:If you can demonstrate that you've read the following FAQs and that your problem isn't something simple that can be easily answered, you'll probably receive a courteous and useful reply to your question if you post it on comp.infosystems.www.authoring.cgi (if it's something to do with HTTP, HTML, or the CGI protocols). Questions that appear to be Perl questions but are really CGI ones that are posted to comp.lang.perl.misc may not be so well received. EOL EOLThe useful FAQs and related documents are!: EOL EOL    CGI FAQ EOL        http!://www.webthing.com/tutorials/cgifaq.html EOL EOL    Web FAQ EOL        http!://www.boutell.com/faq/ EOL EOL    WWW Security FAQ EOL        http!://www.w3.org/Security/Faq/ EOL EOL    HTTP Spec EOL        http!://www.w3.org/pub/WWW/Protocols/HTTP/ EOL EOL    HTML Spec EOL        http!://www.w3.org/TR/REC-html40/ EOL        http!://www.w3.org/pub/WWW/MarkUp/ EOL EOL    CGI Spec EOL        http!://www.w3.org/CGI/ EOL EOL    CGI Security FAQ EOL        http!://www.go2net.com/people/paulp/cgi-security/safe-cgi.txt  EOL EOL::::cgi###0.071___eol###0.051___spec###0.041___faq###0.040___faqs###0.029___www###0.027___http###0.024___questions###0.023___security###0.023___useful###0.022___html###0.020___receive###0.017___protocols###0.017___answered###0.017___posted###0.017___courteous###0.017___http!://www.go2net.com/people/paulp/cgi-security/safe-cgi.txt###0.015___demonstrate###0.015___http!://www.boutell.com/faq/###0.015___http!://www.w3.org/pub/www/markup/###0.015___http!://www.w3.org/cgi/###0.015___http!://www.w3.org/pub/www/protocols/http/###0.015___http!://www.w3.org/security/faq/###0.015___related###0.015___reply###0.015___http!://www.w3.org/tr/rec-html40/###0.015___authoring###0.015___http!://www.webthing.com/tutorials/cgifaq.html###0.015___infosystems###0.015___something###0.015___comp.###0.013___received###0.013___misc###0.013___documents###0.013___easily###0.013___browser###0.012___post###0.012___command_line###0.012___comp.lang.###0.012___appear###0.011___server###0.011___runs###0.011___you've###0.011___ones###0.011___may_not###0.010___web###0.010___error###0.010___script###0.009___question###0.009___problem###0.009___simple###0.008___following###0.008___isn't###0.008___you'll###0.008___really###0.008___probably###0.007___read###0.007___perl###0.007___eolthe###0.007___it's###0.006___
273:272###0.24,60###0.22,64###0.15,53###0.15,168###0.13,252###0.12,201###0.12,284###0.11,205###0.11,143###0.11:How can I get better error messages from a CGI program?  EOL EOL:Use the CGI!:!:Carp module. It replaces warn and die, plus the normal Carp modules carp, croak, and confess functions with more verbose and safer versions. It still sends them to the normal server error log. EOL EOL    use CGI!:!:Carp; EOL    warn "This is a complaint"; EOL    die "But this one is serious";  EOL EOLThe following use of CGI!:!:Carp also redirects errors to a file of your choice, placed in a BEGIN block to catch compile- time warnings as well!: EOL EOL    BEGIN { EOL        use CGI!:!:Carp qw(carpout); EOL        open(LOG, ">>/var/local/cgi-logs/mycgi-log") EOL            or die "Unable to append to mycgi-log!: $!!\n"; EOL        carpout(*LOG); EOL    }  EOL EOLYou can even arrange for fatal errors to go back to the client browser, which is nice for your own debugging, but might confuse the end user. EOL EOL    use CGI!:!:Carp qw(fatalsToBrowser); EOL    die "Bad error here";  EOL EOLEven if the error happens before you get the HTTP header out, the module will try to take care of this to avoid the dreaded server 500 errors. Normal warnings still go out to the server error log (or wherever you've sent them with carpout) with the application name and date stamp prepended. EOL EOL:noesis###0.00629___worth###0.00629___component###0.00629___communication###0.00629___service###0.00629___crack###0.00629___collection###0.00629___acceptance###0.00629___erroneousness###0.05031___component_part###0.00629___message###0.05031___cognitive_content###0.00629___proportion###0.00629___physical_thing###0.00629___mental_object###0.00629___assemblage###0.00629___substance###0.05031___responsibility###0.00629___breakdown###0.00629___misstatement###0.00629___entity###0.00629___fissure###0.00629___error###0.10063___misconception###0.00629___proportionality###0.00629___idea###0.00629___part###0.00629___imperfection###0.00629___scissure###0.00629___cognition###0.00629___nonaccomplishment###0.00629___incorrectness###0.00629___messages###0.10063___accumulation###0.00629___evilness###0.00629___portion###0.00629___responsibleness###0.00629___knowledge###0.00629___wrongness###0.00629___evil###0.00629___misplay###0.05031___equipment_failure###0.00629___aggregation###0.00629___mistake###0.05031___erroneous_belief###0.05031___cleft###0.00629___serve###0.00629___failure###0.00629___capital###0.00629___activity###0.00629___imperfectness###0.00629___thought###0.00629___crevice###0.00629___volume###0.00629___fault###0.05031___nonachievement###0.00629___subject_matter###0.05031___content###0.05031___wrongdoing###0.05031:how###1.00000:how can###1.00000:carp###0.086___cgi###0.042___log###0.038___carpout###0.036___error###0.036___errors###0.032___eol###0.028___server###0.024___normal###0.023___die###0.022___warn###0.019___warnings###0.016___begin###0.015___placed###0.012___date_stamp###0.012___end_user###0.012___complaint###0.012___dreaded###0.012___mycgi-log###0.012___fatalstobrowser###0.012___confuse###0.012___var/local/cgi-logs/mycgi-log###0.012___go_back###0.012___confess###0.012___croak###0.012___prepended###0.012___wherever###0.012___replaces###0.010___redirects###0.010___verbose###0.010___eoleven###0.010___unable###0.010___take_care###0.010___safer###0.010___go_out###0.010___append###0.010___fatal###0.010___debugging###0.010___choice###0.010___client###0.010___arrange###0.010___catch###0.009___messages###0.009___sends###0.009___sent###0.009___nice###0.009___plus###0.009___application###0.008___happens###0.008___header###0.008___browser###0.008___http###0.008___serious###0.008___as_well###0.008___module###0.007___you've###0.007___block###0.007___compile###0.007___versions###0.007___bad###0.007___avoid###0.007___better###0.006___own###0.006___name###0.006___eolyou###0.006___following###0.006___functions###0.006___try###0.005___even###0.005___modules###0.005___open###0.005___time###0.005___eolthe###0.004___file###0.004___program###0.004___one###0.004___
274:278###0.35,183###0.30,221###0.27,165###0.19,99###0.19,101###0.18,272###0.17,175###0.17,277###0.17,199###0.17:How do I remove HTML from a string?  EOL EOL:The most correct way (albeit not the fastest) is to use HTML!:!:Parser from CPAN. Another mostly correct way is to use HTML!:!:FormatText which not only removes HTML but also attempts to do a little simple formatting of the resulting plain text. EOL EOLMany folks attempt a simple-minded regular expression approach, like s/<.*?>//g, but that fails in many cases because the tags may continue over line breaks, they may contain quoted angle-brackets, or HTML comment may be present. Plus, folks forget to convert entities--like &lt; for example. EOL EOLHere's one "simple-minded" approach, that works for most files!: EOL EOL    #!!/usr/bin/perl -p0777 EOL    s/<(?!:[^>'"]*|(['"]).*?\1)*>//gs  EOL EOLIf you want a more complete solution, see the 3-stage striphtml program in http!://www.perl.com/CPAN/authors/ Tom_Christiansen/scripts/striphtml.gz . EOL EOLHere are some tricky cases that you should think about when picking a solution!: EOL EOL    <IMG SRC = "foo.gif" ALT = "A > B"> EOL EOL    <IMG SRC = "foo.gif" EOL ALT = "A > B"> EOL EOL    <!!-- <A comment> --> EOL EOL    <script>if (a<b && a>c)</script> EOL EOL    <# Just data #> EOL EOL    <!![INCLUDE CDATA [ >>>>>>>>>>>> ]]>  EOL EOLIf HTML comments include other tags, those solutions would also break on text like this!: EOL EOL    <!!-- This section commented out. EOL        <B>You can't see me!!</B> EOL    -->  EOL EOL:pattern###0.00901___twine###0.07207___shore###0.00901___ligament###0.00901___business_organization###0.00901___cord###0.00901___line###0.00901___linear_unit###0.00901___series###0.00901___shape###0.00901___train###0.07207___string###0.14414___unit###0.00901___hypertext_markup_language###0.07207___constraint###0.00901___geological_formation###0.00901___form###0.00901___piece_of_material###0.00901___trammel###0.00901___markup_language###0.00901___business_organisation###0.00901___bond###0.00901___consequence###0.00901___business###0.00901___piece_of_cloth###0.00901___aftermath###0.00901___chain###0.07207___hamper###0.00901___fibre###0.00901___wheelwork###0.00901___biochemist###0.00901___public_transport###0.00901___html###0.14414___business_concern###0.00901___strand###0.07207___building_block###0.00901___concern###0.00901___shackle###0.00901___procession###0.00901___restraint###0.00901___fiber###0.00901___formation###0.00901___geology###0.00901___street###0.00901___trammels###0.00901___necklace###0.00901:how###1.00000:how do###1.00000:html###0.047___eol###0.043___src###0.027___img###0.027___folks###0.024___simple-minded###0.024___gif###0.024___tags###0.024___comment###0.022___alt###0.022___correct###0.017___foo###0.016___may###0.015___script###0.015___solution###0.015___cases###0.015___include###0.014___approach###0.014___angle-brackets###0.013___p0777###0.013___resulting###0.013___cdata###0.013___striphtml###0.013___entities###0.013___tom_christiansen/scripts/striphtml###0.013___text###0.013___picking###0.012___attempts###0.012___not_only###0.012___breaks###0.012___albeit###0.012___commented###0.012___formattext###0.012___tricky###0.012___plain###0.011___break###0.011___eolmany###0.011___present###0.011___http!://www.perl.com/cpan/authors/###0.011___removes###0.011___continue###0.011___think_about###0.011___fastest###0.011___formatting###0.011___mostly###0.010___plus###0.010___attempt###0.010___contain###0.010___solutions###0.010___forget###0.010___convert###0.009___a_little###0.009___usr/bin/perl###0.009___quoted###0.009___eolhere###0.009___fails###0.009___comments###0.009___eolif###0.009___parser###0.009___remove###0.009___section###0.008___complete###0.008___eolhere's###0.007___expression###0.007___works###0.007___simple###0.006___data###0.006___files###0.006___regular###0.006___line###0.006___for_example###0.006___can't###0.005___string###0.005___program###0.004___cpan###0.004___one###0.004___
275:183###0.17,278###0.17,274###0.16,205###0.13,60###0.13,281###0.12,51###0.12,101###0.11,48###0.11,210###0.11:How do I extract URLs?  EOL EOL:A quick but imperfect approach is EOL EOL    #!!/usr/bin/perl -n00 EOL    # qxurl - tchrist@perl.com EOL    print "$2\n" while m{ EOL< \s* EOL  A \s+ HREF \s* = \s* (["']) (.*?) \1 EOL\s* > EOL    }gsix;  EOL EOLThis version does not adjust relative URLs, understand alternate bases, deal with HTML comments, deal with HREF and NAME attributes in the same tag, understand extra qualifiers like TARGET, or accept URLs themselves as arguments. It also runs about 100x faster than a more "complete" solution using the LWP suite of modules, such as the http!:// www.perl.com/CPAN/authors/Tom_Christiansen/scripts/xurl.gz program. EOL EOL:URL###0.19048___computer_address###0.02381___address###0.02381___urls###0.38095___uniform_resource_locator###0.19048___universal_resource_locator###0.19048:how###1.00000:how do###1.00000:urls###0.060___href###0.048___understand###0.042___eol###0.038___deal###0.037___bases###0.027___qualifiers###0.027___tchrist@perl.com###0.027___attributes###0.027___alternate###0.027___qxurl###0.027___imperfect###0.027___gsix###0.027___suite###0.024___n00###0.024___adjust###0.022___tag###0.022___target###0.022___themselves###0.022___relative###0.022___extract###0.022___quick###0.021___lwp###0.020___accept###0.020___usr/bin/perl###0.019___comments###0.018___www.perl.com###0.018___extra###0.018___runs###0.017___arguments###0.017___faster###0.016___complete###0.016___http!://###0.016___does_not###0.015___html###0.015___such_as###0.015___solution###0.014___name###0.014___approach###0.013___version###0.013___modules###0.011___eolthis###0.011___print###0.009___program###0.009___using###0.009___
276:277###0.16,163###0.15,278###0.14,279###0.14,177###0.13,141###0.13,151###0.12,19###0.11,214###0.11,142###0.11:How do I download a file from the user's machine? How do I open a file on another machine?  EOL EOL:In the context of an HTML form, you can use what's known as multipart/form-data encoding. The CGI.pm module (available from CPAN) supports this in the start_multipart_form() method, which isn't the same as the startform() method. EOL EOL:compartment###0.01923___automotive_vehicle###0.01923___machine###0.30769___automobile###0.15385___motor_vehicle###0.01923___auto###0.15385___motorcar###0.15385___car###0.15385___wheeled_vehicle###0.01923:how###1.00000:how do###1.00000:machine###0.095___method###0.070___start_multipart_form###0.063___startform###0.063___multipart/form-data###0.063___user's###0.056___known_as###0.052___download###0.052___cgi.pm###0.049___encoding###0.049___file###0.045___form###0.037___context###0.037___html###0.036___supports###0.035___what's###0.035___isn't###0.030___eol###0.027___available###0.027___open###0.026___cpan###0.021___module###0.019___
277:274###0.17,276###0.16,278###0.15,295###0.13,239###0.11,188###0.11,205###0.11,206###0.09,233###0.09,140###0.09:How do I make a pop-up menu in HTML?  EOL EOL:Use the <SELECT> and <OPTION> tags. The CGI.pm module (available from CPAN) supports this widget, as well as many others, including some that it cleverly synthesizes on its own. EOL EOL:passenger###0.01190___roster###0.01190___food###0.01190___certificate###0.01190___cardboard###0.01190___nutrient###0.01190___recordbook###0.01190___bill_of_fare###0.09524___bill###0.01190___carte_du_jour###0.09524___charge###0.01190___agenda###0.01190___credentials###0.01190___greeting###0.01190___certification###0.01190___sign###0.01190___correspondence###0.01190___card###0.09524___humourist###0.01190___record###0.01190___schedule###0.01190___composition_board###0.01190___roll###0.01190___salutation###0.01190___printed_circuit###0.01190___humorist###0.01190___book###0.01190___fare###0.09524___menu###0.19048___paper###0.01190___rider###0.01190___docket###0.01190___credential###0.01190___carte###0.09524:how###1.00000:how do###1.00000:synthesizes###0.075___pop-up###0.075___cleverly###0.075___menu###0.075___tags###0.067___option###0.059___others###0.059___cgi.pm###0.059___widget###0.059___as_well_as###0.052___select###0.049___including###0.044___html###0.043___supports###0.042___own###0.042___eol###0.032___available###0.032___cpan###0.025___module###0.023___
278:274###0.35,279###0.26,295###0.20,60###0.19,272###0.18,275###0.17,277###0.15,183###0.15,205###0.14,51###0.14:How do I fetch an HTML file?  EOL EOL:One approach, if you have the lynx text-based HTML browser installed on your system, is this!: EOL EOL    $html_code = `lynx -source $url`; EOL    $text_data = `lynx -dump $url`;  EOL EOLThe libwww-perl (LWP) modules from CPAN provide a more powerful way to do this. They don't require lynx, but like lynx, can still work through proxies!: EOL EOL    # simplest version EOL    use LWP!:!:Simple; EOL    $content = get($URL); EOL EOL    # or print HTML from a URL EOL    use LWP!:!:Simple; EOL    getprint "http!://www.linpro.no/lwp/"; EOL EOL    # or print ASCII from HTML from a URL EOL    # also need HTML-Tree package from CPAN EOL    use LWP!:!:Simple; EOL    use HTML!:!:Parser; EOL    use HTML!:!:FormatText; EOL    my ($html, $ascii); EOL    $html = get("http!://www.perl.com/"); EOL    defined $html EOL        or die "Can't fetch HTML from http!://www.perl.com/"; EOL    $ascii = HTML!:!:FormatText->new->format(parse_html($html)); EOL    print $ascii;  EOL EOL:hypertext_markup_language###0.32000___markup_language###0.04000___html###0.64000:how###1.00000:how do###1.00000:html###0.126___lynx###0.091___eol###0.055___lwp###0.054___ascii###0.048___formattext###0.032___simple###0.027___fetch###0.027___url###0.027___print###0.019___html_code###0.018___http!://www.linpro.no/lwp/";###0.018___text-based###0.018___http!://www.perl.com/");###0.018___text_data###0.018___work_through###0.018___html-tree###0.018___getprint###0.018___parse_html###0.018___http!://www.perl.com/";###0.018___proxies###0.018___libwww-perl###0.016___dump###0.016___content###0.015___powerful###0.014___browser###0.013___simplest###0.012___parser###0.012___cpan###0.012___installed###0.011___provide###0.011___format###0.010___require###0.010___package###0.010___defined###0.009___source###0.009___approach###0.009___version###0.008___die###0.008___modules###0.008___you_have###0.007___need###0.007___eolthe###0.007___can't###0.007___new###0.007___system###0.007___don't###0.007___file###0.006___one###0.005___
279:278###0.26,286###0.16,205###0.16,210###0.15,183###0.15,123###0.15,60###0.14,272###0.14,276###0.14,101###0.13:How do I automate an HTML form submission?  EOL EOL:If you're submitting values using the GET method, create a URL and encode the form using the query_form method!: EOL EOL    use LWP!:!:Simple; EOL    use URI!:!:URL; EOL EOL    my $url = url('http!://www.perl.com/cgi-bin/cpan_mod'); EOL    $url->query_form(module => 'DB_File', readme => 1); EOL    $content = get($url);  EOL EOLIf you're using the POST method, create your own user agent and encode the content appropriately. EOL EOL    use HTTP!:!:Request!:!:Common qw(POST); EOL    use LWP!:!:UserAgent; EOL EOL    $ua = LWP!:!:UserAgent->new(); EOL    my $req = POST 'http!://www.perl.com/cgi-bin/cpan_mod', EOL                   [ module => 'DB_File', readme => 1 ]; EOL    $content = $ua->request($req)->as_string;  EOL EOL:vine###0.00235___exemplar###0.00235___point_in_time###0.00235___pattern###0.01878___anatomy###0.01878___magnitude###0.00235___heterogeneousness###0.00235___elegance###0.00235___effect###0.00235___rating###0.00235___appearance###0.00235___valuation###0.00235___exertion###0.00235___collection###0.00235___copy###0.00235___personage###0.00235___angular_unit###0.00235___chassis###0.01878___time_period###0.00235___evaluation###0.00235___state###0.00235___skeleton###0.00235___material_body###0.01878___perception###0.00235___throw###0.00235___vocal_music###0.00235___underframe###0.00235___signifier###0.01878___deviation###0.00235___line###0.00235___rhetorical_device###0.00235___plant_tissue###0.00235___maneuver###0.00235___pedagogy###0.00235___nervousness###0.00235___manoeuvre###0.00235___example###0.00235___lineage###0.00235___variable_quantity###0.00235___shape###0.00235___sum###0.00235___configuration###0.01878___animal_tissue###0.00235___try###0.00235___hurt###0.00235___sum_of_money###0.00235___hypertext_markup_language###0.01878___programme###0.00235___impression###0.00235___sort###0.01878___form###0.03756___figure###0.01878___morphology###0.00235___whole_number###0.00235___good_example###0.00235___assemblage###0.00235___substance###0.00235___teaching###0.00235___small_person###0.00235___variable###0.00235___elbow_grease###0.00235___illustration###0.00235___decoration###0.00235___program###0.00235___harm###0.00235___practice###0.00235___contour###0.01878___important_person###0.00235___category###0.00235___route###0.00235___music###0.00235___strain###0.01878___plan###0.00235___graph###0.00235___mannikin###0.01878___point###0.00235___variant###0.01878___play###0.00235___type###0.00235___slope###0.00235___amount_of_money###0.00235___markup_language###0.00235___container###0.00235___flesh###0.01878___ornamentation###0.00235___soul###0.00235___filiation###0.00235___manakin###0.01878___similarity###0.00235___skeletal_frame###0.00235___physical_structure###0.00235___structure###0.00235___period_of_time###0.00235___phase###0.01878___operation###0.00235___bod###0.01878___injury###0.00235___ancestry###0.00235___cast###0.01878___graphical_record###0.00235___path###0.00235___conference###0.00235___human_body###0.01878___human###0.00235___manikin###0.01878___solid###0.00235___analysis###0.00235___taxon###0.00235___physique###0.01878___elevation###0.00235___accumulation###0.00235___fishing###0.00235___var.###0.01878___frame###0.00235___state_of_matter###0.00235___animal_group###0.00235___variety###0.01878___grade###0.01878___spatiality###0.00235___education###0.00235___influential_person###0.00235___jitters###0.00235___tyrannid###0.00235___difference###0.00235___educational_activity###0.00235___heterogeneity###0.00235___league###0.00235___mortal###0.00235___spatial_property###0.00235___trauma###0.00235___derivation###0.00235___build###0.01878___screaming_meemies###0.00235___supporter###0.00235___aggregation###0.00235___html###0.03756___organic_structure###0.00235___somebody###0.00235___someone###0.00235___instruction###0.00235___help###0.00235___show###0.00235___bodily_property###0.00235___travail###0.00235___sweat###0.00235___activity###0.00235___kind###0.01878___physical_body###0.01878___deformation###0.00235___helper###0.00235___word###0.00235___mounting###0.00235___attempt###0.00235___endeavor###0.00235___class###0.01878___perceptual_experience###0.00235___simulation###0.00235___difficulty###0.00235___dummy###0.00235___integer###0.00235___body###0.00235___hindu_deity###0.00235___individual###0.00235___gradient###0.00235___percept###0.00235___departure###0.00235___person###0.00235___assistant###0.00235___rank###0.00235___soma###0.01878___itinerary###0.00235___divergence###0.00235___amount###0.00235___taxonomic_group###0.00235___nerves###0.00235___visual_aspect###0.00235___meaning###0.00235___effort###0.00235___mannequin###0.01878___model###0.00235___period###0.00235___people###0.00235___bandage###0.00235___endeavour###0.00235___ornament###0.00235___gathering###0.00235:how###1.00000:how do###1.00000:content###0.057___lwp###0.052___url###0.052___eol###0.050___post###0.050___useragent###0.046___req###0.046___query_form###0.046___method###0.038___readme###0.038___encode###0.038___request###0.034___db_file###0.034___form###0.027___create###0.024___using###0.023___http!://www.perl.com/cgi-bin/cpan_mod');###0.023___submitting###0.023___http!://www.perl.com/cgi-bin/cpan_mod',###0.023___automate###0.023___submission###0.023___agent###0.020___as_string###0.020___uri###0.019___appropriately###0.017___you're###0.016___http###0.016___common###0.015___module###0.014___user###0.014___html###0.013___own###0.012___simple###0.011___values###0.011___new###0.009___eolif###0.007___
280:272###0.16,60###0.14,279###0.13,205###0.11,266###0.10,183###0.10,29###0.09,276###0.09,221###0.09,288###0.09:How do I decode or create those %-encodings on the web?  EOL EOL:If you are writing a CGI script, you should be using the CGI.pm module that comes with perl, or some other equivalent module. The CGI module automatically decodes queries for you, and provides an escape() function to handle encoding. EOL EOLThe best source of detailed information on URI encoding is RFC 2396. Basically, the following substitutions do it!: EOL EOL    s/([^\w()'*~!!.-])/sprintf '%%%02x', $1/eg;   # encode EOL EOL    s/%([A-Fa-f\d]{2})/chr hex $1/eg;            # decode  EOL EOLHowever, you should only apply them to individual URI components, not the entire URI, otherwise you'll lose information and generally mess things up. If that didn't explain it, don't worry. Just go read section 2 of the RFC, it's probably the best explanation there is. EOL EOLRFC 2396 also contains a lot of other useful information, including a regexp for breaking any arbitrary URI into components (Appendix B). EOL EOL:coding###0.02857___encryption###0.22857___encoding###0.22857___cryptography###0.02857___secret_writing###0.02857___encodings###0.45714:how###1.00000:how do###1.00000:uri###0.057___components###0.034___rfc###0.028___encoding###0.027___decode###0.026___information###0.025___eol###0.020___cgi###0.020___best###0.019___chr###0.017___regexp###0.017___breaking###0.017___queries###0.017___a-fa-f###0.017___basically###0.017___generally###0.017___eolrfc###0.017___appendix###0.017___substitutions###0.017___decodes###0.017___module###0.016___mess###0.015___apply###0.015___explanation###0.015___encodings###0.015___individual###0.015___worry###0.014___lose###0.014___explain###0.014___encode###0.014___detailed###0.014___some_other###0.014___hex###0.013___cgi.pm###0.013___otherwise###0.013___didn't###0.012___entire###0.012___escape###0.012___arbitrary###0.012___sprintf###0.011___eolhowever###0.011___automatically###0.011___equivalent###0.011___useful###0.010___comes###0.010___web###0.010___writing###0.010___do_it###0.010___section###0.010___including###0.010___a_lot###0.010___provides###0.010___handle###0.009___contains###0.009___script###0.009___you_are###0.009___source###0.009___create###0.009___following###0.008___things###0.008___you'll###0.008___probably###0.007___read###0.007___eolthe###0.007___it's###0.006___don't###0.006___function###0.006___using###0.006___perl###0.003___
281:285###0.21,183###0.13,272###0.13,210###0.13,51###0.13,176###0.13,60###0.13,275###0.12,205###0.12,165###0.12:How do I redirect to another page?  EOL EOL:According to RFC 2616, "Hypertext Transfer Protocol -- HTTP/1.1", the preferred method is to send a Location!: header instead of a Content-Type!: header!: EOL EOL    Location!: http!://www.domain.com/newpage  EOL EOLNote that relative URLs in these headers can cause strange effects because of "optimizations" that servers do. EOL EOL    $url = "http!://www.perl.com/CPAN/"; EOL    print "Location!: $url\n\n"; EOL    exit;  EOL EOLTo target a particular frame in a frameset, include the "Window-target!:" in the header. EOL EOL    print <<EOF; EOL    Location!: http!://www.domain.com/newpage EOL    Window-target!: <FrameName> EOL EOL    EOF  EOL EOLTo be correct to the spec, each of those virtual newlines should really be physical "\015\012" sequences by the time your message is received by the client browser. Except for NPH scripts, though, that local newline should get translated by your server into standard form, so you shouldn't have a problem here, even if you are stuck on MacOS. Everybody else probably won't even notice. EOL EOL:villain###0.03448___varlet###0.27586___tender###0.03448___page###0.55172___attender###0.03448___attendant###0.03448___scoundrel###0.03448:how###1.00000:how do###1.00000:location###0.064___header###0.034___eol###0.033___http!://www.domain.com/newpage###0.032___window-target###0.032___eof###0.023___eolto###0.017___content-type###0.016___frameset###0.016___framename###0.016___hypertext_transfer_protocol###0.016___http!://www.perl.com/cpan/";###0.016___everybody###0.016___optimizations###0.016___frame_in###0.016___macos###0.016___servers###0.016___nph###0.016___redirect###0.014___effects###0.014___preferred###0.014___http/1###0.014___sequences###0.014___because_of###0.014___stuck###0.014___translated###0.014___virtual###0.014___headers###0.014___according_to###0.013___rfc###0.013___client###0.013___physical###0.013___target###0.013___relative###0.013___spec###0.012___except_for###0.012___received###0.012___strange###0.012___newline###0.012___urls###0.012___notice###0.012___print###0.011___browser###0.011___newlines###0.011___cause###0.011___page###0.011___scripts###0.010___even_if###0.010___server###0.010___particular###0.010___message###0.010___send###0.010___shouldn't###0.010___correct###0.010___exit###0.009___though###0.009___form###0.009___eolnote###0.009___method###0.008___instead_of###0.008___won't###0.008___you_are###0.008___include###0.008___local###0.008___problem###0.008___even###0.007___really###0.007___standard###0.006___probably###0.006___time###0.006___
282:232###0.22,60###0.21,272###0.18,27###0.16,23###0.15,234###0.15,237###0.10,18###0.10,233###0.10,171###0.09:How do I put a password on my web pages?  EOL EOL:That depends. You'll need to read the documentation for your web server, or perhaps check some of the other FAQs referenced above. EOL EOL:communication_system###0.00769___spoken_language###0.00769___liberation###0.00769___sacred_writing###0.00769___promise###0.00769___freeing###0.00769___arcanum###0.00769___trap###0.00769___blade###0.00769___voice_communication###0.00769___secret###0.00769___computer_network###0.00769___network###0.06154___entanglement###0.06154___speech###0.00769___religious_text###0.00769___hypostasis###0.00769___statement###0.00769___communication_equipment###0.00769___system###0.00769___password###0.12308___order###0.00769___parole###0.06154___spoken_communication###0.00769___vane###0.06154___info###0.00769___computer_memory_unit###0.00769___language_unit###0.00769___religious_writing###0.00769___oral_communication###0.00769___information###0.00769___signature###0.00769___speech_communication###0.00769___sacred_text###0.00769___language###0.00769___watchword###0.06154___WWW###0.06154___word###0.06154___linguistic_unit###0.00769___countersign###0.06154___release###0.00769___rotating_mechanism###0.00769___web###0.12308___mechanical_device###0.00769:how###1.00000:how do###1.00000:web###0.119___referenced###0.099___faqs###0.082___pages###0.082___password###0.071___depends###0.071___server###0.067___perhaps###0.065___documentation###0.059___above###0.053___check###0.053___you'll###0.047___eol###0.043___read###0.041___need###0.040___
283:244###0.09,58###0.08,234###0.07,99###0.07,274###0.07,183###0.07,232###0.07,221###0.07,94###0.06,125###0.06:How do I edit my .htpasswd and .htgroup files with Perl?  EOL EOL:The HTTPD!:!:UserAdmin and HTTPD!:!:GroupAdmin modules provide a consistent OO interface to these files, regardless of how they're stored. Databases may be text, dbm, Berkley DB or any database with a DBI compatible driver. HTTPD!:!:UserAdmin supports files used by the `Basic' and `Digest' authentication schemes. Here's an example!: EOL EOL    use HTTPD!:!:UserAdmin (); EOL    HTTPD!:!:UserAdmin EOL  ->new(DB => "/foo/.htpasswd") EOL  ->add($username => $password);  EOL EOL::how###1.00000:how do###1.00000:httpd###0.121___useradmin###0.109___htpasswd###0.054___files###0.040___consistent###0.027___username###0.027___groupadmin###0.027___htgroup###0.027___berkley###0.027___driver###0.027___authentication###0.027___digest###0.027___dbi###0.027___eol###0.026___compatible###0.024___edit###0.024___schemes###0.024___regardless_of###0.022___stored###0.022___dbm###0.021___basic###0.021___database###0.020___databases###0.020___password###0.019___they're###0.019___interface###0.018___foo###0.016___provide###0.016___supports###0.015___here's###0.013___text###0.013___example###0.013___used###0.012___modules###0.012___new###0.010___may###0.010___perl###0.005___
284:272###0.28,60###0.25,53###0.13,256###0.13,273###0.11,249###0.11,12###0.10,247###0.10,286###0.10,207###0.10:How do I make sure users can't enter values into a form that cause my CGI script to do bad things?  EOL EOL:Read the CGI security FAQ, at http!://www-genome.wi.mit.edu/WWW/faqs/www-security-faq.html , and the Perl/CGI FAQ at http!://www.perl.com/CPAN/doc/FAQs/cgi/perl-cgi-faq.html . EOL EOLIn brief!: use tainting (see perlsec), which makes sure that data from outside your script (eg, CGI parameters) are never used in eval or system calls. In addition to tainting, never use the single-argument form of system() or exec(). Instead, supply the command and arguments as a list, which prevents shell globbing. EOL EOL:exploiter###0.11111___drug_user###0.11111___substance_abuser###0.11111___soul###0.01389___values###0.22222___human###0.01389___users###0.22222___mortal###0.01389___selfish_person###0.01389___somebody###0.01389___someone###0.01389___individual###0.01389___person###0.01389___user###0.11111:how###1.00000:how do###1.00000:tainting###0.061___cgi###0.053___form###0.036___faq###0.035___script###0.033___parameters###0.030___single-argument###0.030___http!://www-genome.wi.mit.edu/www/faqs/www-security-faq.html###0.030___http!://www.perl.com/cpan/doc/faqs/cgi/perl-cgi-faq.html###0.030___perl/cgi###0.030___enter###0.027___brief###0.027___globbing###0.025___perlsec###0.025___supply###0.025___in_addition_to###0.025___system###0.024___outside###0.024___prevents###0.022___exec###0.022___cause###0.022___users###0.022___security###0.020___arguments###0.019___sure###0.019___eval###0.019___make_sure###0.019___bad###0.018___calls###0.018___command###0.017___eol###0.016___shell###0.016___makes###0.016___eolin###0.016___instead###0.015___things###0.015___data###0.015___values###0.014___used###0.014___list###0.013___read###0.012___can't###0.012___
285:281###0.21,287###0.18,292###0.17,289###0.16,163###0.14,244###0.14,291###0.12,290###0.12,205###0.12,274###0.12:How do I parse a mail header?  EOL EOL:For a quick-and-dirty solution, try this solution derived from perlfunc/split!: EOL EOL    $/ = ''; EOL    $header = <MSG>; EOL    $header =~ s/\n\s+/ /g; # merge continuation lines EOL    %head = ( UNIX_FROM_LINE, split /^([-\w]+)!:\s*/m, $header );  EOL EOLThat solution doesn't do well if, for example, you're trying to maintain all the Received lines. A more complete approach is to use the Mail!:!:Header module from CPAN (part of the MailTools package). EOL EOL:head###0.06400___noesis###0.00800___membrane###0.00800___cope###0.06400___top###0.00800___educator###0.00800___leader###0.00800___origin###0.00800___peak###0.00800___forepart###0.00800___privy###0.00800___coping###0.06400___line###0.00800___linear_unit###0.00800___john###0.00800___foam###0.00800___plant_organ###0.00800___perversion###0.00800___complex_body_part###0.00800___rootage###0.00800___source###0.00800___header###0.12800___pressure###0.00800___front_end###0.00800___mark###0.00800___drug_user###0.00800___projection###0.00800___substance_abuser###0.00800___direction###0.00800___physical_object###0.00800___front###0.00800___juncture###0.00800___theme###0.00800___point###0.00800___anatomical_structure###0.00800___cognition###0.00800___heading###0.06400___object###0.00800___structure###0.00800___bathroom###0.00800___passageway###0.00800___coil###0.00800___lav###0.00800___beginning###0.00800___toilet###0.00800___lavatory###0.00800___tip###0.00800___knowledge###0.00800___lintel###0.06400___advance###0.00800___way###0.00800___obverse###0.00800___beam###0.00800___root###0.00800___subject###0.00800___domestic_animal###0.00800___progress###0.00800___occasion###0.00800___froth###0.00800___pedagogue###0.00800___word###0.00800___can###0.00800___external_body_part###0.00800___sexual_perversion###0.00800___striker###0.00800___formation###0.00800___progression###0.00800___individual###0.00800___force_per_unit_area###0.00800___pressure_level###0.00800___bodily_structure###0.00800___brick###0.00800___topic###0.00800___body_structure###0.00800___user###0.00800:how###1.00000:how do###1.00000:header###0.130___solution###0.059___mail###0.045___eol###0.039___lines###0.037___do_well###0.036___merge###0.036___unix_from_line###0.036___continuation###0.036___derived###0.036___quick-and-dirty###0.036___perlfunc/split###0.036___maintain###0.032___mailtools###0.029___head###0.029___msg###0.029___received###0.028___parse###0.027___eolthat###0.025___split###0.025___trying###0.025___all_the###0.022___complete###0.021___package###0.019___approach###0.018___try###0.017___part###0.016___for_example###0.016___doesn't###0.014___you're###0.013___cpan###0.012___module###0.011___
286:279###0.16,272###0.13,53###0.11,284###0.10,287###0.10,25###0.09,32###0.09,273###0.09,30###0.09,280###0.09:How do I decode a CGI form?  EOL EOL: You use a standard module, probably CGI.pm. Under no circumstances should you attempt to do so by hand!! EOL EOLYou'll see a lot of CGI programs that blindly read from STDIN the number of bytes equal to CONTENT_LENGTH for POSTs, or grab QUERY_STRING for decoding GETs. These programs are very poorly written. They only work sometimes. They typically forget to check the return value of the read() system call, which is a cardinal sin. They don't handle HEAD requests. They don't handle multipart forms used for file uploads. They don't deal with GET/POST combinations where query fields are in more than one place. They don't deal with keywords in the query string. EOL EOLIn short, they're bad hacks. Resist them at all costs. Please do not be tempted to reinvent the wheel. Instead, use the CGI.pm or CGI_Lite.pm (available from CPAN), or if you're trapped in the module-free land of perl1 .. perl4, you might look into cgi-lib.pl (available from http!://cgi-lib.stanford.edu/cgi-lib/ ). EOL EOLMake sure you know whether to use a GET or a POST in your form. GETs should only be used for something that doesn't update the server. Otherwise you can get mangled databases and repeated feedback mail messages. The fancy word for this is ``idempotency''. This simply means that there should be no difference between making a GET request for a particular URL once or multiple times. This is because the HTTP protocol definition says that a GET request may be cached by the browser, or server, or an intervening proxy. POST requests cannot be cached, because each request is independent and matters. Typically, POST requests change or depend on state on the server (query or update a database, send mail, or purchase a computer). EOL EOL:vine###0.00249___exemplar###0.00249___point_in_time###0.00249___pattern###0.01995___anatomy###0.01995___magnitude###0.00249___heterogeneousness###0.00249___elegance###0.00249___effect###0.00249___rating###0.00249___appearance###0.00249___valuation###0.00249___exertion###0.00249___collection###0.00249___copy###0.00249___personage###0.00249___angular_unit###0.00249___chassis###0.01995___time_period###0.00249___evaluation###0.00249___state###0.00249___skeleton###0.00249___material_body###0.01995___perception###0.00249___throw###0.00249___vocal_music###0.00249___underframe###0.00249___signifier###0.01995___deviation###0.00249___line###0.00249___rhetorical_device###0.00249___plant_tissue###0.00249___maneuver###0.00249___pedagogy###0.00249___nervousness###0.00249___manoeuvre###0.00249___example###0.00249___lineage###0.00249___variable_quantity###0.00249___shape###0.00249___sum###0.00249___configuration###0.01995___animal_tissue###0.00249___try###0.00249___hurt###0.00249___sum_of_money###0.00249___programme###0.00249___impression###0.00249___sort###0.01995___form###0.03990___figure###0.01995___morphology###0.00249___whole_number###0.00249___good_example###0.00249___assemblage###0.00249___substance###0.00249___teaching###0.00249___small_person###0.00249___variable###0.00249___elbow_grease###0.00249___illustration###0.00249___decoration###0.00249___program###0.00249___harm###0.00249___practice###0.00249___contour###0.01995___important_person###0.00249___category###0.00249___route###0.00249___music###0.00249___strain###0.01995___plan###0.00249___graph###0.00249___mannikin###0.01995___point###0.00249___variant###0.01995___play###0.00249___type###0.00249___slope###0.00249___amount_of_money###0.00249___container###0.00249___flesh###0.01995___ornamentation###0.00249___soul###0.00249___filiation###0.00249___manakin###0.01995___similarity###0.00249___skeletal_frame###0.00249___physical_structure###0.00249___structure###0.00249___period_of_time###0.00249___phase###0.01995___operation###0.00249___bod###0.01995___injury###0.00249___ancestry###0.00249___cast###0.01995___graphical_record###0.00249___path###0.00249___conference###0.00249___human_body###0.01995___human###0.00249___manikin###0.01995___solid###0.00249___analysis###0.00249___taxon###0.00249___physique###0.01995___elevation###0.00249___accumulation###0.00249___fishing###0.00249___var.###0.01995___frame###0.00249___state_of_matter###0.00249___animal_group###0.00249___variety###0.01995___grade###0.01995___spatiality###0.00249___education###0.00249___influential_person###0.00249___jitters###0.00249___tyrannid###0.00249___difference###0.00249___educational_activity###0.00249___heterogeneity###0.00249___league###0.00249___mortal###0.00249___spatial_property###0.00249___trauma###0.00249___derivation###0.00249___build###0.01995___screaming_meemies###0.00249___supporter###0.00249___aggregation###0.00249___organic_structure###0.00249___somebody###0.00249___someone###0.00249___instruction###0.00249___help###0.00249___show###0.00249___bodily_property###0.00249___travail###0.00249___sweat###0.00249___activity###0.00249___kind###0.01995___physical_body###0.01995___deformation###0.00249___helper###0.00249___word###0.00249___mounting###0.00249___attempt###0.00249___endeavor###0.00249___class###0.01995___perceptual_experience###0.00249___simulation###0.00249___difficulty###0.00249___dummy###0.00249___integer###0.00249___body###0.00249___hindu_deity###0.00249___individual###0.00249___gradient###0.00249___percept###0.00249___departure###0.00249___person###0.00249___assistant###0.00249___rank###0.00249___soma###0.01995___itinerary###0.00249___divergence###0.00249___amount###0.00249___taxonomic_group###0.00249___nerves###0.00249___visual_aspect###0.00249___meaning###0.00249___effort###0.00249___mannequin###0.01995___model###0.00249___period###0.00249___people###0.00249___bandage###0.00249___endeavour###0.00249___ornament###0.00249___gathering###0.00249:how###1.00000:how do###1.00000:requests###0.026___query###0.022___request###0.020___post###0.019___server###0.018___cached###0.017___typically###0.015___cgi.pm###0.013___don't###0.013___update###0.012___deal###0.012___gets###0.011___mail###0.011___form###0.010___cgi###0.010___handle###0.010___cgi-lib.pl###0.008___cgi_lite.pm###0.008___get/post###0.008___http!://cgi-lib.stanford.edu/cgi-lib/###0.008___reinvent###0.008___combinations###0.008___module-free###0.008___query_string###0.008___cardinal###0.008___content_length###0.008___resist###0.008___trapped###0.008___uploads###0.008___wheel###0.008___posts###0.008___idempotency###0.008___forms###0.008___hacks###0.008___poorly###0.008___blindly###0.008___at_all_costs###0.008___land###0.008___programs###0.008___used###0.008___equal_to###0.007___multipart###0.007___decoding###0.007___feedback###0.007___mangled###0.007___proxy###0.007___fancy###0.007___intervening###0.007___sin###0.007___tempted###0.007___independent###0.007___depend_on###0.007___available###0.007___circumstances###0.007___head###0.007___short###0.007___by_hand###0.007___purchase###0.007___perl1###0.007___keywords###0.007___computer###0.007___read###0.007___repeated###0.006___messages###0.006___eolmake###0.006___fields###0.006___protocol###0.006___definition###0.006___eol###0.006___forget###0.006___database###0.006___databases###0.006___system_call###0.006___attempt###0.006___look_into###0.006___making###0.006___matters###0.006___otherwise###0.006___url###0.006___decode###0.006___grab###0.006___perl4###0.006___eolyou'll###0.006___multiple###0.006___browser###0.006___state###0.006___they're###0.006___http###0.006___bytes###0.006___please###0.006___says###0.006___cannot###0.005___simply###0.005___send###0.005___particular###0.005___sure###0.005___do_not###0.005___once###0.005___word###0.005___more_than###0.005___place###0.005___a_lot###0.005___bad###0.005___know###0.005___sometimes###0.005___difference###0.005___times###0.005___stdin###0.004___means###0.004___check###0.004___eolin###0.004___change###0.004___instead###0.004___written###0.004___value###0.004___return###0.004___number###0.004___whether###0.004___work###0.003___something###0.003___standard###0.003___probably###0.003___doesn't###0.003___string###0.003___may###0.003___you're###0.003___file###0.003___cpan###0.003___one###0.002___module###0.002___
287:289###0.48,290###0.24,82###0.19,285###0.18,293###0.15,292###0.14,291###0.11,183###0.11,32###0.10,286###0.10:How do I check a valid mail address?  EOL EOL:You can't, at least, not in real time. Bummer, eh? EOL EOLWithout sending mail to the address and seeing whether there's a human on the other hand to answer you, you cannot determine whether a mail address is valid. Even if you apply the mail header standard, you can have problems, because there are deliverable addresses that aren't RFC-822 (the mail header standard) compliant, and addresses that aren't deliverable which are compliant. EOL EOLMany are tempted to try to eliminate many frequently-invalid mail addresses with a simple regex, such as / ^[\w.-]+\@(?!:[\w-]+\.)+\w+$/. It's a very bad idea. However, this also throws out many valid ones, and says nothing about potential deliverability, so it is not suggested. Instead, see http!://www.perl.com/CPAN/authors/ Tom_Christiansen/scripts/ckaddr.gz, which actually checks against the full RFC spec (except for nested comments), looks for addresses you may not wish to accept mail to (say, Bill Clinton or your postmaster), and then makes sure that the hostname given can be looked up in the DNS MX records. It's not fast, but it works for what it tries to do. EOL EOLOur best advice for verifying a person's mail address is to have them enter their address twice, just as you normally do to change a password. This usually weeds out typos. If both versions match, send mail to that address with a personal message that looks somewhat like!: EOL EOL    Dear someuser@host.com, EOL EOL    Please confirm the mail address you gave us Wed May  6 09!:38!:41 EOL    MDT 1998 by replying to this message.  Include the string EOL    "Rumpelstiltskin" in that reply, but spelled in reverse; that is, EOL    start with "Nik...".  Once this is done, your confirmed address will EOL    be entered into our records.  EOL EOLIf you get the message back and they've followed your directions, you can be reasonably assured that it's real. EOL EOLA related strategy that's less open to forgery is to give them a PIN (personal ID number). Record the address and PIN (best that it be a random one) for later processing. In the mail you send, ask them to include the PIN in their reply. But if it bounces, or the message is included via a ``vacation'' script, it'll be there anyway. So it's best to ask them to mail back a slight alteration of the PIN, such as with the characters reversed, one added or subtracted to each digit, etc. EOL EOL:end###0.01587___address###0.25397___destination###0.12698___line###0.01587___style###0.01587___auditory_communication###0.01587___module###0.01587___speech###0.12698___reprimand###0.01587___direction###0.01587___utterance###0.01587___vocalization###0.01587___speech_production###0.01587___goal###0.01587___mental_faculty###0.01587___expressive_style###0.01587___tactfulness###0.01587___instruction###0.01587___savoir-faire###0.12698___rebuke###0.01587___faculty###0.01587___speaking###0.01587___reproof###0.01587___speech_act###0.01587___reprehension###0.01587___reproval###0.01587___tact###0.01587:how###1.00000:how do###1.00000:mail###0.047___address###0.044___pin###0.025___addresses###0.020___valid###0.016___message###0.016___deliverable###0.012___eol###0.011___compliant###0.011___reply###0.011___best###0.010___personal###0.010___records###0.009___ask###0.009___it's###0.009___looks###0.009___header###0.009___back###0.008___send###0.008___aren't###0.007___such_as###0.007___include###0.006___twice###0.006___assured###0.006___vacation###0.006___in_real_time###0.006___directions###0.006___verifying###0.006___on_the_other_hand###0.006___wed###0.006___weeds###0.006___bummer###0.006___alteration###0.006___human###0.006___digit###0.006___frequently-invalid###0.006___mdt###0.006___deliverability###0.006___confirm###0.006___confirmed###0.006___open_to###0.006___person's###0.006___bounces###0.006___postmaster###0.006___potential###0.006___nik###0.006___forgery###0.006___replying###0.006___rfc-822###0.006___rumpelstiltskin###0.006___bill_clinton###0.006___someuser@host.com###0.006___spelled###0.006___strategy###0.006___subtracted###0.006___they've###0.006___tom_christiansen/scripts/ckaddr###0.006___dear###0.006___whether###0.005___tempted###0.005___eolour###0.005___eolwithout###0.005___apply###0.005___eliminate###0.005___slight###0.005___seeing###0.005___enter###0.005___entered###0.005___followed###0.005___it'll###0.005___related###0.005___typos###0.005___advice###0.005___reasonably###0.005___reversed###0.005___throws###0.005___standard###0.005___dns###0.005___hostname###0.005___looked###0.005___rfc###0.005___to_that###0.005___eolmany###0.005___fast###0.005___http!://www.perl.com/cpan/authors/###0.005___except_for###0.004___added###0.004___sending###0.004___gave###0.004___somewhat###0.004___spec###0.004___suggested###0.004___tries###0.004___nested###0.004___checks###0.004___just_as###0.004___anyway###0.004___full###0.004___reverse###0.004___accept###0.004___included###0.004___idea###0.004___password###0.004___processing###0.004___against###0.004___comments###0.004___record###0.004___in_that###0.004___normally###0.004___random###0.004___says###0.004___even_if###0.004___please###0.004___at_least###0.004___determine###0.004___cannot###0.004___regex###0.004___nothing###0.004___etc.###0.004___wish###0.004___one###0.004___sure###0.004___ones###0.003___real###0.003___once###0.003___eola###0.003___give###0.003___may_not###0.003___later###0.003___problems###0.003___actually###0.003___less###0.003___versions###0.003___and_then###0.003___however###0.003___start###0.003___bad###0.003___answer###0.003___match###0.003___usually###0.003___say###0.003___done###0.003___works###0.003___there's###0.003___given###0.003___script###0.003___that_is###0.003___makes###0.003___that's###0.003___change###0.003___check###0.003___characters###0.003___instead###0.003___is_not###0.003___simple###0.003___try###0.003___number###0.002___can't###0.002___string###0.002___may###0.002___eolif###0.002___
288:69###0.18,183###0.13,178###0.12,205###0.12,240###0.12,188###0.11,88###0.11,291###0.11,295###0.11,95###0.10:How do I decode a MIME/BASE64 string?  EOL EOL:The MIME-Base64 package (available from CPAN) handles this as well as the MIME/QP encoding. Decoding BASE64 becomes as simple as!: EOL EOL    use MIME!:!:Base64; EOL    $decoded = decode_base64($encoded);  EOL EOLThe MIME-Tools package (available from CPAN) supports extraction with decoding of BASE64 encoded attachments and content directly from email messages. EOL EOLIf the string to decode is short (less than 84 bytes long) a more direct approach is to use the unpack() function's "u" format after minor transliterations!: EOL EOL    tr#A-Za-z0-9+/##cd;                   # remove non-base64 chars EOL    tr#A-Za-z0-9+/# -_#;                  # convert to uuencoded format EOL    $len = pack("c", 32 + 0.75*length);   # compute length byte EOL    print unpack("u", $len . $_);         # uudecode and print  EOL EOL:pattern###0.01163___twine###0.09302___shore###0.01163___ligament###0.01163___business_organization###0.01163___cord###0.01163___line###0.01163___linear_unit###0.01163___series###0.01163___shape###0.01163___train###0.09302___string###0.18605___unit###0.01163___constraint###0.01163___geological_formation###0.01163___form###0.01163___piece_of_material###0.01163___trammel###0.01163___business_organisation###0.01163___bond###0.01163___consequence###0.01163___business###0.01163___piece_of_cloth###0.01163___aftermath###0.01163___chain###0.09302___hamper###0.01163___fibre###0.01163___wheelwork###0.01163___biochemist###0.01163___public_transport###0.01163___business_concern###0.01163___strand###0.09302___building_block###0.01163___concern###0.01163___shackle###0.01163___procession###0.01163___restraint###0.01163___fiber###0.01163___formation###0.01163___geology###0.01163___street###0.01163___trammels###0.01163___necklace###0.01163:how###1.00000:how do###1.00000:base64###0.056___a-za-z0-9###0.037___encoded###0.037___decoding###0.033___len###0.033___eol###0.028___decode###0.028___unpack###0.025___length###0.024___format###0.022___package###0.020___mime/base64###0.018___email###0.018___mime-tools###0.018___mime-base64###0.018___extraction###0.018___less_than###0.018___decoded###0.018___decode_base64###0.018___function's###0.018___non-base64###0.018___minor###0.018___transliterations###0.018___mime/qp###0.018___uudecode###0.018___uuencoded###0.018___becomes###0.016___attachments###0.016___mime###0.016___available###0.016___compute###0.015___short###0.015___content###0.015___handles###0.014___messages###0.014___encoding###0.014___chars###0.014___string###0.014___print###0.013___convert###0.013___direct###0.013___long###0.013___as_well_as###0.013___bytes###0.012___cpan###0.012___remove###0.012___pack###0.012___byte###0.012___directly###0.011___supports###0.010___approach###0.009___simple###0.009___eolthe###0.007___eolif###0.006___
289:287###0.48,293###0.31,290###0.19,292###0.17,82###0.17,285###0.16,32###0.10,58###0.10,65###0.10,205###0.10:How do I return the user's mail address?  EOL EOL:On systems that support getpwuid, the $< variable, and the Sys!:!:Hostname module (which is part of the standard perl distribution), you can probably try using something like this!: EOL EOL    use Sys!:!:Hostname; EOL    $address = sprintf('%s@%s', scalar getpwuid($<), hostname);  EOL EOLCompany policies on mail address can mean that this generates addresses that the company's mail system will not accept, so you should ask for users' mail addresses when this matters. Furthermore, not all systems on which Perl runs are so forthcoming with this information as is Unix. EOL EOLThe Mail!:!:Util module from CPAN (part of the MailTools package) provides a mailaddress() function that tries to guess the mail address of the user. It makes a more intelligent guess than the code above, using information given when the module was installed, but it could still be incorrect. Again, the best way is often just to ask the user. EOL EOL:end###0.01587___address###0.25397___destination###0.12698___line###0.01587___style###0.01587___auditory_communication###0.01587___module###0.01587___speech###0.12698___reprimand###0.01587___direction###0.01587___utterance###0.01587___vocalization###0.01587___speech_production###0.01587___goal###0.01587___mental_faculty###0.01587___expressive_style###0.01587___tactfulness###0.01587___instruction###0.01587___savoir-faire###0.12698___rebuke###0.01587___faculty###0.01587___speaking###0.01587___reproof###0.01587___speech_act###0.01587___reprehension###0.01587___reproval###0.01587___tact###0.01587:how###1.00000:how do###1.00000:mail###0.069___address###0.058___hostname###0.046___getpwuid###0.033___guess###0.033___addresses###0.030___sys###0.027___user###0.022___will_not###0.018___util###0.018___ask_for###0.018___furthermore###0.018___forthcoming###0.018___mailaddress###0.018___company's###0.018___eolcompany###0.018___policies###0.018___intelligent###0.018___information###0.018___eol###0.018___module###0.017___part###0.016___systems###0.016___user's###0.016___incorrect###0.016___mailtools###0.015___generates###0.014___ask###0.014___tries###0.014___accept###0.013___matters###0.013___again###0.013___users###0.013___using###0.012___sprintf###0.012___runs###0.011___installed###0.011___mean###0.010___provides###0.010___given###0.010___support###0.010___best###0.010___package###0.010___often###0.010___above###0.009___makes###0.009___unix###0.009___scalar###0.009___try###0.008___return###0.008___variable###0.008___something###0.008___distribution###0.008___standard###0.007___probably###0.007___perl###0.007___eolthe###0.007___system###0.007___function###0.007___code###0.006___cpan###0.006___
290:287###0.24,291###0.22,289###0.19,292###0.19,141###0.14,177###0.13,285###0.12,175###0.12,183###0.11,199###0.11:How do I send mail?  EOL EOL:Use the sendmail program directly!: EOL EOL    open(SENDMAIL, "|/usr/lib/sendmail -oi -t -odq") EOL                        or die "Can't fork for sendmail!: $!!\n"; EOL    print SENDMAIL <<"EOF"; EOL    From!: User Originating Mail <me\@host> EOL    To!: Final Destination <you\@otherhost> EOL    Subject!: A relevant subject line EOL EOL    Body of the message goes here after the blank line EOL    in as many lines as you like. EOL    EOF EOL    close(SENDMAIL)     or warn "sendmail didn't close nicely";  EOL EOLThe -oi option prevents sendmail from interpreting a line consisting of a single dot as "end of message". The -t option says to use the headers to decide who to send the message to, and -odq says to put the message into the queue. This last option means your message won't be immediately delivered, so leave it out if you want immediate delivery. EOL EOLAlternate, less convenient approaches include calling mail (sometimes called mailx) directly or simply opening up port 25 have having an intimate conversation between just you and the remote SMTP daemon, probably sendmail. EOL EOLOr you might be able use the CPAN module Mail!:!:Mailer!: EOL EOL    use Mail!:!:Mailer; EOL EOL    $mailer = Mail!:!:Mailer->new(); EOL    $mailer->open({ From    => $from_address, EOL                    To      => $to_address, EOL                    Subject => $subject, EOL                  }) EOL        or die "Can't open!: $!!\n"; EOL    print $mailer $body; EOL    $mailer->close();  EOL EOLThe Mail!:!:Internet module uses Net!:!:SMTP which is less Unix-centric than Mail!:!:Mailer, but less reliable. Avoid raw SMTP commands. There are many reasons to use a mail transport agent like sendmail. These include queueing, MX records, and security. EOL EOL::how###1.00000:how do###1.00000:mailer###0.072___sendmail###0.067___mail###0.051___eol###0.030___message###0.029___subject###0.028___smtp###0.024___option###0.021___body###0.018___odq###0.018___less###0.016___close###0.015___eof###0.013___line###0.012___says###0.012___send###0.011___open###0.011___directly###0.011___include###0.009___queueing###0.009___eolalternate###0.009___destination###0.009___relevant###0.009___intimate###0.009___interpreting###0.009___otherhost###0.009___from_address###0.009___conversation###0.009___mailx###0.009___queue###0.009___delivered###0.009___originating###0.009___as_many###0.009___to_address###0.009___transport###0.009___unix-centric###0.009___usr/lib/sendmail###0.009___die###0.008___final###0.008___agent###0.008___immediate###0.008___dot###0.008___host###0.008___immediately###0.008___delivery###0.008___remote###0.008___having###0.008___headers###0.008___approaches###0.007___decide###0.007___blank###0.007___consisting###0.007___can't###0.007___eolthe###0.007___warn###0.007___raw###0.007___records###0.007___reliable###0.007___internet###0.007___nicely###0.007___daemon###0.006___convenient###0.006___leave###0.006___prevents###0.006___goes###0.006___able###0.006___commands###0.006___opening###0.006___print###0.006___calling###0.006___didn't###0.006___fork###0.006___port###0.006___security###0.005___simply###0.005___reasons###0.005___net###0.005___module###0.005___single###0.005___user###0.005___avoid###0.005___uses###0.005___sometimes###0.005___last###0.005___means###0.005___called###0.004___won't###0.004___lines###0.004___eolor###0.004___probably###0.003___new###0.003___program###0.003___cpan###0.003___
291:290###0.22,292###0.21,183###0.18,177###0.17,274###0.17,221###0.16,205###0.16,178###0.15,210###0.15,101###0.15:How do I use MIME to make an attachment to a mail message?  EOL EOL:This answer is extracted directly from the MIME!:!:Lite documentation. Create a multipart message (i.e., one with attachments). EOL EOL    use MIME!:!:Lite; EOL EOL    ### Create a new multipart message!: EOL    $msg = MIME!:!:Lite->new( EOL                 From    =>'me@myhost.com', EOL                 To      =>'you@yourhost.com', EOL                 Cc      =>'some@other.com, some@more.com', EOL                 Subject =>'A message with 2 parts...', EOL                 Type    =>'multipart/mixed' EOL                 ); EOL EOL    ### Add parts (each "attach" has same arguments as "new")!: EOL    $msg->attach(Type     =>'TEXT', EOL                 Data     =>"Here's the GIF file you wanted" EOL                 ); EOL    $msg->attach(Type     =>'image/gif', EOL                 Path     =>'aaa000123.gif', EOL                 Filename =>'logo.gif' EOL                 ); EOL EOL    $text = $msg->as_string;  EOL EOLMIME!:!:Lite also includes a method for sending these things. EOL EOL    $msg->send;  EOL EOLThis defaults to using sendmail(1) but can be customized to use SMTP via Net!:!:SMTP. EOL EOL:recognisance###0.00649___dumb_show###0.05195___playacting###0.00649___attraction###0.00649___attachment###0.10390___performing###0.00649___syllable_structure###0.00649___certificate###0.00649___security###0.00649___acting###0.00649___tenderness###0.00649___affixation###0.05195___stickiness###0.00649___pathology###0.00649___connecter###0.00649___connectedness###0.00649___connection###0.00649___histrion###0.00649___heart###0.00649___fastening###0.05195___civil_rights_leader###0.00649___role_player###0.00649___constraint###0.00649___morphology###0.00649___player###0.00649___warmheartedness###0.00649___affection###0.00649___affectionateness###0.00649___word_structure###0.00649___adherence###0.05195___scar_tissue###0.00649___recognizance###0.00649___certificate_of_indebtedness###0.00649___debt_instrument###0.00649___thespian###0.00649___mime###0.10390___fond_regard###0.05195___bond###0.05195___mummer###0.05195___actor###0.00649___fictional_character###0.00649___joining###0.00649___sound_structure###0.00649___combination###0.00649___pantomimist###0.05195___combining###0.00649___adhesion###0.05195___connective###0.00649___fondness###0.00649___writing_paper###0.00649___connexion###0.00649___playing###0.00649___attractive_force###0.00649___restraint###0.00649___support###0.00649___character###0.00649___formation###0.00649___connector###0.00649___fictitious_character###0.00649___civil_rights_worker###0.00649___compounding###0.00649:how###1.00000:how do###1.00000:msg###0.071___lite###0.061___mime###0.061___eol###0.056___attach###0.046___gif###0.046___message###0.045___type###0.031___smtp###0.030___multipart###0.030___parts###0.024___new###0.020___create###0.018___defaults###0.017___attachment###0.017___customized###0.017___extracted###0.017___logo###0.017___eolmime###0.017___image/gif###0.017___multipart/mixed###0.017___some@more.com###0.017___aaa000123###0.017___text###0.016___attachments###0.015___as_string###0.015___sendmail###0.014___sending###0.013___subject###0.013___includes###0.012___i.e.###0.012___filename###0.011___path###0.011___send###0.011___wanted###0.011___arguments###0.011___net###0.011___directly###0.010___mail###0.010___documentation###0.010___answer###0.009___method###0.009___here's###0.008___things###0.008___data###0.008___eolthis###0.007___file###0.006___using###0.005___one###0.005___
292:115###0.23,291###0.21,205###0.20,290###0.19,210###0.18,122###0.18,289###0.17,51###0.17,285###0.17,183###0.15:How do I read mail?  EOL EOL:While you could use the Mail!:!:Folder module from CPAN (part of the MailFolder package) or the Mail!:!:Internet module from CPAN (also part of the MailTools package), often a module is overkill. Here's a mail sorter. EOL EOL    #!!/usr/bin/perl EOL    # bysub1 - simple sort by subject EOL    my(@msgs, @sub); EOL    my $msgno = -1; EOL    $/ = '';                    # paragraph reads EOL    while (<>) { EOL        if (/^From/m) { EOL            /^Subject!:\s*(?!:Re!:\s*)*(.*)/mi; EOL            $sub[++$msgno] = lc($1) || ''; EOL        } EOL        $msgs[$msgno] .= $_; EOL    } EOL    for my $i (sort { $sub[$a] cmp $sub[$b] || $a <=> $b } (0 .. $#msgs)) { EOL        print $msgs[$i]; EOL    }  EOL EOLOr more succinctly, EOL EOL    #!!/usr/bin/perl -n00 EOL    # bysub2 - awkish sort-by-subject EOL    BEGIN { $msgno = -1 } EOL    $sub[++$msgno] = (/^Subject!:\s*(?!:Re!:\s*)*(.*)/mi)[0] if /^From/m; EOL    $msg[$msgno] .= $_; EOL    END { print @msg[ sort { $sub[$a] cmp $sub[$b] || $a <=> $b } (0 .. $#msg) ] }  EOL EOL::how###1.00000:how do###1.00000:msgno###0.117___msgs###0.078___sub###0.060___eol###0.059___mail###0.049___msg###0.048___subject###0.046___sort###0.040___from/m###0.039___cmp###0.032___usr/bin/perl###0.028___package###0.021___folder###0.019___bysub1###0.019___awkish###0.019___mailfolder###0.019___overkill###0.019___sort-by-subject###0.019___sorter###0.019___bysub2###0.019___module###0.018___part###0.017___n00###0.017___succinctly###0.017___mailtools###0.016___internet###0.015___reads###0.014___print###0.014___paragraph###0.014___cpan###0.013___begin###0.012___often###0.010___here's###0.009___simple###0.009___eolor###0.009___read###0.008___
293:289###0.31,287###0.15,183###0.10,259###0.10,205###0.09,38###0.09,103###0.09,210###0.08,95###0.08,220###0.08:How do I find out my hostname/domainname/IP address?  EOL EOL:The normal way to find your own hostname is to call the `hostname` program. While sometimes expedient, this has some problems, such as not knowing whether you've got the canonical name or not. It's one of those tradeoffs of convenience versus portability. EOL EOLThe Sys!:!:Hostname module (part of the standard perl distribution) will give you the hostname after which you can find out the IP address (assuming you have working DNS) with a gethostbyname() call. EOL EOL    use Socket; EOL    use Sys!:!:Hostname; EOL    my $host = hostname(); EOL    my $addr = inet_ntoa(scalar gethostbyname($host || 'localhost'));  EOL EOLProbably the simplest way to learn your DNS domain name is to grok it out of /etc/resolv.conf, at least under Unix. Of course, this assumes several things about your resolv.conf configuration, including that it exists. EOL EOL(We still need a good DNS domain name-learning method for non-Unix systems.) EOL EOL:end###0.01587___address###0.25397___destination###0.12698___line###0.01587___style###0.01587___auditory_communication###0.01587___module###0.01587___speech###0.12698___reprimand###0.01587___direction###0.01587___utterance###0.01587___vocalization###0.01587___speech_production###0.01587___goal###0.01587___mental_faculty###0.01587___expressive_style###0.01587___tactfulness###0.01587___instruction###0.01587___savoir-faire###0.12698___rebuke###0.01587___faculty###0.01587___speaking###0.01587___reproof###0.01587___speech_act###0.01587___reprehension###0.01587___reproval###0.01587___tact###0.01587:name###0.66667___how###0.33333:how do###1.00000:hostname###0.084___dns###0.042___conf###0.034___gethostbyname###0.034___domain_name###0.034___host###0.030___address###0.026___sys###0.025___eol###0.024___find_out###0.023___call###0.017___canonical###0.017___convenience###0.017___hostname/domainname/ip###0.017___etc/resolv###0.017___grok###0.017___inet_ntoa###0.017___localhost###0.017___resolv###0.017___expedient###0.015___knowing###0.015___eolprobably###0.015___addr###0.015___tradeoffs###0.015___configuration###0.014___versus###0.014___non-unix###0.013___out_of###0.012___portability###0.012___exists###0.012___working###0.012___socket###0.011___simplest###0.011___assumes###0.011___at_least###0.011___assuming###0.011___of_course###0.010___normal###0.010___you've###0.010___give###0.010___problems###0.010___learn###0.010___including###0.010___such_as###0.009___good###0.009___sometimes###0.009___method###0.009___own###0.009___several###0.009___unix###0.009___name###0.009___scalar###0.008___things###0.008___find###0.008___whether###0.007___part###0.007___systems###0.007___distribution###0.007___you_have###0.007___standard###0.007___need###0.006___eolthe###0.006___it's###0.006___program###0.006___one###0.005___module###0.005___perl###0.003___
294:295###0.18,24###0.13,28###0.12,177###0.11,102###0.10,278###0.09,21###0.09,178###0.09,109###0.09,183###0.09:How do I fetch a news article or the active newsgroups?  EOL EOL:Use the Net!:!:NNTP or News!:!:NNTPClient modules, both available from CPAN. This can make tasks like fetching the newsgroup list as simple as EOL EOL    perl -MNews!:!:NNTPClient EOL      -e 'print News!:!:NNTPClient->new->list("newsgroups")'  EOL EOL:spoken_language###0.01042___sacred_writing###0.01042___promise###0.01042___arcanum###0.01042___clause###0.08333___voice_communication###0.01042___secret###0.01042___construction###0.01042___article###0.16667___speech###0.01042___religious_text###0.01042___grammatical_construction###0.01042___statement###0.01042___hypostasis###0.01042___intelligence###0.08333___administrative_unit###0.01042___order###0.01042___spoken_communication###0.01042___info###0.01042___computer_memory_unit###0.01042___language_unit###0.01042___religious_writing###0.01042___oral_communication###0.01042___tidings###0.08333___power###0.01042___section###0.01042___information###0.01042___speech_communication###0.01042___sacred_text###0.01042___language###0.01042___news###0.16667___subdivision###0.01042___word###0.08333___linguistic_unit###0.01042___information_gathering###0.01042___expression###0.01042___ability###0.01042___administrative_body###0.01042:how###1.00000:how do###1.00000:nntpclient###0.163___news###0.090___newsgroups###0.085___news_article###0.054___nntp###0.054___active###0.054___mnews###0.054___list###0.048___fetching###0.048___newsgroup###0.042___eol###0.041___fetch###0.040___tasks###0.040___net###0.034___simple###0.027___modules###0.024___available###0.023___new###0.021___print###0.019___cpan###0.018___perl###0.011___
295:278###0.20,254###0.18,294###0.18,177###0.15,71###0.15,188###0.15,277###0.13,28###0.13,279###0.12,288###0.11:How do I fetch/put an FTP file?  EOL EOL:LWP!:!:Simple (available from CPAN) can fetch but not put. Net!:!:FTP (also available from CPAN) is more complex but can put as well as fetch. EOL EOL:file_transfer_protocol###0.30769___protocol###0.03846___communications_protocol###0.03846___ftp###0.61538:how###1.00000:how do###1.00000:ftp###0.161___fetch###0.154___fetch/put###0.103___available###0.089___lwp###0.077___complex###0.074___as_well_as###0.071___cpan###0.069___net###0.065___simple###0.051___eol###0.044___file###0.036___
296:188###0.11,71###0.09,295###0.09,266###0.07,255###0.07,205###0.07,220###0.06,277###0.06,288###0.06,260###0.05:How can I do RPC in Perl?  EOL EOL:A DCE!:!:RPC module is being developed (but is not yet available) and will be released as part of the DCE-Perl package (available from CPAN). The rpcgen suite, available from CPAN/authors/id/JAKE/, is an RPC stub generator and includes an RPC!:!:ONC module. EOL::how###1.00000:how can###1.00000:rpc###0.213___available###0.069___developed###0.053___onc###0.053___rpcgen###0.053___stub###0.053___cpan/authors/id/jake###0.053___dce###0.053___dce-perl###0.053___released###0.047___suite###0.047___generator###0.047___includes###0.039___module###0.033___package###0.029___is_not###0.026___part###0.024___cpan###0.017___eol###0.017___perl###0.010___
